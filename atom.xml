<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>nicolas</title>
  
  <subtitle>Yesterday you said tomorow.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://codeofli.github.io/"/>
  <updated>2019-11-13T12:53:57.289Z</updated>
  <id>https://codeofli.github.io/</id>
  
  <author>
    <name>nicolas lee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>maven</title>
    <link href="https://codeofli.github.io/2019/11/java-note/maven/maven/"/>
    <id>https://codeofli.github.io/2019/11/java-note/maven/maven/</id>
    <published>2019-11-13T07:09:35.000Z</published>
    <updated>2019-11-13T12:53:57.289Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="maven配置文件"><a href="#maven配置文件" class="headerlink" title="maven配置文件"></a>maven配置文件</h1><p>D:\apache-maven-3.6.1\conf\settings.xml</p><p>设置镜像阿里mirrors</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>配置maven的jdk</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk18<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">activaByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activaByDefault</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span>               <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="maven使用spring单元测试"><a href="#maven使用spring单元测试" class="headerlink" title="maven使用spring单元测试"></a>maven使用spring单元测试</h1><p>test写在src/test/mapper/目录下</p><p>推荐Spring的项目就可以使用spring的单元测试，可以依赖注入我们需要的组件</p><p> 1.导入springTest模块(meven导包)<br> 2.@ContextConfiguration指定spring配置文件内容,@RunWith(SpringJUnit4ClassRunner.class)<br> 3.直接autoWrited要使用的组件即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">**</span><br><span class="line"> * 测试dao工作层</span><br><span class="line"> * <span class="meta">@author</span> test</span><br><span class="line"> */</span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(locations = &#123;<span class="string">"classpath:applicationContext.xml"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapperTest</span> </span>&#123;</span><br></pre></td></tr></table></figure><h2 id="maven的pom-xml结构"><a href="#maven的pom-xml结构" class="headerlink" title="maven的pom.xml结构"></a>maven的pom.xml结构</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--maven的pom.xml结构--&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--组织名称 一般是公司名称的倒写，像包名--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sz<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--项目，模块名称--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>helloworld1<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--版本号--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--项目名--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>helloworld1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- FIXME change it to the project's website --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.example.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--属性的定义--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--项目构建使用字符编码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--编译源代码的版本--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--目标代码的版本--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--依赖集</span></span><br><span class="line"><span class="comment">      你所需要的jar包</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--要什么jar全部到maven中央仓库去找仓库中进行搜索即可--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--这是一个依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--通过坐标来描述--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.38<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span><span class="comment">&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- clean lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#clean_Lifecycle --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-clean-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- default lifecycle, jar packaging: see https://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_jar_packaging --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.22.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-install-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-deploy-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- site lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#site_Lifecycle --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-site-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-project-info-reports-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="maven目录结构"><a href="#maven目录结构" class="headerlink" title="maven目录结构"></a>maven目录结构</h1><p><strong>测试类一般是放在src/test/java</strong>,而不是放在src/main/java下.maven在编译的时候,src/main/java下是不引用<scope>test</scope>的jar,而编译src/test/java下的测试这会引用<scope>test</scope>的jar</p><h2 id="maven中classpath路径"><a href="#maven中classpath路径" class="headerlink" title="maven中classpath路径"></a>maven中classpath路径</h2><p>在Maven工程中，classpath的路径指java resources路径下的目录，即</p><p>src/main/java、 src/main/resource、src/test/java 、src/test/resource   四个目录<br>所以在配置路径时需要注意文件名是否重名，导致加载文件失败</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;&lt;h1 id=&quot;maven配置文件&quot;&gt;&lt;a href=&quot;#maven配置文件&quot; class=&quot;headerlink&quot; title=&quot;maven配置文件&quot;&gt;&lt;/a&gt;maven配置文件&lt;/h1&gt;&lt;p&gt;D:\apache-maven-3.6.1\conf\settings.xml&lt;/p&gt;&lt;p&gt;设置镜像阿里mirrors&lt;/p&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;mirrors&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;mirror&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;id&lt;/span&gt;&amp;gt;&lt;/span&gt;alimaven&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;id&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;aliyun maven&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;url&lt;/span&gt;&amp;gt;&lt;/span&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;url&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;mirrorOf&lt;/span&gt;&amp;gt;&lt;/span&gt;central&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;mirrorOf&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;mirror&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;mirrors&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://codeofli.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://codeofli.github.io/tags/java/"/>
    
      <category term="maven" scheme="https://codeofli.github.io/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>docker</title>
    <link href="https://codeofli.github.io/2019/11/docker/docker/"/>
    <id>https://codeofli.github.io/2019/11/docker/docker/</id>
    <published>2019-11-12T07:39:56.000Z</published>
    <updated>2019-11-12T15:25:37.111Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><p><strong>Docker</strong>是一个开源的应用容器引擎；是一个轻量级容器技术；</p><p>Docker支持将软件编译成一个镜像；然后在镜像中各种软件做好配置，将镜像发布出去，其他使用者可以直接使用这个镜像；</p><p>运行中的这个镜像称为容器，容器启动是非常快速的。</p><p><img src="/2019/11/docker/docker/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180303145450.png" alt="img"></p><p><img src="/2019/11/docker/docker/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180303145531.png" alt="img"></p><h2 id="2、核心概念"><a href="#2、核心概念" class="headerlink" title="2、核心概念"></a>2、核心概念</h2><p>docker主机(Host)：安装了Docker程序的机器（Docker直接安装在操作系统之上）；</p><a id="more"></a><p>docker客户端(Client)：连接docker主机进行操作；</p><p>docker仓库(Registry)：用来保存各种打包好的软件镜像；</p><p>docker镜像(docker)：软件打包好的镜像；放在docker仓库中；</p><p>docker容器(Container)：镜像启动后的实例称为一个容器；容器是独立运行的一个或一组应用</p><p><img src="/2019/11/docker/docker/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180303165113.png" alt></p><p>使用Docker的步骤：</p><p>1）、安装Docker</p><p>2）、去Docker仓库找到这个软件对应的镜像；</p><p>3）、使用Docker运行这个镜像，这个镜像就会生成一个Docker容器；</p><p>4）、对容器的启动停止就是对软件的启动停止；</p><h2 id="3、安装Docker"><a href="#3、安装Docker" class="headerlink" title="3、安装Docker"></a>3、安装Docker</h2><h4 id="1）、安装linux虚拟机"><a href="#1）、安装linux虚拟机" class="headerlink" title="1）、安装linux虚拟机"></a>1）、安装linux虚拟机</h4><p>​    1）、VMWare、VirtualBox（安装）；</p><p>​    2）、导入虚拟机文件centos7-atguigu.ova；</p><p>​    3）、双击启动linux虚拟机;使用  root/ 123456登陆</p><p>​    4）、使用客户端连接linux服务器进行命令操作；</p><p>​    5）、设置虚拟机网络；</p><p>​        桥接网络===选好网卡====接入网线；</p><p>​    6）、设置好网络以后使用命令重启虚拟机的网络</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service network restart</span><br></pre></td></tr></table></figure><p>​    7）、查看linux的ip地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip addr</span><br></pre></td></tr></table></figure><p>​    8）、使用客户端连接linux；</p><h4 id="2）、在linux虚拟机上安装docker"><a href="#2）、在linux虚拟机上安装docker" class="headerlink" title="2）、在linux虚拟机上安装docker"></a>2）、在linux虚拟机上安装docker</h4><p>步骤：(安装不成功可以到菜鸟教程安装)</p><p>1、检查内核版本，必须是3.10及以上<br>uname -r<br>2、安装docker<br>yum install docker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install docker.io</span><br></pre></td></tr></table></figure><p>3、输入y确认安装<br>4、启动docker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# systemctl start docker</span><br><span class="line">[root@localhost ~]# docker -v</span><br><span class="line">Docker version 1.12.6, build 3e8e77d/1.12.6</span><br></pre></td></tr></table></figure><p>5、开机启动docker<br>[root@localhost ~]# systemctl enable docker<br>Created symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.<br>6、停止docker<br>systemctl stop docker</p><h2 id="4、Docker常用命令-amp-操作"><a href="#4、Docker常用命令-amp-操作" class="headerlink" title="4、Docker常用命令&amp;操作"></a>4、Docker常用命令&amp;操作</h2><h3 id="1）、镜像操作"><a href="#1）、镜像操作" class="headerlink" title="1）、镜像操作"></a>1）、镜像操作</h3><table><thead><tr><th>操作</th><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>检索</td><td>docker  search 关键字  eg：docker  search redis</td><td>我们经常去docker  hub上检索镜像的详细信息，如镜像的TAG。</td></tr><tr><td>拉取</td><td>docker pull 镜像名:tag</td><td>:tag是可选的，tag表示标签，多为软件的版本，默认是latest</td></tr><tr><td>列表</td><td>docker images</td><td>查看所有本地镜像</td></tr><tr><td>删除</td><td>docker rmi image-id</td><td>删除指定的本地镜像</td></tr></tbody></table><p><a href="https://hub.docker.com/" target="_blank" rel="noopener">https://hub.docker.com/</a></p><h3 id="2）、容器操作"><a href="#2）、容器操作" class="headerlink" title="2）、容器操作"></a>2）、容器操作</h3><p>软件镜像（QQ安装程序）—-运行镜像—-产生一个容器（正在运行的软件，运行的QQ）；</p><table><thead><tr><th>操作</th><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>运行</td><td>docker run –name container-name -d image-name<br>eg:docker run –name myredis –d redis<br>–</td><td>–name：自定义容器名<br>-d：后台运行<br>image-name:指定镜像模板</td></tr><tr><td>列表</td><td>docker ps（查看运行中的容器）；</td><td>加上-a；可以查看所有容器</td></tr><tr><td>启动</td><td>docker stop container-name/container-id</td><td>启动容器</td></tr><tr><td>停止</td><td>docker stop container-name/container-id</td><td>停止当前你运行的容器</td></tr><tr><td>删除</td><td>docker rm container-id</td><td>删除指定容器</td></tr><tr><td>端口映射</td><td>-p 6379:6379<br>eg:docker run -d -p 6379:6379 –name myredisdocker.io/redis</td><td>-p:主机端口(映射到)容器内部的端口</td></tr><tr><td>容器日志</td><td>docker logs container-name/container-id</td><td></td></tr><tr><td>更多命令</td><td><a href="https://docs.docker.com/engine/reference/commandline/docker/" target="_blank" rel="noopener">https://docs.docker.com/engine/reference/commandline/docker/</a></td><td></td></tr></tbody></table><p>步骤：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">1、搜索镜像</span><br><span class="line">[root@localhost ~]# docker search tomcat</span><br><span class="line">2、拉取镜像</span><br><span class="line">[root@localhost ~]# docker pull tomcat</span><br><span class="line">3、根据镜像启动容器</span><br><span class="line">docker run --name mytomcat -d tomcat:latest</span><br><span class="line">4、docker ps  </span><br><span class="line">查看运行中的容器</span><br><span class="line">5、 停止运行中的容器</span><br><span class="line">docker stop  容器的id</span><br><span class="line">6、查看所有的容器</span><br><span class="line">docker ps -a</span><br><span class="line">7、启动容器</span><br><span class="line">docker start 容器id</span><br><span class="line">8、删除一个容器</span><br><span class="line"> docker rm 容器id</span><br><span class="line">9、启动一个做了端口映射的tomcat</span><br><span class="line">[root@localhost ~]# docker run -d -p 8888:8080 tomcat</span><br><span class="line">-d：后台运行</span><br><span class="line">-p: 将主机的端口映射到容器的一个端口    主机端口:容器内部的端口</span><br><span class="line"></span><br><span class="line">10、为了演示简单关闭了linux的防火墙</span><br><span class="line">service firewalld status ；查看防火墙状态</span><br><span class="line">service firewalld stop：关闭防火墙</span><br><span class="line">11、查看容器的日志</span><br><span class="line">docker logs container-name/container-id</span><br><span class="line"></span><br><span class="line">更多命令参看</span><br><span class="line">https://docs.docker.com/engine/reference/commandline/docker/</span><br><span class="line">可以参考每一个镜像的文档</span><br></pre></td></tr></table></figure><p><img src="/2019/11/docker/docker/docker%5C%E5%85%B3%E9%97%ADfirewall%E7%9A%84%E5%8F%82%E6%95%B0.png" alt></p><h3 id="3）、安装MySQL示例"><a href="#3）、安装MySQL示例" class="headerlink" title="3）、安装MySQL示例"></a>3）、安装MySQL示例</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql</span><br><span class="line"><span class="meta">#</span><span class="bash">mysql 版本最好在5.7左右，不然navicat连不上</span></span><br><span class="line">[root@MiWiFi-R3A-srv ~]# docker pull mysql:5.7.27</span><br></pre></td></tr></table></figure><p>错误的启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker run --name mysql01 -d mysql</span><br><span class="line">42f09819908bb72dd99ae19e792e0a5d03c48638421fa64cce5f8ba0f40f5846</span><br><span class="line"></span><br><span class="line">mysql退出了</span><br><span class="line">[root@localhost ~]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                           PORTS               NAMES</span><br><span class="line">42f09819908b        mysql               "docker-entrypoint.sh"   34 seconds ago      Exited (1) 33 seconds ago                            mysql01</span><br><span class="line">538bde63e500        tomcat              "catalina.sh run"        About an hour ago   Exited (143) About an hour ago                       compassionate_</span><br><span class="line">goldstine</span><br><span class="line">c4f1ac60b3fc        tomcat              "catalina.sh run"        About an hour ago   Exited (143) About an hour ago                       lonely_fermi</span><br><span class="line">81ec743a5271        tomcat              "catalina.sh run"        About an hour ago   Exited (143) About an hour ago                       sick_ramanujan</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//错误日志</span><br><span class="line">[root@localhost ~]# docker logs 42f09819908b</span><br><span class="line">error: database is uninitialized and password option is not specified </span><br><span class="line">  You need to specify one of MYSQL_ROOT_PASSWORD, MYSQL_ALLOW_EMPTY_PASSWORD and MYSQL_RANDOM_ROOT_PASSWORD；这个三个参数必须指定一个</span><br></pre></td></tr></table></figure><p>正确的启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker run --name mysql01 -e MYSQL_ROOT_PASSWORD=123456 -d mysql</span><br><span class="line">nicolas@iZuf6i77uwsb2oiszspgvkZ:/home/admin$ sudo docker run --name mysql01 -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7.27</span><br><span class="line">b874c56bec49fb43024b3805ab51e9097da779f2f572c22c695305dedd684c5f</span><br><span class="line">[root@localhost ~]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES</span><br><span class="line">b874c56bec49        mysql               "docker-entrypoint.sh"   4 seconds ago       Up 3 seconds        3306/tcp            mysql01</span><br></pre></td></tr></table></figure><p>做了端口映射</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker run -p 3306:3306 --name mysql02 -e MYSQL_ROOT_PASSWORD=123456 -d mysql</span><br><span class="line">nicolas@iZuf6i77uwsb2oiszspgvkZ:/home/admin$ sudo docker run -p 3306:3306 --name mysql01 -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7.27</span><br><span class="line"></span><br><span class="line">ad10e4bc5c6a0f61cbad43898de71d366117d120e39db651844c0e73863b9434</span><br><span class="line">[root@localhost ~]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES</span><br><span class="line">ad10e4bc5c6a        mysql               "docker-entrypoint.sh"   4 seconds ago       Up 2 seconds        0.0.0.0:3306-&gt;3306/tcp   mysql02</span><br></pre></td></tr></table></figure><p>几个其他的高级操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mysql03 -v /conf/mysql:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag</span><br><span class="line">把主机的/conf/mysql文件夹挂载到 mysqldocker容器的/etc/mysql/conf.d文件夹里面</span><br><span class="line">改mysql的配置文件就只需要把mysql配置文件放在自定义的文件夹下（/conf/mysql）</span><br><span class="line"></span><br><span class="line">docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci</span><br><span class="line">指定mysql的一些配置参数</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">创建mysql容器+character-set</span></span><br><span class="line">docker run -p 3306:3306 --name mysql03 -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7.27 --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci</span><br><span class="line"></span><br><span class="line">docker run -d -p 3307:3306 -e MYSQL_ROOT_PASSWORD=db123456 --name mysql -e TZ=Asia/Shanghai mysql:5.7</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-e TZ=Asia/Shanghai     时区修改为中国时区</span><br><span class="line"></span><br><span class="line">-p 3306：3306：将容器的3306端口映射到主机的3306端口</span><br><span class="line"></span><br><span class="line">-v $ PWD / conf / my.cnf：/etc/mysql/my.cnf：将主机当前目录下的conf / my.cnf挂载到容器的/etc/mysql/my.cnf</span><br><span class="line"></span><br><span class="line">-v $ PWD / logs：/ logs：将主机当前目录下的日志目录挂载到容器的/ logs</span><br><span class="line"></span><br><span class="line">-v $ PWD / data：/ mysql_data：将主机当前目录下的数据目录挂载到容器的/ mysql_data</span><br><span class="line"></span><br><span class="line">-e MYSQL_ROOT_PASSWORD = 123456：初始化 root用户的密码</span><br></pre></td></tr></table></figure><p><strong>修改时区和字符集</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">docker run -p 3306:3306 --name ch-timezone-mysql -e MYSQL_ROOT_PASSWORD=123456 -e TZ=Asia/Shanghai -d mysql:5.7.27 --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci</span><br></pre></td></tr></table></figure><h3 id="安装mysql之后进行操作"><a href="#安装mysql之后进行操作" class="headerlink" title="安装mysql之后进行操作"></a>安装mysql之后进行操作</h3><p>3.进入容器bash并进入mysql命令行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@VM-0-5-ubuntu:/etc/apt$ sudo docker exec -it mysql02 bash</span><br></pre></td></tr></table></figure><p>Docker容器启动的时候，如果要挂载宿主机的一个目录，可以用-v参数指定。</p><p>譬如我要启动一个centos容器，宿主机的/test目录挂载到容器的/soft目录，可通过以下方式指定：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -v /test:/soft centos /bin/bash</span><br><span class="line">docker run -it -v /hmoe/ubuntu:/tmp mysql02 /bin/bash</span><br></pre></td></tr></table></figure><h1 id="安装redis"><a href="#安装redis" class="headerlink" title="安装redis"></a>安装redis</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">runoob@runoob:~$ mkdir -p ~/redis ~/redis/data</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -p <span class="number">6379</span>:<span class="number">6379</span> -v $PWD/data:/data  -d redis redis-server --appendonly yes</span><br></pre></td></tr></table></figure><p>命令说明：</p><p><strong>-p 6379:6379 :</strong> 将容器的6379端口映射到主机的6379端口</p><p><strong>-v $PWD/data:/data :</strong> 将主机中当前目录下的data挂载到容器的/data</p><p><strong>redis-server –appendonly yes :</strong> 在容器执行redis-server启动命令，并打开redis持久化配置</p><h2 id="连接、查看容器"><a href="#连接、查看容器" class="headerlink" title="连接、查看容器"></a>连接、查看容器</h2><p>使用redis镜像执行redis-cli命令连接到刚启动的容器,主机IP为172.17.0.1</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">runoob@</span>runoob:~/redis$ docker exec -it <span class="number">43f</span>7a65ec7f8 redis-cli</span><br><span class="line"><span class="number">172.17</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; info</span><br><span class="line"># Server</span><br><span class="line">redis_version:<span class="number">3.2</span><span class="number">.0</span></span><br><span class="line">redis_git_sha1:<span class="number">00000000</span></span><br><span class="line">redis_git_dirty:<span class="number">0</span></span><br><span class="line">redis_build_id:f449541256e7d446</span><br><span class="line">redis_mode:standalone</span><br><span class="line">os:Linux <span class="number">4.2</span><span class="number">.0</span><span class="number">-16</span>-generic x86_64</span><br><span class="line">arch_bits:<span class="number">64</span></span><br><span class="line">multiplexing_api:epoll</span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it 239fadb88042 redis-cli</span><br></pre></td></tr></table></figure><h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2><h3 id="配置文件映射"><a href="#配置文件映射" class="headerlink" title="配置文件映射"></a>配置文件映射</h3><p>Alternatively, you can specify something along the same lines with docker run options.</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="keyword">run</span> -v /myredis/<span class="keyword">conf</span>/redis.<span class="keyword">conf</span>:/usr/<span class="keyword">local</span>/etc/redis/redis.<span class="keyword">conf</span> --name myredis redis redis-server /usr/<span class="keyword">local</span>/etc/redis/redis.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure><p>Where <code>/myredis/conf/</code> is a local directory containing your <code>redis.conf</code>file. Using this method means that there is no need for you to have a Dockerfile for your redis container.</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --privileged=true -p 6379:6379 --restart always -v /root/docker/redis/conf/redis.conf:/etc/redis/redis.conf -v /root/docker/redis/data:/data --name myredis redis redis-server /etc/redis/redis.conf --appendonly yes</span><br></pre></td></tr></table></figure><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-<span class="function"><span class="title">d</span>                                -&gt;</span> 以守护进程的方式启动容器</span><br><span class="line">-<span class="function"><span class="title">p</span> 6379:6379                      -&gt;</span> 绑定宿主机端口</span><br><span class="line">--<span class="function"><span class="title">name</span> myredis                    -&gt;</span> 指定容器名称</span><br><span class="line">--<span class="function"><span class="title">restart</span> always                  -&gt;</span> 开机启动</span><br><span class="line">--<span class="function"><span class="title">privileged</span>=<span class="literal">true</span>                 -&gt;</span> 提升容器内权限</span><br><span class="line">-<span class="function"><span class="title">v</span> /root/docker/redis/conf:/etc/redis/redis.conf    -&gt;</span> 映射配置文件</span><br><span class="line">-<span class="function"><span class="title">v</span> /root/docker/redis/<span class="keyword">data</span>:/<span class="keyword">data</span>   -&gt;</span> 映射数据目录</span><br><span class="line">--<span class="function"><span class="title">appendonly</span> yes                   -&gt;</span> 开启数据持久化</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;&lt;h1 id=&quot;1-简介&quot;&gt;&lt;a href=&quot;#1-简介&quot; class=&quot;headerlink&quot; title=&quot;1.简介&quot;&gt;&lt;/a&gt;1.简介&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Docker&lt;/strong&gt;是一个开源的应用容器引擎；是一个轻量级容器技术；&lt;/p&gt;&lt;p&gt;Docker支持将软件编译成一个镜像；然后在镜像中各种软件做好配置，将镜像发布出去，其他使用者可以直接使用这个镜像；&lt;/p&gt;&lt;p&gt;运行中的这个镜像称为容器，容器启动是非常快速的。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/2019/11/docker/docker/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180303145450.png&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/2019/11/docker/docker/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180303145531.png&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;&lt;h2 id=&quot;2、核心概念&quot;&gt;&lt;a href=&quot;#2、核心概念&quot; class=&quot;headerlink&quot; title=&quot;2、核心概念&quot;&gt;&lt;/a&gt;2、核心概念&lt;/h2&gt;&lt;p&gt;docker主机(Host)：安装了Docker程序的机器（Docker直接安装在操作系统之上）；&lt;/p&gt;
    
    </summary>
    
    
      <category term="learn-note" scheme="https://codeofli.github.io/categories/learn-note/"/>
    
    
      <category term="learn-note" scheme="https://codeofli.github.io/tags/learn-note/"/>
    
      <category term="docker" scheme="https://codeofli.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>mybatis</title>
    <link href="https://codeofli.github.io/2019/11/java-note/mybatis/mybatis/"/>
    <id>https://codeofli.github.io/2019/11/java-note/mybatis/mybatis/</id>
    <published>2019-11-12T02:40:06.000Z</published>
    <updated>2019-11-12T02:42:31.200Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h1><h2 id="mybatis约定："><a href="#mybatis约定：" class="headerlink" title="mybatis约定："></a>mybatis约定：</h2><p>输入参数parameterType 和 输出参数resultType ，在形式上都只能有一个</p><p>如果输入参数 ：是简单类型（8个基本类型+String） 是可以使用任何占位符,#{xxxx}<br>           如果是对象类型，则必须是对象的属性 #{属性名}</p><p>输出参数：  如果返回值类型是一个 对象（如Student），则无论返回一个、还是多个，<br>        再resultType都写成org.lanqiao.entity.Student<br>        即 resultType=”org.lanqiao.entity.Student”</p><a id="more"></a><h2 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h2><p>如果使用的 事务方式为 jdbc,则需要 手工commit提交，即session.commit();</p><h2 id><a href="#" class="headerlink" title></a></h2><h2 id="conf-xml"><a href="#conf-xml" class="headerlink" title="conf.xml"></a>conf.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta">PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">"http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 通过environment的default值和environment的id值指定Mybatis数据库的运行环境 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- development environment --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 事务提交方式：</span></span><br><span class="line"><span class="comment">JDBC：使用JDBC方式提交事务（commit rollback close）</span></span><br><span class="line"><span class="comment">MANAGED:将事务交给其他组件去托管（spring，jobss）默认自动关闭</span></span><br><span class="line"><span class="comment">设置不关闭：</span></span><br><span class="line"><span class="comment">&lt;transactionManager type="MANAGED" /&gt;</span></span><br><span class="line"><span class="comment">property name="closeConnection" value="false" /&gt;</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据源类型</span></span><br><span class="line"><span class="comment">UNPOOLED:传统jdbc方式(每次访问数据，均需要打开和关闭等数据库操作，但是打开和关闭都是很浪费资源和性能的）</span></span><br><span class="line"><span class="comment">POLLED：使用数据库连接池</span></span><br><span class="line"><span class="comment">JNDI：从tomcat中获取一个内置数据库连接池（数据库连接池-数据源）</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置数据库信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"oracle.jdbc.OracleDriver"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:oracle:thin:@localhost:1521:MLDN"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"scott"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"tigger"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  test environment--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置数据库信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"oracle.jdbc.OracleDriver"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:oracle:thin:@111:11:11:1521:MLDN"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"scott"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"tigger"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 加载映射文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"pers/nicolas/entity/studentMapper.xml"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="mapper-xml"><a href="#mapper-xml" class="headerlink" title="mapper.xml"></a>mapper.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper  </span></span><br><span class="line"><span class="meta">PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  </span></span><br><span class="line"><span class="meta">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- namespace：该mapper.xml映射文件的唯一标识 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"pers.nicolas.entity.studnetMapper"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 后续通过namespace.Id 定位该SQL语句--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- parameterType：输入参数的类型</span></span><br><span class="line"><span class="comment">resultType：查询结果的返回类型</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryStudentBysno"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"pers.nicolas.entity.Student"</span>&gt;</span></span><br><span class="line">select * from student where stuno = #&#123;stuno&#125;<span class="comment">&lt;!-- 不能有分号！！！无效字符 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addStudent"</span> <span class="attr">parameterType</span>=<span class="string">"pers.nicolas.entity.Student"</span> &gt;</span></span><br><span class="line">insert into student(stuno,stuname,stuage,graname) values(#&#123;stuNo&#125;,#&#123;stuName&#125;,#&#123;stuAge&#125;,#&#123;graName&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteStudentBySno"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">delete from student where stuno=#&#123;stuno&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateStudentBySno"</span> <span class="attr">parameterType</span>=<span class="string">"pers.nicolas.entity.Student"</span>&gt;</span></span><br><span class="line">update student set stuno=#&#123;stuNo&#125;, stuname = #&#123;stuName&#125;, stuage=#&#123;stuAge&#125;,graname=#&#123;graName&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryAllStudents"</span> <span class="attr">resultType</span>=<span class="string">"pers.nicolas.entity.Student"</span>&gt;</span></span><br><span class="line">select * from student</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="mybatis约定：-1"><a href="#mybatis约定：-1" class="headerlink" title="mybatis约定："></a>mybatis约定：</h2><p>输入参数parameterType 和 输出参数resultType ，在形式上都只能有一个</p><p>如果输入参数 ：是简单类型（8个基本类型+String） 是可以使用任何占位符,#{xxxx}<br>           如果是对象类型，则必须是对象的属性 #{属性名}</p><p>输出参数：  如果返回值类型是一个 对象（如Student），则无论返回一个、还是多个，<br>        再resultType都写成org.lanqiao.entity.Student<br>        即 resultType=”org.lanqiao.entity.Student”</p><p>注意事项：<br>如果使用的 事务方式为 jdbc,则需要 手工commit提交，即session.commit();</p><h2 id="mapper动态代理方式的crud"><a href="#mapper动态代理方式的crud" class="headerlink" title="mapper动态代理方式的crud"></a>mapper动态代理方式的crud</h2><p>又称<strong>（MyBatis接口开发）</strong></p><p>原则：约定优于配置 </p><p>硬编码方式<br>    abc.java<br>        Configuration conf = new Configuration();<br>        con.setName(“myProject”) ;</p><p>配置方式：<br>    abc.xml<br>        <name>myProject</name></p><p>约定：默认值就是myProject</p><h2 id="具体实现的步骤："><a href="#具体实现的步骤：" class="headerlink" title="具体实现的步骤："></a>具体实现的步骤：</h2><p>1.基础环境：mybatis.jar/ojdbc.jar、conf.xml、mapper.xml<br>2.（不同之处）<br>    约定的目标： 省略掉statement,即根据约定 直接可以定位出SQL语句</p><p>  a.接口，接口中的方法必须遵循以下约定：<br>         1.方法名和mapper.xml文件中标签的id值相同<br>         2 .方法的 输入参数 和mapper.xml文件中标签的 parameterType类型一致 (如果mapper.xml的标签中没有 parameterType，则说明方法没有输入参数)<br>         3.方法的返回值  和mapper.xml文件中标签的 resultType类型一致 （无论查询结果是一个 还是多个（student、List<student>），在mapper.xml标签中的resultType中只写 一个（Student）；如果没有resultType，则说明方法的返回值为void）</student></p><p>除了以上约定，要实现 接口中的方法  和  Mapper.xml中SQL标签一一对应，还需要以下1点：<br>    <strong>namespace的值 ，就是  接口的全类名（ 接口 - mapper.xml 一一对应）</strong></p><p>匹配的过程：（约定的过程）<br>1.根据 接口名 找到 mapper.xml文件（根据的是namespace=接口全类名）<br>2.根据 接口的方法名 找到 mapper.xml文件中的SQL标签 （方法名=SQL标签Id值）</p><p>以上2点可以保证： 当我们调用接口中的方法时，<br>程序能自动定位到 某一个Mapper.xml文件中的sqL标签</p><p>习惯：SQL映射文件（mapper.xml） 和 接口放在同一个包中 （注意修改conf.xml中加载mapper.xml文件的路径）</p><p>以上，可以通过接口的方法-&gt;SQL语句</p><p>执行：<br>        StudentMapper studentMapper = session.getMapper(StudentMapper.class) ;<br>        studentMapper.方法();</p><p>通过session对象获取接口（session.getMapper(接口.class);），再调用该接口中的方法，程序会自动执行该方法对应的SQL。</p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h2><p><a href="https://mybatis.org/mybatis-3/zh/configuration.html#typeAliases" target="_blank" rel="noopener">https://mybatis.org/mybatis-3/zh/configuration.html#typeAliases</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">"Problem"</span> <span class="attr">type</span>=<span class="string">"com.yoj.web.bean.Problem"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.yoj.web.bean"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><p>也可以指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean，比如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"domain.blog"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><p>每一个在包 <code>domain.blog</code> 中的 Java Bean，在没有注解的情况下，会使用 Bean 的首字母小写的非限定类名来作为它的别名。 比如 <code>domain.blog.Author</code> 的别名为 <code>author</code>；若有注解，则别名为其注解值。见下面的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Alias</span>(<span class="string">"author"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Author</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="类型处理器（类型转换器）"><a href="#类型处理器（类型转换器）" class="headerlink" title="类型处理器（类型转换器）"></a>类型处理器（类型转换器）</h1><p>1.MyBatis自带一些常见的类型处理器<br>    int  - number</p><p>2.自定义MyBatis类型处理器</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -数据库<span class="comment">(jdbc类型)</span></span><br></pre></td></tr></table></figure><p>示例：<br>实体类Student :  boolean   stuSex<br>            true:男<br>            false：女</p><p>表student：    number  stuSex<br>            1:男<br>            0：女<br>自定义类型转换器（boolean -number）步骤：<br>a.创建转换器：需要实现TypeHandler接口<br>    通过阅读源码发现，此接口有一个实现类 BaseTypeHandler ，因此 要实现转换器有2种选择：<br>    i.实现接口TypeHandler接口<br>    ii.继承BaseTypeHandler<br>b.配置conf.xml</p><p>需要注意的问题：  INTEGER(需要大写)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into student(stuno,stuname,stuage,graname,stusex) values(#&#123;stuNo&#125;,#&#123;stuName&#125;,#&#123;stuAge&#125;,#&#123;graName&#125; ,#&#123;stuSex ,javaType=boolean  ,jdbcType=INTEGER   &#125; )</span><br></pre></td></tr></table></figure><p>注意#{stuNo} 中存放的是 属性值，需要严格区分大小写。</p><p>resultMap可以实现2个功能：<br>1.类型转换<br>2.属性-字段的映射关系</p><select id="queryStudentByStuno" parametertype="int" resultmap="studentMapping">        select * from student where stuno = #{stuno}    </select><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"student"</span> <span class="attr">id</span>=<span class="string">"studentMapping"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 分为主键id 和非主键 result--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span>  <span class="attr">column</span>=<span class="string">"stuno"</span>  /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"stuName"</span>  <span class="attr">column</span>=<span class="string">"stuname"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"stuAge"</span>  <span class="attr">column</span>=<span class="string">"stuage"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"graName"</span>  <span class="attr">column</span>=<span class="string">"graname"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"stuSex"</span>  <span class="attr">column</span>=<span class="string">"stusex"</span>  <span class="attr">javaType</span>=<span class="string">"boolean"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="mybatis调用存储过程"><a href="#mybatis调用存储过程" class="headerlink" title="mybatis调用存储过程"></a>mybatis调用存储过程</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryCountByGradeWithProcedure"</span> <span class="attr">statementType</span>=<span class="string">"CALLABLE"</span>  <span class="attr">parameterType</span>=<span class="string">"HashMap"</span> &gt;</span></span><br><span class="line">&#123;</span><br><span class="line">CALL queryCountByGradeWithProcedure(</span><br><span class="line">#&#123;gName,jdbcType=VARCHAR,mode=IN&#125;,</span><br><span class="line">#&#123;scount,jdbcType=INTEGER,mode=OUT&#125;</span><br><span class="line">) </span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中 通过statementType=”CALLABLE”设置SQL的执行方式是存储过程。 存储过程的输入参数gName需要通过HashMap来指定<br>在使用时，通过hashmap的put方法传入输入参数的值；通过hashmap的Get方法 获取输出参数的值。<br>要注意Jar问题：ojdbc6.jar不能在 调存储过程时  打回车、tab，但是ojdbc7.jar可以。</p><p>如果报错： No enum constant org.apache.ibatis.type.JdbcType.xx，则说明mybatis不支持xx类型，需要查表。</p><p>存储过程 无论输入参数是什么值，语法上都需要 用map来传递该值；</p><p>只要 是  <transactionmanager type="JDBC">，则增删改都需要手工commit ;</transactionmanager></p><p>mapper.xml-&gt;mapper接口-&gt;测试方法</p><h1 id="输入和输出参数"><a href="#输入和输出参数" class="headerlink" title="输入和输出参数"></a>输入和输出参数</h1><h2 id="输入参数parameterType"><a href="#输入参数parameterType" class="headerlink" title="输入参数parameterType"></a>输入参数parameterType</h2><h2 id="1-类型为-简单类型（8个基本类型-String）"><a href="#1-类型为-简单类型（8个基本类型-String）" class="headerlink" title="1.类型为 简单类型（8个基本类型+String）"></a>1.类型为 简单类型（8个基本类型+String）</h2><h3 id="、-的区别"><a href="#、-的区别" class="headerlink" title="#{}、${}的区别"></a><strong>#{}、${}的区别</strong></h3><p>a.<br><strong>#{任意值}</strong><br><strong>${value} ，其中的标识符只能是value</strong></p><p><strong>b.#{}自动给String类型加上’’  （自动类型转换）</strong></p><p>  ${} 原样输出，但是适合于 动态排序（动态字段）</p><p>select stuno,stuname,stuage  from student where stuname = #{value}</p><p>select stuno,stuname,stuage  from student where stuname = ‘${value}’</p><p>动态排序：<br>select stuno,stuname,stuage  from student  order by ${value} asc</p><p><strong>c.#{}可以防止SQL注入</strong><br>  ${}不防止</p><p>${}、#{}相同之处：<br>a.都可以 获取对象的值 （嵌套类型对象）</p><p>i.获取对象值：<br>模糊查询，方式一：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> stuno,stuname,stuage  <span class="keyword">from</span> student <span class="keyword">where</span> stuage= <span class="comment">#&#123;stuAge&#125;  or stuname like #&#123;stuName&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Student student = <span class="keyword">new</span> Student();</span><br><span class="line">student.setStuAge(<span class="number">24</span>);</span><br><span class="line">student.setStuName(<span class="string">"%w%"</span>);</span><br><span class="line">List&lt;Student&gt; students = studentMapper.queryStudentBystuageOrstuName(student) ;<span class="comment">//接口的方法-&gt;SQL</span></span><br></pre></td></tr></table></figure><p>模糊查询，方式二：<br>    student.setStuName(“w”);<br>    select stuno,stuname,stuage  from student where stuage= #{stuAge}  or stuname like ‘%${stuName}%’</p><p>ii.嵌套类型对象</p><h2 id="2-对象类型"><a href="#2-对象类型" class="headerlink" title="2.对象类型"></a>2.对象类型</h2><p>#{属性名}<br>${属性名}</p><p>输入对象为HashMap：<br>where stuage= #{stuAge}</p><p>用map中key的值 匹配 占位符#{stuAge}，如果匹配成功 就用map的value替换占位符</p><h2 id="输出参数resultType"><a href="#输出参数resultType" class="headerlink" title="输出参数resultType"></a>输出参数resultType</h2><p>输出参数resultType<br>1.简单类型（8个基本+String）<br>2.输出参数为实体对象类型<br>3.输出参数为实体对象类型的集合 ：虽然输出类型为集合，但是resultType依然写 集合的元素类型（resyltType=”Student”）<br>4.输出参数类型为HashMap<br>    –HashMap本身是一个集合，可以存放多个元素，<br>      但是根据提示发现  返回值为HashMap时  ，查询的结果只能是1个学生（no,name）；<br>–&gt;结论：一个HashMap 对应一个学生的多个元素（多个属性）  【一个map，一个学生】</p><p>二维数组<br>{<br>    {1,zs,23,xa},    -一个HashMap对象<br>    {2,ls,24,bj},<br>    {3,ww,25,tj}<br>}</p><p>resultType<br>resultMap:实体类的属性、数据表的字段： 类型、名字不同时（stuno,id）<br>注意：当属性名 和字段名 不一致时，除了使用resultMap以外，还可以使用resultType+HashMap:</p><p>a.resultMap<br>    <resultmap type="student" id="queryStudentByIdMap"><br>            <!-- 指定类中的属性 和 表中的字段 对应关系 --><br>            <id property="stuNo" column="id"><br>            <result property="stuName" column="name"><br>    </result></id></resultmap></p><p>b.resultType+HashMap<br>select  表的字段名 “类的属性名” from… 来制定字段名 和属性名的对应关系<br>    <select id="queryStudentByIdWithHashMap" parametertype="int" resulttype="student"><br>        select id “stuNo”,name “stuName” from student where id = #{id}<br>    </select></p><p>注意:  如果如果10个字段，但发现 某一个字段结果始终为默认值（0，0.0，null），则可能是 表的字段  和 类的属性名字写错。</p><p>//查询全部<br>String statement = “select stuno,stuname from student”;</p><p>//根据年龄查询学生</p><p>String statement = “select stuno,stuname from student where stuage = #{stuage}”; </p><p>//根据姓名和年龄查询学生</p><p>String statement = “select stuno,stuname from student where stuage = #{stuage} and stuage = #{stuage} “; </p><p>select stuno,stuname from student where  stuname = #{stuName}and  stuage = #{stuAge}</p><p>查询使用了类型转换器 1.如果类中属性和表中字段类型能够合理识别（String-varchar2），则可以使用resultType，(boolean-number)否则使用resultMap；<br>        2.如果类中属性名和表中字段名能够合理识别（stuNo-stuno），则可以使用resultType，（stuno-id）否则使用resultMap；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 别名作为HashMap的Key --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryStudentOutByHashMap"</span> <span class="attr">resultMap</span>=<span class="string">"HashMap"</span>&gt;</span></span><br><span class="line">select stuno "no", stuname "name" from student </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--resultMap  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryStudentById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span></span></span><br><span class="line"><span class="tag"><span class="attr">resultMap</span>=<span class="string">"queryStudentByIdMap"</span>&gt;</span></span><br><span class="line">select id,name from student where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"Student"</span> <span class="attr">id</span>=<span class="string">"queryStudentByIdMap"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 将类中属性和表中字段对应起来 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 分为主键id和非主键 result --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"stuNo"</span> <span class="attr">column</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"stuName"</span> <span class="attr">column</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--resultType  HashMap方式起别名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryStudentByIdWithHashMap"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span></span></span><br><span class="line"><span class="tag"><span class="attr">resultType</span>=<span class="string">"Student"</span>&gt;</span></span><br><span class="line">select id "stuNo",name "stuName" from student where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="动态sql"><a href="#动态sql" class="headerlink" title="动态sql"></a>动态sql</h1><p><strong><a href="https://mybatis.org/mybatis-3/zh/dynamic-sql.html" target="_blank" rel="noopener">官网地址</a></strong></p><h2 id="where"><a href="#where" class="headerlink" title="where"></a>where</h2><p><em>where</em> 元素只会在至少有一个子元素的条件返回 SQL 子句的情况下才去插入“WHERE”子句。而且，若语句的开头为“AND”或“OR”，<em>where</em> 元素也会将它们去除。</p><p>如果 <em>where</em> 元素没有按正常套路出牌，我们可以通过自定义 trim 元素来定制 <em>where</em> 元素的功能。比如，和 <em>where</em> 元素等价的自定义 trim 元素为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"WHERE"</span> <span class="attr">prefixOverrides</span>=<span class="string">"AND |OR "</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- where标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryStudentBySqlTag"</span> <span class="attr">parameterType</span>=<span class="string">"student"</span> <span class="attr">resultType</span>=<span class="string">"student"</span>&gt;</span></span><br><span class="line">    select stuno,stuname,stuage,graname from student</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"stuName != null and stuName !='' "</span>&gt;</span></span><br><span class="line">            and stuName = #&#123;stuName&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"stuAge != null and stuAge !=0 "</span>&gt;</span></span><br><span class="line">            and stuAge = #&#123;stuAge&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>简单类型的数组:<br>无论编写代码时，传递的是什么参数名(stuNos)，在mapper.xml中 必须用array代替该数组</p><p>集合：<br>无论编写代码时，传递的是什么参数名(stuNos)，在mapper.xml中 必须用list代替该数组</p><p>对象数组：<br>Student[] students = {student0,student1,student2}  每个studentx包含一个学号属性<br>注意的几点：<br>    parameterType=”Object[]”<br>         <foreach collection="array" open=" and  stuno in (" close=")" item="student" separator=","><br>                       #{student.stuNo}<br>          </foreach></p><p>SQL片段：<br>    java：方法<br>    数据库：存储过程、存储函数<br>    Mybatis :SQL片段 </p><p>a.提取相似代码<br>b.引用</p><h3 id="if标签"><a href="#if标签" class="headerlink" title="if标签"></a>if标签</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 添加虚拟前缀 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryStudentBySqlTag"</span> <span class="attr">parameterType</span>=<span class="string">"student"</span> <span class="attr">resultType</span>=<span class="string">"student"</span>&gt;</span></span><br><span class="line">select stuno,stuname,stuage,graname from student where 1=1</span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"stuName != null and stuName !='' "</span>&gt;</span></span><br><span class="line">and stuName = #&#123;stuName&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"stuAge != null and stuAge !=0 "</span>&gt;</span></span><br><span class="line">and stuAge = #&#123;stuAge&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="foreach-Tag"><a href="#foreach-Tag" class="headerlink" title="foreach Tag"></a>foreach Tag</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- foreach迭代 使用对象属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryStudentInGrade"</span> <span class="attr">parameterType</span>=<span class="string">"grade"</span></span></span><br><span class="line"><span class="tag"><span class="attr">resultType</span>=<span class="string">"student"</span>&gt;</span></span><br><span class="line">select stuno,stuname,stuage,graname from student</span><br><span class="line"><span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"stuNos != null and stuNos.size &gt; 0"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"stuNos"</span> <span class="attr">open</span>=<span class="string">"and stuno in("</span> <span class="attr">close</span>=<span class="string">")"</span></span></span><br><span class="line"><span class="tag"><span class="attr">item</span>=<span class="string">"stuNo"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">#&#123;stuNo&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- foreach迭代 使用list集合--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryStudentWithList"</span> <span class="attr">parameterType</span>=<span class="string">"list"</span></span></span><br><span class="line"><span class="tag"><span class="attr">resultType</span>=<span class="string">"student"</span>&gt;</span></span><br><span class="line">select stuno,stuname,stuage,graname from student</span><br><span class="line"><span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"list != null and list.size &gt; 0"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">open</span>=<span class="string">"and stuno in("</span> <span class="attr">close</span>=<span class="string">")"</span></span></span><br><span class="line"><span class="tag"><span class="attr">item</span>=<span class="string">"stuNo"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">#&#123;stuNo&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- foreach迭代 使用简单数组--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryStudentWithArray"</span> <span class="attr">parameterType</span>=<span class="string">"int[]"</span></span></span><br><span class="line"><span class="tag"><span class="attr">resultType</span>=<span class="string">"student"</span>&gt;</span></span><br><span class="line">select stuno,stuname,stuage,graname from student</span><br><span class="line"><span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"array != null and array.length &gt; 0"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"array"</span> <span class="attr">open</span>=<span class="string">"and stuno in("</span> <span class="attr">close</span>=<span class="string">")"</span></span></span><br><span class="line"><span class="tag"><span class="attr">item</span>=<span class="string">"stuNo"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">#&#123;stuNo&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- foreach迭代 使用对象数组--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryStudentWithObjectArray"</span> <span class="attr">parameterType</span>=<span class="string">"Object[]"</span></span></span><br><span class="line"><span class="tag"><span class="attr">resultType</span>=<span class="string">"student"</span>&gt;</span></span><br><span class="line">select stuno,stuname,stuage,graname from student</span><br><span class="line"><span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"array != null and array.length &gt; 0"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"array"</span> <span class="attr">open</span>=<span class="string">"and stuno in("</span> <span class="attr">close</span>=<span class="string">")"</span></span></span><br><span class="line"><span class="tag"><span class="attr">item</span>=<span class="string">"stuNo"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">#&#123;stuNo&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">queryStudentWithObjectArray</span><span class="params">(Student[] stuNos)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="sql片段"><a href="#sql片段" class="headerlink" title="sql片段"></a>sql片段</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"ObjectArraySql"</span>&gt;</span></span><br><span class="line">select stuno,stuname,stuage,graname from student</span><br><span class="line"><span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"array != null and array.length &gt; 0"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"array"</span> <span class="attr">open</span>=<span class="string">"and stuno in("</span> <span class="attr">close</span>=<span class="string">")"</span></span></span><br><span class="line"><span class="tag"><span class="attr">item</span>=<span class="string">"student"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">#&#123;student.stuNo&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryStudentWithObjectArray"</span></span></span><br><span class="line"><span class="tag"><span class="attr">parameterType</span>=<span class="string">"Object[]"</span> <span class="attr">resultType</span>=<span class="string">"student"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 同一文件映射文件下可以省略当前namespace：namesapceId --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"pers.nicolas.mapper.StudentMapper.ObjectArraySql"</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h1><h2 id="关联查询："><a href="#关联查询：" class="headerlink" title="关联查询："></a>关联查询：</h2><h2 id="一对一"><a href="#一对一" class="headerlink" title="一对一:"></a>一对一:</h2><p>a.业务扩展类<br>        核心：用resultType指定类(<strong>该类扩展了连接查询的所有属性</strong>)的属性 包含 多表查询的所有字段</p><p>b.resultMap<br>    i.通过 属性成员 将2个类建立起联系 <strong>-&gt;</strong>一对一：association<br>    2.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"student"</span> <span class="attr">id</span>=<span class="string">"student_card_map"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 学生的信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>  <span class="attr">property</span>=<span class="string">"stuNo"</span> <span class="attr">column</span>=<span class="string">"stuNo"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"stuName"</span> <span class="attr">column</span>=<span class="string">"stuName"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"stuAge"</span> <span class="attr">column</span>=<span class="string">"stuAge"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 一对一时，对象成员使用 association映射;javaType指定该属性的类型--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"card"</span> <span class="attr">javaType</span>=<span class="string">"StudentCard"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"cardId"</span> <span class="attr">column</span>=<span class="string">"cardId"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"cardInfo"</span> <span class="attr">column</span>=<span class="string">"cardInfo"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一对一：association<br>一对多：collection</p><h2 id="一对多："><a href="#一对多：" class="headerlink" title="一对多："></a>一对多：</h2><p>表：student studentclass  (关联：classid)<br>类：student studentClass  (关联：List<student> students )</student></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 利用resultMap实现一对多 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryClassAndStudents"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span></span></span><br><span class="line"><span class="tag"><span class="attr">resultMap</span>=<span class="string">"class_student_map"</span>&gt;</span></span><br><span class="line">select s.*,c.* from student s inner join studentclass c</span><br><span class="line">on</span><br><span class="line">s.classid = c.classid where c.classid = #&#123;classId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 类与表一一对应 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"StudentClass"</span> <span class="attr">id</span>=<span class="string">"class_student_map"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"classId"</span> <span class="attr">column</span>=<span class="string">"classId"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"className"</span> <span class="attr">column</span>=<span class="string">"className"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 一对多；属性类型javaType；（集合）属性的元素类型ofType --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"students"</span> <span class="attr">ofType</span>=<span class="string">"Student"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"stuNo"</span> <span class="attr">column</span>=<span class="string">"stuno"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"stuName"</span> <span class="attr">column</span>=<span class="string">"stuname"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"stuAge"</span> <span class="attr">column</span>=<span class="string">"stuAge"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"graName"</span> <span class="attr">column</span>=<span class="string">"graname"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"stuSex"</span> <span class="attr">column</span>=<span class="string">"stusex"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"card"</span> <span class="attr">javaType</span>=<span class="string">"StudentCard"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"cardId"</span> <span class="attr">column</span>=<span class="string">"cardid"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"cardInfo"</span> <span class="attr">column</span>=<span class="string">"cardInfo"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一对多</p><p>（MyBatis:多对一，多对多的本质就是  一对多的变化）</p><h2 id="关联的嵌套-Select-查询"><a href="#关联的嵌套-Select-查询" class="headerlink" title="关联的嵌套 Select 查询"></a>关联的嵌套 Select 查询</h2><p>可以传入多个参数<strong>column=”{prop1=col1,prop2=col2}”</strong></p><p><strong>注意接收属性为Map</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"userSolved"</span> <span class="attr">javaType</span>=<span class="string">"INTEGER"</span></span></span><br><span class="line"><span class="tag"><span class="attr">select</span>=<span class="string">"com.yoj.web.dao.SolutionMapper.querySolved"</span></span></span><br><span class="line"><span class="tag"><span class="attr">column</span>=<span class="string">"&#123;userId = user_id,problemId = problem_id&#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"userSubmitted"</span> <span class="attr">javaType</span>=<span class="string">"INTEGER"</span></span></span><br><span class="line"><span class="tag"><span class="attr">select</span>=<span class="string">"com.yoj.web.dao.SolutionMapper.querySubmitted"</span></span></span><br><span class="line"><span class="tag"><span class="attr">column</span>=<span class="string">"&#123;userId = user_id,problemId = problem_id&#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select</span>(<span class="string">"SELECT solution_id FROM solution WHERE problem_id = #&#123;problemId&#125; and user_id = #&#123;userId&#125; and result = 0 LIMIT 1"</span>)</span><br><span class="line"><span class="function">Integer <span class="title">querySolved</span><span class="params">(Map&lt;String,Object&gt; map)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Select</span>(<span class="string">"SELECT solution_id FROM solution WHERE problem_id = #&#123;problemId&#125; and user_id = #&#123;userId&#125; LIMIT 1"</span>)</span><br><span class="line"><span class="function">Integer <span class="title">querySubmitted</span><span class="params">(Map&lt;String,Object&gt; map)</span></span>;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>column</code></td><td align="left">数据库中的列名，或者是列的别名。一般情况下，这和传递给 <code>resultSet.getString(columnName)</code> 方法的参数一样。 注意：在使用复合主键的时候，你可以使用 <code>column=&quot;{prop1=col1,prop2=col2}&quot;</code> 这样的语法来指定多个传递给嵌套 Select 查询语句的列名。这会使得 <code>prop1</code> 和 <code>prop2</code> 作为参数对象，被设置为对应嵌套 Select 语句的参数。</td></tr><tr><td align="left"><code>select</code></td><td align="left">用于加载复杂类型属性的映射语句的 ID，它会从 column 属性指定的列中检索数据，作为参数传递给目标 select 语句。 具体请参考下面的例子。注意：在使用复合主键的时候，你可以使用 <code>column=&quot;{prop1=col1,prop2=col2}&quot;</code> 这样的语法来指定多个传递给嵌套 Select 查询语句的列名。这会使得 <code>prop1</code> 和 <code>prop2</code> 作为参数对象，被设置为对应嵌套 Select 语句的参数。</td></tr><tr><td align="left"><code>fetchType</code></td><td align="left">可选的。有效值为 <code>lazy</code> 和 <code>eager</code>。 指定属性后，将在映射中忽略全局配置参数 <code>lazyLoadingEnabled</code>，使用属性的值。</td></tr></tbody></table><p>示例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"blogResult"</span> <span class="attr">type</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"author"</span> <span class="attr">column</span>=<span class="string">"author_id"</span> <span class="attr">javaType</span>=<span class="string">"Author"</span> <span class="attr">select</span>=<span class="string">"selectAuthor"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectBlog"</span> <span class="attr">resultMap</span>=<span class="string">"blogResult"</span>&gt;</span></span><br><span class="line">  SELECT * FROM BLOG WHERE ID = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectAuthor"</span> <span class="attr">resultType</span>=<span class="string">"Author"</span>&gt;</span></span><br><span class="line">  SELECT * FROM AUTHOR WHERE ID = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>就是这么简单。我们有两个 select 查询语句：一个用来加载博客（Blog），另外一个用来加载作者（Author），而且博客的结果映射描述了应该使用 <code>selectAuthor</code> 语句加载它的 author 属性。</p><p>其它所有的属性将会被自动加载，只要它们的列名和属性名相匹配。</p><p>这种方式虽然很简单，但在大型数据集或大型数据表上表现不佳。这个问题被称为“N+1 查询问题”。 概括地讲，N+1 查询问题是这样子的：</p><ul><li>你执行了一个单独的 SQL 语句来获取结果的一个列表（就是“+1”）。</li><li>对列表返回的每条记录，你执行一个 select 查询语句来为每条记录加载详细信息（就是“N”）。</li></ul><p>这个问题会导致成百上千的 SQL 语句被执行。有时候，我们不希望产生这样的后果。</p><p>好消息是，MyBatis 能够对这样的查询进行延迟加载，因此可以将大量语句同时运行的开销分散开来。 然而，如果你加载记录列表之后立刻就遍历列表以获取嵌套的数据，就会触发所有的延迟加载查询，性能可能会变得很糟糕。</p><h2 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h2><p>使用#{}，￥{}容易sql注入</p><p>使用concat函数拼接</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getProblemList"</span> <span class="attr">parameterType</span>=<span class="string">"com.yoj.web.bean.Problem"</span> <span class="attr">resultMap</span>=<span class="string">"ProblemList"</span>&gt;</span></span><br><span class="line">  select problem_id,title,#&#123;userId&#125; as user_id from problem</span><br><span class="line">  <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"problemId != null"</span>&gt;</span></span><br><span class="line">          and problem_id LIKE CONCAT('%',#&#123;problemId&#125;,'%')</span><br><span class="line">      <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">          and title LIKE  CONCAT('%',#&#123;title&#125;,'%')</span><br><span class="line">      <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="日志：Log4j"><a href="#日志：Log4j" class="headerlink" title="日志：Log4j"></a>日志：Log4j</h1><p>a.Log4j:    log4j.jar (mybatis.zip中lib中包含此jar)<br>b.开启日志，conf.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 开启日志，并指定使用的具体日志 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"logImpl"</span> <span class="attr">value</span>=<span class="string">"LOG4J"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果不指定，Mybatis就会根据以下顺序 寻找日志<br>SLF4J →Apache Commons Logging →Log4j 2 → Log4j →JDK logging</p><p>c.编写配置日志输出文件</p><p>log4j.properties，内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">log4j.rootLogger=DEBUG, stdout</span><br><span class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%n</span><br></pre></td></tr></table></figure><h3 id="日志级别："><a href="#日志级别：" class="headerlink" title="日志级别："></a>日志级别：</h3><p>​    DEBUG&lt;INFO&lt;WARN&lt;ERROR<br>如果设置为info，则只显示 info及以上级别的信息；<br>建议：在开发时设置debug，在运行时设置为info或以上。</p><p>可以通过日志信息，相信的阅读mybatis执行情况（ 观察mybatis实际执行sql语句 以及SQL中的参数 和返回结果）</p><h1 id="延迟加载（懒加载）："><a href="#延迟加载（懒加载）：" class="headerlink" title="延迟加载（懒加载）："></a>延迟加载（懒加载）：</h1><p>一对一、一对多、多对一、多对多<br>一对多：班级-学生 ，<br>如果不采用延迟加载  （立即加载），查询时会将 一 和多 都查询，班级、班级中的所有学生。<br>如果想要  暂时只查询1的一方，  而多的一方 先不查询 而是在需要的时候再去查询 –&gt;延迟加载</p><p>一对一：学生、学生证</p><h3 id="mybatis中使用延迟加载，需要先配置："><a href="#mybatis中使用延迟加载，需要先配置：" class="headerlink" title="mybatis中使用延迟加载，需要先配置："></a>mybatis中使用延迟加载，需要先配置：</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 开启延迟加载 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadingEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 关闭立即加载 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"aggressiveLazyLoading"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>如果增加了mapper.xml ,要修改conf.xml配置文件（将新增的mapper.xml加载进去）</strong></p><p>通过debug可以发现， 如果程序只需要学生，则只向数据库发送了查询学生的SQL；<br>当我们后续 需要用到学生证的时候，再第二次发送 查询学生证的SQL。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"pers.nicolas.mapper.StudentCardMapper"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 后续通过namespace.Id 定位该SQL语句 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- parameterType：输入参数的类型 resultType：查询结果的返回类型 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  根据cardId查学生证信息--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"qeuryCardById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"studentCard"</span>&gt;</span></span><br><span class="line">select * from studentcard where cardid = #&#123;cardId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 延迟加载 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryStudentWithLazyLoad"</span></span></span><br><span class="line"><span class="tag"><span class="attr">resultMap</span>=<span class="string">"student_card_lazyload_map"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 先查学生 --&gt;</span></span><br><span class="line">select * from student </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"student"</span> <span class="attr">id</span>=<span class="string">"student_card_lazyload_map"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"stuNo"</span> <span class="attr">column</span>=<span class="string">"stuno"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"stuName"</span> <span class="attr">column</span>=<span class="string">"stuname"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"stuAge"</span> <span class="attr">column</span>=<span class="string">"stuAge"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"graName"</span> <span class="attr">column</span>=<span class="string">"graname"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"stuSex"</span> <span class="attr">column</span>=<span class="string">"stusex"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 延迟加载： 在加载学生时，并不立即加载学生证信息 通过调用sql column外键传参 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"card"</span> <span class="attr">javaType</span>=<span class="string">"StudentCard"</span></span></span><br><span class="line"><span class="tag"><span class="attr">select</span>=<span class="string">"pers.nicolas.mapper.StudentCardMapper.qeuryCardById"</span></span></span><br><span class="line"><span class="tag"><span class="attr">column</span>=<span class="string">"cardid"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一对多：和一对一的延迟加载配置方法相同</p><p>延迟加载的步骤：先查班级，按需查询学生<br>1.开启延迟加载conf.xml配置settings<br>2.配置mapper.xml<br>    写2个Mapper:<br>    班级mapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryClassAndStudents"</span>   <span class="attr">resultMap</span>=<span class="string">"class_student_lazyLoad_map"</span>&gt;</span></span><br><span class="line">        select  c.* from studentclass c</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"studentClass"</span> <span class="attr">id</span>=<span class="string">"class_student_lazyLoad_map"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 因为 type的主类是班级，因此先配置班级的信息--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>  <span class="attr">property</span>=<span class="string">"classId"</span> <span class="attr">column</span>=<span class="string">"classId"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span>  <span class="attr">property</span>=<span class="string">"className"</span> <span class="attr">column</span>=<span class="string">"className"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置成员属性学生，一对多;属性类型：javaType，属性的元素类型ofType --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2222222再查班级对应的学生 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"students"</span> <span class="attr">ofType</span>=<span class="string">"student"</span> <span class="attr">select</span>=<span class="string">"org.lanqiao.mapper.StudentMapper.queryStudentsByClassId"</span> <span class="attr">column</span>=<span class="string">"classid"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">​</span><br></pre></td></tr></table></figure><pre><code>&lt;/collection&gt;</code></pre><p>​<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">​</span><br></pre></td></tr></table></figure></p><p>即查询 学生的sql是通过 select属性指定，并且通过column指定外键</p><p>​<figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">学生mapper.xml</span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 一对多,延迟加载需要的： 查询班级中的所有学生 --&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryStudentsByClassId"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"student"</span>&gt;</span></span></span><br><span class="line"><span class="xml">select * from student where classId = #</span><span class="template-variable">&#123;classId&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><h1 id="查询缓存"><a href="#查询缓存" class="headerlink" title="查询缓存"></a>查询缓存</h1><h2 id="一级缓存-："><a href="#一级缓存-：" class="headerlink" title="一级缓存 ："></a>一级缓存 ：</h2><p>同一个SqlSession对象</p><p>​      MyBatis默认开启一级缓存，如果用同样的SqlSession对象查询相同的数据，<br>​    则只会在第一次 查询时 向数据库发送SQL语句，并将查询的结果 放入到</p><p>SQLSESSION中（作为缓存存在）；<br>    后续再次查询该同样的对象时，<br>    则直接从缓存中查询该对象即可（即省略了数据库的访问）    </p><p><img src="/2019/11/java-note/mybatis/mybatis/E:%5Cpictures%5CLanguage%5Cmybatis%5C%E4%B8%80%E7%BA%A7%E7%BC%93%E5%AD%981.png" alt="1561619500501"></p><h2 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h2><p>​    MyBatis默认情况没有开启二级缓存，需要手工打开。<br>​    a.conf.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启二级缓存 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"cacheEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>​    b.在具体的mapper.xml中声明开启(studentMapper.xml中)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"org.lanqiao.mapper.StudentMapper"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 声明次namespace开启二级缓存 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span>/&gt;</span></span><br></pre></td></tr></table></figure><pre><code>根据异常提示：NotSerializableException可知，MyBatis的二级缓存 是将对象 放入硬盘文件中        序列化：内存-&gt;硬盘    反序列化：硬盘-&gt;内存</code></pre><p>准备缓存的对象，必须实现了序列化接口 （如果开启的缓存Namespace=”org.lanqiao.mapper.StudentMapper”），可知序列化对象为Student，因此需要将Student序列化 （序列化Student类，以及Student的级联属性、和父类）</p><p><strong>触发将对象写入二级缓存的时机：SqlSession对象的close()方法。</strong></p><pre><code>Mybatis自带二级缓存：【同一个namespace】生成的mapper对象</code></pre><p>回顾：namespace的值 就是 接口的全类名（包名.类名）， 通过接口可以产生代理对象（studentMapper对象）</p><p>–&gt;namespace决定了studentMapper对象的产生<br>结论：只要产生的xxxMapper对象 来自于同一个namespace，则 这些对象 共享二级缓存。<br>注意：二级缓存 的范围是同一个namespace, 如果有多个xxMapper.xml的namespace值相同，则通过这些xxxMapper.xml产生的xxMapper对象 仍然共享二级缓存。</p><h3 id="禁用-："><a href="#禁用-：" class="headerlink" title="禁用 ："></a>禁用 ：</h3><p>select标签中useCache=”false”</p><h3 id="清理："><a href="#清理：" class="headerlink" title="清理："></a>清理：</h3><p>a.与清理一级缓存的方法相同</p><p><strong>commit();</strong> （一般执行增删改时 会清理掉缓存；设计的原因 是为了防止脏数据）<br>在二级缓存中，commit()不能是查询自身的commit。</p><p><strong>commit会清理一级和二级缓存；但是 清理二级缓存时，不能是查询自身的commit；</strong><br>  b. 在select标签中 增加属性 flushCache=”true”</p><p>命中率：<br>    1:zs :0%<br>    2:    50%<br>    3:   2/3    0.666<br>    4:  3/4     0.75</p><h3 id="三方提供的二级缓存："><a href="#三方提供的二级缓存：" class="headerlink" title="三方提供的二级缓存："></a>三方提供的二级缓存：</h3><p>ehcache、memcache</p><p>要想整合三方提供的二级缓存 （或者自定义二级缓存），必须实现org.apache.ibatis.cache.Cache接口，该接口的默认实现类是PerpetualCache</p><p>整合ehcache二级缓存：<br>a.<br>ehcache-core.jar<br>mybatis-Ehcache.jar<br>slf4j-api.jar</p><p>b.编写ehcache配置文件 Ehcache.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ehcache</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">"../config/ehcache.xsd"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--当二级缓存的对象 超过内存限制时（缓存对象的个数&gt;maxElementsInMemory），存放入的硬盘文件  --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">"E:\Ehcache"</span>/&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment"> maxElementsInMemory:设置 在内存中缓存 对象的个数</span></span><br><span class="line"><span class="comment">    maxElementsOnDisk：设置 在硬盘中缓存 对象的个数</span></span><br><span class="line"><span class="comment">    eternal：设置缓存是否 永远不过期</span></span><br><span class="line"><span class="comment">    overflowToDisk：当内存中缓存的对象个数 超过maxElementsInMemory的时候，是否转移到硬盘中</span></span><br><span class="line"><span class="comment">    timeToIdleSeconds：当2次访问 超过该值的时候，将缓存对象失效 </span></span><br><span class="line"><span class="comment">    timeToLiveSeconds：一个缓存对象 最多存放的时间（生命周期）</span></span><br><span class="line"><span class="comment">    diskExpiryThreadIntervalSeconds：设置每隔多长时间，通过一个线程来清理硬盘中的缓存</span></span><br><span class="line"><span class="comment">    memoryStoreEvictionPolicy：当超过缓存对象的最大值时，处理的策略；LRU，FIFO,LFU</span></span><br><span class="line"><span class="comment">  --&gt;</span>     </span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;<span class="name">defaultCache</span></span></span><br><span class="line"><span class="tag">  <span class="attr">maxElementsInMemory</span>=<span class="string">"1000"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">maxElementsOnDisk</span>=<span class="string">"1000000"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">eternal</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">overflowToDisk</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">timeToIdleSeconds</span>=<span class="string">"100"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">timeToLiveSeconds</span>=<span class="string">"100"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">diskExpiryThreadIntervalSeconds</span>=<span class="string">"120"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">"LRU"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">defaultCache</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br></pre></td></tr></table></figure><p>c.开启EhCache二级缓存</p><p>在xxxMapper.xml中开启</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span>  <span class="attr">type</span>=<span class="string">"org.mybatis.caches.ehcache.EhcacheCache"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 通过property覆盖Ehcache.xml中的值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxElementsInMemory"</span> <span class="attr">value</span>=<span class="string">"2000"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxElementsOnDisk"</span> <span class="attr">value</span>=<span class="string">"3000"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">cache</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="逆向工程"><a href="#逆向工程" class="headerlink" title="逆向工程"></a>逆向工程</h1><p>表、类、接口、mapper.xml四者密切相关，因此 当知道一个的时候  其他三个应该可以自动生成。<br><strong>表-&gt;其他三个</strong></p><p>实现步骤：</p><h2 id="a-导入依赖"><a href="#a-导入依赖" class="headerlink" title="a. 导入依赖"></a>a. 导入依赖</h2><p> mybatis-generator-core.jar、mybatis.jar、ojdbc.jar</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis.generator/mybatis-generator-core --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>b.  逆向工程的配置文件generator.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE generatorConfiguration</span></span><br><span class="line"><span class="meta">  PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span></span><br><span class="line"><span class="meta">  "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"DB2Tables"</span> <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- suppressAllComments属性值： true:自动生成实体类、SQL映射文件时没有注释 false:自动生成实体类、SQL映射文件，并附有注释 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suppressAllComments"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 数据库连接信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">"oracle.jdbc.OracleDriver"</span></span></span><br><span class="line"><span class="tag"><span class="attr">connectionURL</span>=<span class="string">"jdbc:oracle:thin:@127.0.0.1:1521:ORCL"</span> <span class="attr">userId</span>=<span class="string">"scott"</span></span></span><br><span class="line"><span class="tag"><span class="attr">password</span>=<span class="string">"tigger"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- forceBigDecimals属性值： true:把数据表中的DECIMAL和NUMERIC类型， 解析为JAVA代码中的java.math.BigDecimal类型 </span></span><br><span class="line"><span class="comment">false(默认):把数据表中的DECIMAL和NUMERIC类型， 解析为解析为JAVA代码中的Integer类型 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"forceBigDecimals"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- targetProject属性值:实体类的生成位置 targetPackage属性值：实体类所在包的路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">javaModelGenerator</span></span></span><br><span class="line"><span class="tag"><span class="attr">targetPackage</span>=<span class="string">"org.lanqiao.entity"</span> <span class="attr">targetProject</span>=<span class="string">".\src"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- trimStrings属性值： true：对数据库的查询结果进行trim操作 false(默认)：不进行trim操作 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"trimStrings"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- targetProject属性值:SQL映射文件的生成位置 targetPackage属性值：SQL映射文件所在包的路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"org.lanqiao.mapper"</span></span></span><br><span class="line"><span class="tag"><span class="attr">targetProject</span>=<span class="string">".\src"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 生成动态代理的接口 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">"XMLMAPPER"</span></span></span><br><span class="line"><span class="tag"><span class="attr">targetPackage</span>=<span class="string">"org.lanqiao.mapper"</span> <span class="attr">targetProject</span>=<span class="string">".\src"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 指定数据库表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"Student"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"studentCard"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"studentClass"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>c.  执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">File file = <span class="keyword">new</span> File(<span class="string">"src/generator.xml"</span>); <span class="comment">// 配置文件</span></span><br><span class="line">List&lt;String&gt; warnings = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">ConfigurationParser cp = <span class="keyword">new</span> ConfigurationParser(warnings);</span><br><span class="line">Configuration config = cp.parseConfiguration(file);</span><br><span class="line">DefaultShellCallback callback = <span class="keyword">new</span> DefaultShellCallback(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// 逆向工程核心类</span></span><br><span class="line">MyBatisGenerator generator = <span class="keyword">new</span> MyBatisGenerator(config, callback, warnings);</span><br><span class="line">generator.generate(<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.api.MyBatisGenerator;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.config.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.config.xml.ConfigurationParser;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.internal.DefaultShellCallback;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisGeneratorTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">   List&lt;String&gt; warnings = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">   <span class="keyword">boolean</span> overwrite = <span class="keyword">true</span>;</span><br><span class="line">   File configFile = <span class="keyword">new</span> File(<span class="string">"mybatis-generator.xml"</span>);</span><br><span class="line">   ConfigurationParser cp = <span class="keyword">new</span> ConfigurationParser(warnings);</span><br><span class="line">   Configuration config = cp.parseConfiguration(configFile);</span><br><span class="line">   DefaultShellCallback callback = <span class="keyword">new</span> DefaultShellCallback(overwrite);</span><br><span class="line">   MyBatisGenerator myBatisGenerator = <span class="keyword">new</span> MyBatisGenerator(config, callback, warnings);</span><br><span class="line">   myBatisGenerator.generate(<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h1><h2 id="取到最后生成的主键"><a href="#取到最后生成的主键" class="headerlink" title="取到最后生成的主键"></a>取到最后生成的主键</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--取到最后生成的主键--&gt;</span><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertSelective"</span> <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span> <span class="attr">keyColumn</span>=<span class="string">"problem_id"</span> <span class="attr">keyProperty</span>=<span class="string">"problemId"</span>        <span class="attr">parameterType</span>=<span class="string">"com.yoj.web.bean.Problem"</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="用Criteria实现多条件查询"><a href="#用Criteria实现多条件查询" class="headerlink" title="[用Criteria实现多条件查询]"></a>[用<em>Criteria</em>实现多条件查询]</h2><p>(<a href="https://blog.csdn.net/qjlhlh/article/details/6599557" target="_blank" rel="noopener">https://blog.csdn.net/qjlhlh/article/details/6599557</a>)</p><p>逆向工程产生的bean（entity class）的扩展类中的静态内部类。</p><h1 id="mybatis注解版"><a href="#mybatis注解版" class="headerlink" title="mybatis注解版"></a>mybatis注解版</h1><h2 id="插入时返回主键id"><a href="#插入时返回主键id" class="headerlink" title="插入时返回主键id"></a>插入时返回主键id</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="meta">@Insert</span>(<span class="string">"insert into tbl_user (name, age) values (#&#123;name&#125;, #&#123;age&#125;)"</span>)</span><br><span class="line"><span class="meta">@Options</span>(useGeneratedKeys=<span class="keyword">true</span>, keyProperty=<span class="string">"userId"</span>, keyColumn=<span class="string">"id"</span>)</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="调用其他方法"><a href="#调用其他方法" class="headerlink" title="调用其他方法"></a>调用其他方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select</span>(<span class="string">"SELECT * FROM solution ORDER BY solution_id DESC"</span>)</span><br><span class="line"><span class="meta">@Results</span>(&#123;</span><br><span class="line">    <span class="meta">@Result</span>(id = <span class="keyword">true</span>, column = <span class="string">"solution_id"</span>, property = <span class="string">"solutionId"</span>),</span><br><span class="line">    <span class="meta">@Result</span>(column = <span class="string">"problem_id"</span>, property = <span class="string">"problem"</span>, one = <span class="meta">@One</span>(select = <span class="string">"com.yoj.web.dao.ProblemMapper.queryProblemTitleAndIdById"</span>, fetchType = FetchType.EAGER)),</span><br><span class="line">    <span class="meta">@Result</span>(column = <span class="string">"language"</span>, property = <span class="string">"language"</span>),</span><br><span class="line">    <span class="meta">@Result</span>(column = <span class="string">"code"</span>, property = <span class="string">"code"</span>),</span><br><span class="line">    <span class="meta">@Result</span>(column = <span class="string">"result"</span>, property = <span class="string">"result"</span>),</span><br><span class="line">    <span class="meta">@Result</span>(column = <span class="string">"runtime"</span>, property = <span class="string">"runtime"</span>),</span><br><span class="line">    <span class="meta">@Result</span>(column = <span class="string">"memory"</span>, property = <span class="string">"memory"</span>),</span><br><span class="line">    <span class="meta">@Result</span>(column = <span class="string">"error_message"</span>, property = <span class="string">"errorMessage"</span>),</span><br><span class="line">    <span class="meta">@Result</span>(column = <span class="string">"submit_time"</span>, property = <span class="string">"submitTime"</span>),</span><br><span class="line">    <span class="meta">@Result</span>(column = <span class="string">"user_id"</span>, property = <span class="string">"user"</span>, one = <span class="meta">@One</span>(select = <span class="string">"com.yoj.web.dao.UserMapper.getUserById"</span>, fetchType = FetchType.EAGER))</span><br><span class="line">&#125;)</span><br><span class="line"><span class="function">List&lt;Solution&gt; <span class="title">getAllWithUserAndProblemName</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><h1 id="other"><a href="#other" class="headerlink" title="other"></a>other</h1><h3 id="自动映射"><a href="#自动映射" class="headerlink" title="自动映射"></a>自动映射</h3><p>当自动映射查询结果时，MyBatis 会获取结果中返回的列名并在 Java 类中查找相同名字的属性（忽略大小写）。 这意味着如果发现了 <em>ID</em> 列和 <em>id</em> 属性，MyBatis 会将列 <em>ID</em> 的值赋给 <em>id</em> 属性。</p><p>通常数据库列使用大写字母组成的单词命名，单词间用下划线分隔；而 Java 属性一般遵循驼峰命名法约定。为了在这两种命名方式之间启用自动映射，需要将 <code>mapUnderscoreToCamelCase</code> 设置为 true。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;&lt;h1 id=&quot;入门&quot;&gt;&lt;a href=&quot;#入门&quot; class=&quot;headerlink&quot; title=&quot;入门&quot;&gt;&lt;/a&gt;入门&lt;/h1&gt;&lt;h2 id=&quot;mybatis约定：&quot;&gt;&lt;a href=&quot;#mybatis约定：&quot; class=&quot;headerlink&quot; title=&quot;mybatis约定：&quot;&gt;&lt;/a&gt;mybatis约定：&lt;/h2&gt;&lt;p&gt;输入参数parameterType 和 输出参数resultType ，在形式上都只能有一个&lt;/p&gt;&lt;p&gt;如果输入参数 ：是简单类型（8个基本类型+String） 是可以使用任何占位符,#{xxxx}&lt;br&gt;           如果是对象类型，则必须是对象的属性 #{属性名}&lt;/p&gt;&lt;p&gt;输出参数：  如果返回值类型是一个 对象（如Student），则无论返回一个、还是多个，&lt;br&gt;        再resultType都写成org.lanqiao.entity.Student&lt;br&gt;        即 resultType=”org.lanqiao.entity.Student”&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://codeofli.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://codeofli.github.io/tags/java/"/>
    
      <category term="mybatis" scheme="https://codeofli.github.io/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>javaWeb</title>
    <link href="https://codeofli.github.io/2019/11/java-note/javaWeb/javaWeb/"/>
    <id>https://codeofli.github.io/2019/11/java-note/javaWeb/javaWeb/</id>
    <published>2019-11-12T02:39:06.000Z</published>
    <updated>2019-11-12T02:57:37.399Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="web路径"><a href="#web路径" class="headerlink" title="web路径"></a>web路径</h1><p> <strong>web路径：</strong><br>1.不<strong>以/开始的相对路径</strong>，找资源，<strong>以当前资源的路径为基准</strong>，经常容易出问题<br>2.<strong>以/开始的开始的相对路径</strong>，找资源，<strong>以服务器为标准（http//localhost/端口号)需要加项目名</strong>;<br>就是http//localhost/端口号/crud/…</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%</span></span></span><br><span class="line"><span class="tag"><span class="attr">pageContext.setAttribute</span>("<span class="attr">APP_PATH</span>", <span class="attr">request.getContextPath</span>());</span></span><br><span class="line"><span class="tag">%&gt;</span></span><br><span class="line">$&#123;APP_PATH&#125;/static/bootstrap-3.3.7-dist/css/bootstrap.min.css</span><br><span class="line">  --&gt;</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="1JSP-动态网页"><a href="#1JSP-动态网页" class="headerlink" title="1JSP:动态网页"></a>1JSP:动态网页</h1><p>静态、动态：<br>1.不用 和 是否有“动感”混为一谈<br>2.是否 随着 时间、地点、用户操作  的 改变而改变</p><p>动态网页 需要使用到 服务端脚本语言（JSP）</p><p>2架构<br>CS：Client Server<br>CS不足：<br>a.如果 软件升级， 那么全部软件都需要升级<br>b.维护麻烦：需要维护每一台 客户端软件<br>c.每一台客户端 都需要安装 客户端软件</p><p>BS ：Broswer Server<br>客户端可以通过 浏览器  直接访问服务端 </p><p>注意：bs和cs各有优势。</p><h2 id="3-tomcat解压后目录："><a href="#3-tomcat解压后目录：" class="headerlink" title="3.tomcat解压后目录："></a>3.tomcat解压后目录：</h2><p>bin:可执行文件（startup.bat    shutdown.bat）<br>conf:配置文件（server.xml）<br>lib：tomcat依赖的jar文件<br>log:日志文件（记录出错等信息）<br>temp:临时文件<br>webapps：可执行的项目（将我们开发的项目 放入该目录）<br>work:存放由jsp翻译成的java,以及编辑成的class文件(jsp  -&gt;java -&gt;class)</p><p>4.配置tomcat<br>a.配置jdk  (必须配置JAVA_HOME)<br>java_home  classPath  path<br>b.配置catalina_home</p><p>双击bin/startup.bat启动tomacat，<br>常见错误： 可能与其他服务的端口号冲突<br>tomcat端口号默认8080 （此端口号较为常见，容易冲突），建议修改此端口 （8888）</p><p>修改端口号：</p><p>5.访问tomcat<br><a href="http://localhost:8888/" target="_blank" rel="noopener">http://localhost:8888/</a></p><p>常见状态码：<br>200：一切正常<br>300/301: 页面重定向 （跳转）<br>404:资源不存在<br>403：权限不足 （如果访问a目录，但是a目录设置 不可见）<br>500：服务器内部错误（代码有误）<br>其他编码：积累</p><p>jsp：在html中嵌套的java代码 </p><p> 在项目/WEB-INF/web.xml中设置 默认的 初始页面<br>     <welcome-file-list></welcome-file-list></p><pre><code>    &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;&lt;/welcome-file-list&gt;</code></pre><p>6.虚拟路径<br>a.方式一<br>将web项目配置到 webapps以外的目录<br>conf/server.xml中配置<br>host标签中：<br><context docbase="D:\study\JspProject" path="/JspProject"></context></p><p>docBase：实际路径<br>path：虚拟路径  （绝对路径、相对路径【相对于webapps】）<br>重启</p><p>b.方式二<br>D:\study\apache-tomcat-8.5.30\conf\Catalina\localhost<br>中新建   “项目名.xml”中新增一行：<br><context docbase="D:\study\JspProject" path="/JspProject"></context></p><p>7.虚拟主机<br>通过<a href="http://www.test.com访问本机" target="_blank" rel="noopener">www.test.com访问本机</a><br>a. conf/server.xml</p>  <engine name="Catalina" defaulthost="www.test.com"><pre><code>&lt;Host appBase=&quot;D:\study\JspProject&quot; name=&quot;www.test.com&quot;&gt;      &lt;Context docBase=&quot;D:\study\JspProject&quot;   path=&quot;/&quot;/&gt;&lt;/Host&gt;</code></pre><p>b.C:\Windows\System32\drivers\etc\host<br>增加<br>127.0.0.1       <a href="http://www.test.com" target="_blank" rel="noopener">www.test.com</a></p><p>流程：<br><a href="http://www.test.com" target="_blank" rel="noopener">www.test.com</a> -&gt; host找映射关系 -&gt;server.xml找Engine的defaultHost -&gt;通过”/“映射到D:\study\JspProject<br>为了后续学习，将以上恢复成默认</p><p>7.JSP执行流程<br>jsp- java(Servlet文件) -class<br>D:\study\apache-tomcat-8.5.30\work\Catalina\localhost\JspProject\org\apache\jsp</p><h2 id="Jsp-和Servlet-可以相互转换"><a href="#Jsp-和Servlet-可以相互转换" class="headerlink" title="Jsp 和Servlet 可以相互转换"></a>Jsp 和Servlet 可以相互转换</h2><p>因为第一请求服务端 会有翻译 和编译的过程，因此比较慢； 后续访问 可以直接访问class,因此速度较快。但是 如果 服务端修改了代码，则再次访问时  会重新的翻译、编译。</p><h1 id="1-使用Eclipse开发Web项目"><a href="#1-使用Eclipse开发Web项目" class="headerlink" title="1.使用Eclipse开发Web项目"></a>1.使用Eclipse开发Web项目</h1><p>(JSP项目)  tomcat</p><ol start="2"><li>在Eclipse中创建的Web项目：<br>浏览器可以直接访问 WebContent中的文件，<br>例如<a href="http://localhost:8888/MyJspProject/index1.jsp" target="_blank" rel="noopener">http://localhost:8888/MyJspProject/index1.jsp</a><br>其中的index1.jsp就在WebContent目录中；<br>但是WEB-INF中的文件  无法通过客户端（浏览器）直接访问，只能通过请求转发来访问</li></ol><p>注意：并不是 任何的内部跳转都能访问WEB-INF；原因是 跳转有2种方式：请求转发 、重定向</p><p>3.配置tomcat运行时环境<br>    jsp&lt;-&gt;Servlet<br>a.将tomcat/lib中的servlet-api.jar加入项目的构建路径<br>b.右键项目-&gt;Build Path -&gt; Add library -&gt;Server Runtime</p><p>4.部署tomcat<br>在servers面板 新建一个 tomcat实例 ，  再在该实例中 部署项目（右键-add）<br>之后运行</p><p>注意：一般建议 将eclipse中的tomcat与 本地tomcat的配置信息保持一致： 将eclipse中的tomcat设置为托管模式：【第一次】创建tomcat实例之后， 双击，选择Server Location的第二项</p><p>5.统一字符集编码<br>a.编码分类：<br>设置jsp文件的编码（jsp文件中的pageEncoding属性）：  jsp -&gt; java<br>设置浏览器读取jsp文件的编码（jsp文件中content属性）<br>一般将上述设置成 一致的编码，推荐使用UTF-8<br>文本编码：<br>    i.将整个eclipse中的文件 统一设置 （推荐）<br>    ii.设置 某一个项目<br>    iii.设置单独文件</p><p>6.</p><h1 id="JSP的页面元素：-HTML-java代码（脚本Scriptlet）、指令、注释"><a href="#JSP的页面元素：-HTML-java代码（脚本Scriptlet）、指令、注释" class="headerlink" title="JSP的页面元素： HTML  java代码（脚本Scriptlet）、指令、注释"></a>JSP的页面元素： HTML  java代码（脚本Scriptlet）、指令、注释</h1><p>a.脚本Scriptlet<br>    i.<br>        &lt;%<br>                局部变量、java语句<br>        %&gt;</p><pre><code>ii.    &lt;%!            全局变量、定义方法    %&gt;iii.    &lt;%=输出表达式 %&gt;</code></pre><p>一般而言，修改web.xml、配置文件、java  需要重启tomcat服务<br>但是如果修改 Jsp\html\css\js ，不需要重启</p><p>注意，out.println()不能回车； 要想回车：“<br>”，即out.print() &lt;%= %&gt; 可以直接解析html代码</p><p>b.指令<br>page指令</p><p>&lt;%@ page  ….%&gt;<br>page指定的属性：<br>language:jsp页面使用的脚本语言<br>import:导入类<br>pageEncoding:jsp文件自身编码  jsp -&gt;java<br>contentType:浏览器解析jsp的编码<br>&lt;%@ page language=”java” contentType=”text/html; charset=UTF-8”<br>    pageEncoding=”UTF-8”  import=”java.util.Date” %&gt;</p><p>c.注释<br>    html注释<!-- -->  ,可以被客户 通过浏览器查看源码 所观察到<br>    java注释//     /<em>…</em>/<br>    jsp注释&lt;%– –%&gt;</p><h2 id="7-JSP九大内置对象"><a href="#7-JSP九大内置对象" class="headerlink" title="7.JSP九大内置对象"></a>7.JSP九大内置对象</h2><p>（自带的，不需要new 也能使用的对象）</p><p>out：输出对象，向客户端输出内容<br>request：请求对象；存储“客户端向服务端发送的请求信息”<br>request对象的常见方法：<br>String getParameter(String name) :根据请求的字段名key （input标签的name属性值） ，返回字段值value （input标签的value属性值）<br>String[] getParameterValues(String name): 根据请求的字段名key ，返回多个字段值value  （checkbox）<br>void setCharacterEncoding(“编码格式utf-8”) ：设置post方式的请求编码  （tomcat7以前默认iso-8859-1，tomcat8以后改为了utf-8）<br>getRequestDispatcher(“b.jsp”).forward(request,response) ;  ：请求转发 的方式跳转页面   A - &gt; B<br>ServletContext getServerContext():获取项目的ServletContext对象</p><p>示例：<br>注册<br>register.jsp  ，show.jsp</p><p><a href="http://localhost:8888/MyJspProject/show.jsp?uname=aa&amp;upwd=123&amp;uage=22&amp;uhobbies=%E7%AF%AE%E7%90%83" target="_blank" rel="noopener">http://localhost:8888/MyJspProject/show.jsp?uname=aa&amp;upwd=123&amp;uage=22&amp;uhobbies=%E7%AF%AE%E7%90%83</a><br>        连接/文件？参数名1=参数值1 &amp; 参数名2=参数值2 &amp; 参数名1=参数值1 </p><p>get提交方式:  method=”get” 和 地址栏 、超链接(<a href="xx">)请求方式 默认都属于get提交方式</a></p><p>get与post请求方式的区别：<br>a.   get方式 在地址栏显示 请求信息  (但是地址栏能够容纳的 信息有限，4-5KB；如果请求数据存在大文件，图片等  会出现地址栏无法容纳全部的数据而出错) ；post不会显示<br>b.   文件上传操作，必须是post<br>推荐使用post</p><p>8.统一请求的编码 request<br>get方式请求 如果出现乱码，解决：<br>a.统一每一个变量的 编码 （不推荐）<br>    new String(  旧编码，新编码);<br>    name = new String(name.getBytes(“iso-8859-1”),”utf-8”);</p><p>b. 修改server.xml ，一次性的 更改tomcat默认get提交方式的编码 （utf-8）<br>建议 使用tomcat时， 首先在server.xml中 统一get方式的编码.. URIEncoding=”UTF-8”</p><p>tomcat7 (iso-8859-1)</p><p>tomcat8（utf-8）</p><p>post<br>request.setCharacterEncoding(“utf-8”) ;</p><p>1<br>response :响应对象<br>提供的方法：<br>void addCookie( Cookie cookie ); 服务端向客户端增加cookie对象<br>void sendRedirect(String location ) throws IOException; :页面跳转的一种方式（重定向）<br>void setContetType(String type):设置服务端响应的编码（设置服务端的contentType类型）</p><p>示例：登陆<br>login.jsp  -&gt; check.jsp  -&gt;success.jsp</p><pre><code>请求转发            重定向</code></pre><p>地址栏是否改变        不变(check.jsp)        改变(success.jsp)</p><p>是否保留第一次        保留            不保留        –4种范围对象<br>请求时的数据</p><p>请求的次数        1            2</p><p>跳转发生的位置        服务端            客户端发出的第二次跳转</p><p>转发、重定向：</p><p>转发：<br>    张三（客户端）     -&gt;    【 服务窗口 A （服务端 ）    -&gt;  服务窗口B  】</p><p>重定向：<br>    张三（客户端）       -&gt;     服务窗口 A （服务端 ） -&gt;去找B</p><pre><code>张三（客户端）    -&gt;     服务窗口 B （服务端 ） -&gt;结束</code></pre><ol start="2"><li>session(服务端)<br>Cookie（客户端，不是内置对象）:Cookie是由 服务端生成的 ，再发送给客户端保存。<br>相当于 本地缓存的作用： 客户端(hello.mp4,zs/abc)-&gt;服务端(hello.mp4；zs/abc)<br>作用：提高访问服务端的效率，但是安全性较差。</li></ol><p>Cookie：    name=value<br>javax.servlet.http.Cookie<br>public Cookie(String name,String value)<br>String getName()：获取name<br>String getValue():获取value<br>void setMaxAge(int expiry);最大有效期 （秒）</p><p>服务端准备Cookie：<br>    response.addCookie(Cookie cookie)<br>页面跳转（转发，重定向）<br>客户端获取cookie:  request.getCookies();</p><p>a.服务端增加cookie :response对象；客户端获取对象：request对象<br>b.不能直接获取某一个单独对象，只能一次性将 全部的cookie拿到</p><p>通过F12可以发现  除了自己设置的Cookie对象外，还有一个name为 JSESSIONID的cookie</p><p>建议 cookie只保存  英文数字，否则需要进行编码、解码</p><ol start="3"><li>使用Cookie实现  记住用户名  功能</li></ol><p>4.session :会话<br>a.浏览网站：开始-关闭<br>b.购物：  浏览、付款、退出<br>c.电子邮件：浏览、写邮件、退出<br>    开始-结束</p><p>session机制：</p><p>客户端第一次请求服务端时，（jsessionid-sessionid）服务端会产生一个session对象（用于保存该客户的信息）；<br>并且每个session对象 都会有一个唯一的 sessionId( 用于区分其他session);<br>服务端由会 产生一个cookie，并且 该cookie的name=JSESSIONID ,value=服务端sessionId的值；<br>然后 服务端会在 响应客户端的同时 将该cookie发送给客户端，至此 客户端就有了 一个cookie(JSESSIONID)；<br>因此，客户端的cookie就可以和服务端的session一一对应（JSESSIONID - sessionID）</p><p>客户端第二/n次请求服务端时:服务端会先用客户端cookie种的JSESSIONID  去服务端的session中匹配sessionid,如果匹配成功（cookie  jsessionid和sesion sessionid），说明此用户 不是第一次访问,无需登录；</p><p>例子：<br>客户端：            顾客（客户端）<br>服务端: 存包处   -  商场(服务端)</p><p>顾客第一次存包：商场 判断此人是 之前已经存过包（通过你手里是否有钥匙）。<br> 如果是新顾客（没钥匙） ，分配一个钥匙 给该顾客； 钥匙 会和 柜子 一一对应；</p><p> 第二/n次 存包：商场 判断此人是 之前已经存过包（通过你手里是否有钥匙）<br> 如果是老顾客（有钥匙），则不需要分配；该顾客手里的钥匙 会 和柜子 自动一一对应。</p><p>session:<br>a. session存储在服务端<br>b. session是在 同一个用户（客户）请求时 共享<br>c. 实现机制：第一次客户请求时 产生一个sessionid 并复制给 cookie的jsessionid 然后发给客户端。最终 通过session的sessionid-cookie的jsessionid</p><p>session方法：<br>String getId() :获取sessionId<br>boolean isNew() :判断是否是 新用户（第一次访问）<br>void invalidate():使session失效  （退出登录、注销）</p><p>void setAttribute()<br>Object getAttribute();</p><p>void setMaxInactiveInterval(秒) ：设置最大有效 非活动时间<br>int getMaxInactiveInterval():获取最大有效 非活动时间 </p><p>示例：<br>登录</p><p>客户端在第一次请求服务端时，如果服务端发现 此请求没有 JSESSIONID,则会创建一个 name=JSESIONID的cookie  并返回给客户端</p><p>Cookie：<br>a.不是内对对象，要使用必须new<br>b.但是，服务端会 自动生成一个(服务端自动new一个cookie) name=JSESIONID的cookie  并返回给客户端</p><p>cookie和session的区别：<br>        session        cookie<br>保存的位置    服务端        客户端<br>安全性        较安全        较不安全<br>保存的内容    Object        String        </p><p>appliation 全局对象<br>String getContextPath()    虚拟路径<br>String getRealPath(String name): 绝对路径（虚拟路径 相对的绝对路径）</p><h2 id="JSP9大内置对象"><a href="#JSP9大内置对象" class="headerlink" title="JSP9大内置对象"></a>JSP9大内置对象</h2><p>pageContext  JSP页面容器<br>request   请求对象<br>session   会话对象<br>appliation 全局对象</p><p>response  响应对象</p><p>config  配置对象（服务器配置信息）<br>out    输出对象<br>page   当前JSP页面对象（相当于java中的this）<br>exception 异常对象</p><h2 id="四种范围对象（小-gt-大）"><a href="#四种范围对象（小-gt-大）" class="headerlink" title="四种范围对象（小-&gt;大）"></a>四种范围对象（小-&gt;大）</h2><p>pageContext  JSP页面容器   （page对象）； 当前页面有效<br>request   请求对象             同一次请求有效<br>session   会话对象            同一次会话有效<br>appliation 全局对象            全局有效（整个项目有效）</p><p>以上4个对象共有的方法：<br>Object getAttribute(String name):根据属性名，或者属性值<br>void setAttribute(String name,Object obj) :设置属性值（新增，修改）<br>    setAttribute(“a”,”b”) ;//如果a对象之前不存在，则新建一个a对象 ；<br>                 如果a之前已经存在，则将a的值改为b<br>void removeAttribute(String name)：根据属性名，删除对象</p><p>a.<br>pageContext 当前页面有效 (页面跳转后无效)</p><p>b.<br>request   同一次请求有效；其他请求无效 （请求转发后有效；重定向后无效）</p><p>c.<br>session  同一次会话有效  （无论怎么跳转，都有效；关闭/切换浏览器后无效 ； 从 登陆-&gt;退出 之间 全部有效）</p><p>d.<br>application<br>    全局变量；整个项目运行期间 都有效 (切换浏览器 仍然有效)；关闭服务、其他项目 无效</p><p>-&gt;多个项目共享、重启后仍然有效 ：JNDI</p><p>1.以上的4个范围对象，通过 setAttribute()复制，通过getAttribute()取值；<br>2.以上范围对象，尽量使用最小的范围。因为 对象的范围越大，造成的性能损耗越大。</p><h1 id="1-JDBC"><a href="#1-JDBC" class="headerlink" title="1.JDBC"></a>1.JDBC</h1><p>:Java DataBase Connectivity  </p><p>可以为多种关系型数据库DBMS 提供统一的访问方式，用Java来操作数据库<br>2.JDBC API 主要功能：<br>三件事，具体是通过以下类/接口实现：<br>DriverManager ： 管理jdbc驱动<br>Connection： 连接（通过DriverManager产生）</p><p>Statement（PreparedStatement） ：增删改查  （通过Connection产生 ）<br>CallableStatement  ： 调用数据库中的 存储过程/存储函数  （通过Connection产生 ）</p><p>Result ：返回的结果集  （上面的Statement等产生 ）</p><p>Connection产生操作数据库的对象：</p><p>Connection产生Statement对象：createStatement()<br>Connection产生PreparedStatement对象：prepareStatement()<br>Connection产生CallableStatement对象：prepareCall();</p><p>Statement操作数据库：<br>增删改：executeUpdate()<br>查询：executeQuery();</p><p>ResultSet：保存结果集 select * from xxx<br>next():光标下移，判断是否有下一条数据；true/false<br>previous():  true/false<br>getXxx(字段名|位置):获取具体的字段值 </p><p>PreparedStatement操作数据库：<br>public interface PreparedStatement extends Statement<br>因此<br>增删改：executeUpdate()<br>查询：executeQuery();<br>–此外<br>赋值操作 setXxx();</p><p>PreparedStatement与Statement在使用时的区别：<br>1.Statement:<br>sql<br>executeUpdate(sql)</p><p>2.<br>PreparedStatement:<br>sql(可能存在占位符?)<br>在创建PreparedStatement 对象时，将sql预编译 prepareStatement(sql)<br>executeUpdate()<br>setXxx()替换占位符？</p><p>推荐使用PreparedStatement：原因如下：<br>1.编码更加简便（避免了字符串的拼接）<br>String name = “zs” ;<br>int age = 23 ;</p><p>stmt:<br>String sql =” insert into student(stuno,stuname) values(‘“+name+”‘,  “+age+” )    “ ;<br>stmt.executeUpdate(sql);</p><p>pstmt:<br>String sql =” insert into student(stuno,stuname) values(?,?) “ ;<br>pstmt = connection.prepareStatement(sql);//预编译SQL<br>pstmt.setString(1,name);<br>pstmt.setInt(2,age);</p><p>2.提高性能(因为 有预编译操作，预编译只需要执行一次)<br>需要重复增加100条数<br>stmt:<br>String sql =” insert into student(stuno,stuname) values(‘“+name+”‘,  “+age+” )    “ ;<br>for(100)<br>stmt.executeUpdate(sql);</p><p>pstmt:<br>String sql =” insert into student(stuno,stuname) values(?,?) “ ;<br>pstmt = connection.prepareStatement(sql);//预编译SQL<br>pstmt.setString(1,name);<br>pstmt.setInt(2,age);<br>for( 100){<br>pstmt.executeUpdate();<br>}</p><p>3.安全（可以有效防止sql注入）<br>sql注入： 将客户输入的内容  和 开发人员的SQL语句 混为一体</p><p>stmt:存在被sql注入的风险<br>(例如输入  用户名：任意值 ‘ or 1=1 –<br>       密码：任意值)<br>分析：<br>select count(<em>) from login where uname=’任意值 ‘ or 1=1 –’ and upwd =’任意值’  ;<br>select count(</em>) from login where uname=’任意值 ‘ or 1=1 ;<br>select count(*) from login ;</p><p>select count(*) from login where uname=’”+name+”‘ and upwd =’”+pwd+”‘ </p><p>pstmt:有效防止sql注入</p><p>推荐使用pstmt</p><p>3.jdbc访问数据库的具体步骤：<br>a.导入驱动，加载具体的驱动类<br>b.与数据库建立连接<br>c.发送sql，执行<br>d.处理结果集 （查询）</p><p>4.<br>数据库驱动<br>        驱动jar                    具体驱动类                        连接字符串<br>Oracle        ojdbc-x.jar                oracle.jdbc.OracleDriver                jdbc:oracle:thin:@localhost:1521:ORCL<br>MySQL        mysql-connector-java-x.jar        com.mysql.jdbc.Driver                    jdbc:mysql://localhost:3306/数据库实例名<br>SqlServer    sqljdbc-x.jar                com.microsoft.sqlserver.jdbc.SQLServerDriver        jdbc:microsoft:sqlserver:localhost:1433;databasename=数据库实例名</p><p>使用jdbc操作数据库时，如果对数据库进行了更换，只需要替换：驱动、具体驱动类、连接字符串、用户名、密码</p><h2 id="1-jdbc总结（模板、八股文）："><a href="#1-jdbc总结（模板、八股文）：" class="headerlink" title="1.jdbc总结（模板、八股文）："></a>1.jdbc总结（模板、八股文）：</h2><p>try{<br>a.导入驱动包、加载具体驱动类Class.forName(“具体驱动类”);<br>b.与数据库建立连接connection = DriverManager.getConnection(…);<br>c.通过connection，获取操作数据库的对象（Statement\preparedStatement\callablestatement）<br>stmt = connection.createStatement();<br>d.(查询)处理结果集rs = pstmt.executeQuery()<br>while(rs.next()){ rs.getXxx(..) ;}<br>}catch(ClassNotFoundException e  )<br>{ …}<br>catch(SQLException e)<br>{…<br>}<br>catch(Exception e)<br>{…<br>}<br>finally<br>{<br>    //打开顺序，与关闭顺序相反<br>    if(rs!=null)rs.close()<br>    if(stmt!=null) stmt.close();<br>    if(connection!=null)connection.close();<br>}</p><p>–jdbc中，除了Class.forName() 抛出ClassNotFoundException，其余方法全部抛SQLException</p><p>2.CallableStatement:调用 存储过程、存储函数<br>connection.prepareCall(参数：存储过程或存储函数名)<br>参数格式：<br>存储过程（无返回值return，用out参数替代）：<br>    { call  存储过程名(参数列表) }<br>存储函数（有返回值return）：<br>    { ? = call  存储函数名(参数列表) }</p><p>create or replace procedure addTwoNum ( num1  in number,num2  in number,result out number )  – 1 + 2 -&gt;3<br>as<br>begin<br>    result := num1+num2 ;<br>end ;<br>/</p><p>强调：<br>如果通过sqlplus 访问数据库，只需要开启：OracleServiceSID<br>通过其他程序访问数据（sqldevelop、navicate、JDBC），需要开启：OracleServiceSID、XxxListener</p><p>JDBC调用存储过程的步骤：<br>a.产生 调用存储过程的对象（CallableStatement） cstmt =     connection.prepareCall(   “…” ) ;<br>b.通过setXxx()处理 输出参数值 cstmt.setInt(1, 30);<br>c.通过 registerOutParameter(…)处理输出参数类型<br>d.cstmt.execute()执行<br>e.接受 输出值（返回值）getXxx()</p><p>调存储函数：<br>create or replace function addTwoNumfunction ( num1  in number,num2  in number)  – 1 + 2<br>return number<br>as<br>    result number ;<br>begin<br>    result := num1+num2 ;<br>    return result ;<br>end ;<br>/<br>JDBC调用存储函数：与调存储过程的区别：<br>在调用时，注意参数：”{? =  call addTwoNumfunction    (?,?) }”</p><p>3.处理CLOB/BLOB类型<br>处理稍大型数据：</p><p>a.存储路径    E:\JDK_API_zh_CN.CHM<br>    通过JDBC存储文件路径，然后 根据IO操作处理<br>    例如：JDBC将 E:\JDK_API_zh_CN.CHM 文件 以字符串形式“E:\JDK_API_zh_CN.CHM”存储到数据库中<br>        获取：1.获取该路径“E:\JDK_API_zh_CN.CHM”  2.IO    </p><p>b.<br>    CLOB：大文本数据 （小说-&gt;数据）<br>    BLOB：二进制</p><p>clob:大文本数据   字符流 Reader Writer<br>存<br>1.先通过pstmt 的? 代替小说内容 （占位符）<br>2.再通过pstmt.setCharacterStream(2, reader,  (int)file.length());  将上一步的？替换为 小说流， 注意第三个参数需要是 Int类型</p><p>取：<br>1.通过Reader reader = rs.getCharacterStream(“NOVEL”) ; 将cloc类型的数据  保存到Reader对象中<br>2. 将Reader通过Writer输出即可。</p><p>blob:二进制  字节流 InputStream OutputStream<br>与CLOB步骤基本一致，区别：setBinaryStream(…)  getBinaryStream(…)   </p><p>4.JSP访问数据库</p><p>JSP就是在html中嵌套的java代码，因此 java代码可以写在jsp中（&lt;%  … %&gt;）</p><p>导包操作：java项目 ：1 Jar复制到工程中 2.右键该Jar :build path -&gt;add to build Path<br>      Web项目：jar复制到WEB-INF/lib</p><p>核心：就是将 java中的JDBC代码，复制到 JSP中的&lt;% … %&gt;</p><p>注意：如果jsp出现错误：The import Xxx cannot be resolved</p><p>尝试解决步骤：<br>    a.(可能是Jdk、tomcat版本问题) 右键项目-&gt;build path，将其中 报错的 libary或Lib 删除后 重新导入<br>    b.清空各种缓存：右键项目-&gt;Clean tomcat… clean  （Project -clean或者 进tomcat目录 删除里面work的子目录）<br>    c.删除之前的tomcat，重新解压缩、配置tomcat，重启计算机<br>    d.如果类之前没有包，则将该类加入包中</p><p>5.JavaBean<br>刚才我们将 jsp中 登录操作的代码  转移到了LoginDao.java；其中LoginDao类 就称之为JavaBean。<br>JavaBean的作用：a.减轻的jsp复杂度  b.提高代码复用（以后任何地方的 登录操作，都可以通过调用LoginDao实现）</p><p>JavaBean（就是一个Java类）的定义：满足一下2点 ，就可以称为JavaBean<br>    a.public 修饰的类  ,public 无参构造<br>    b.所有属性(如果有) 都是private，并且提供set/get   (如果boolean 则get 可以替换成is)</p><p>使用层面，Java分为2大类：<br>a.封装业务逻辑的JavaBean (LoginDao.java封装了登录逻辑)            逻辑<br>    可以将jsp中的JDBC代码，封装到Login.java类中 （Login.java）</p><p>b.封装数据的JavaBean   （实体类，Student.java  Person.java  ）        数据<br>    对应于数据库中的一张表<br>    Login login = new Login(uname,upwd) ;//即用Login对象 封装了2个数据（用户名 和密码）</p><p>封装数据的JavaBean 对应于数据库中的一张表   (Login(name,pwd))<br>封装业务逻辑的JavaBean 用于操作 一个封装数据的JavaBean  </p><p>可以发现，JavaBean可以简化 代码(jsp-&gt;jsp+java)、提供代码复用(LoginDao.java)</p><p>public  void sleep(String name,String place, int time)<br>{</p><p>}</p><p>public  void sleep(Person per)<br>{<br>    per.getName()<br>    per.getPlace()<br>    …<br>}</p><h1 id="MVC设计模式："><a href="#MVC设计模式：" class="headerlink" title="MVC设计模式："></a>MVC设计模式：</h1><p>M：Model    ，模型  ：一个功能。用JavaBean实现。</p><p>V:View，视图： 用于展示、以及与用户交互。使用html  js  css jsp jquery等前端技术实现</p><p>C:Controller，控制器 ：接受请求，将请求跳转到模型进行处理；模型处理完毕后，再将处理的结果<br>            返回给 请求处 。 可以用jsp实现，  但是一般建议使用 Servlet实现控制器。</p><p>Jsp-&gt;Java(Servlet)-&gt;JSP</p><p>Servlet：<br>Java类必须符合一定的 规范：<br>    a.必须继承  javax.servlet.http.HttpServlet<br>    b.重写其中的 doGet()或doPost()方法</p><p> doGet()： 接受 并处 所有get提交方式的请求<br> doPost()：接受 并处 所有post提交方式的请求</p><p>Servlet要想使用，必须配置<br>Serlvet2.5：web.xml<br>Servle3.0： @WebServlet</p><p>Serlvet2.5：web.xml:</p><p>项目的根目录：WebContent 、src</p><p><a href="WelcomeServlet">所在的jsp是在 WebContent目录中，因此 发出的请求WelcomeServlet  是去请求项目的根目录。</a></p><p>Servlet流程：<br>请求 -&gt;<url-pattern> -&gt; 根据<servlet-mapping>中的<servlet-name> 去匹配  <servlet> 中的<servlet-name>，然后寻找到<servlet-class>，求中将请求交由该<servlet-class>执行。</servlet-class></servlet-class></servlet-name></servlet></servlet-name></servlet-mapping></url-pattern></p><p>2个/:<br>jsp:/  localhost:8888<br>web.xml: /   http://localhost:8888/项目名/</p><h1 id="1-回顾纯手工方法创建第一个Servlet"><a href="#1-回顾纯手工方法创建第一个Servlet" class="headerlink" title="1.回顾纯手工方法创建第一个Servlet"></a>1.回顾纯手工方法创建第一个Servlet</h1><p>步骤：<br>编写一个类，继承HttpServlet<br>重写doGet()、doPost()方法<br>编写web.xml 中的servlet映射关系</p><p>2.借助于Eclipse快速生成Servlet<br>直接新建Servlet即可！（继承、重写、web.xml  可以借助Eclipse自动生成）</p><p>Servlet3.0，与Servlet2.5的区别：<br>Servlet3.0不需要在web.xml中配置，但 需要在 Servlet类的定义处之上编写 注解@WebServlet(“url-pattern的值”)<br>匹配流程：  请求地址 与@WebServlet中的值 进行匹配，如果匹配成功 ，则说明 请求的就是该注解所对应的类</p><ol start="3"><li>项目根目录：WebContent、src（所有的构建路径）<br>例如：<br>WebContent中有一个文件index.jsp<br>src中有一个Servlet.java  </li></ol><p>如果: index.jsp中请求 <a href="abc">…</a> ，则 寻找范围：既会在src根目录中找  也会在WebContent根目录中找</p><p>如果：index.jsp中请求<a href="a/abc"></a>，寻找范围：先在src或WebContent中找a目录，然后再在a目录中找abc</p><p>web.xml中的 /:代表项目根路径<br><a href="http://localhost:8888/Servlet25Project/" target="_blank" rel="noopener">http://localhost:8888/Servlet25Project/</a><br>jsp中的/: 服务器根路径<br><a href="http://localhost:8888/" target="_blank" rel="noopener">http://localhost:8888/</a></p><p>构建路径、WebContent:根目录</p><p>4.Servlet生命周期：5个阶段<br>加载<br>初始化： init()  ，该方法会在 Servlet被加载并实例化的以后 执行<br>服务  ：service() -&gt;doGet()  doPost<br>销毁  ：destroy()，  Servlet被系统回收时执行<br>卸载</p><p>init():<br>    a.默认第一次访问 Servlet时会被执行 （只执行这一次）<br>    b.可以修改为 Tomcat启动时自动执行<br>        i.Servlet2.5：  web.xml<br>              <servlet><br>                …<br>                   <load-on-startup>1</load-on-startup><br>                </servlet><br>            其中的“1”代表第一个。<br>        ii.Servlet3.0<br>            @WebServlet( value=”/WelcomeServlet” ,loadOnStartup=1  )</p><p>service() -&gt;doGet()  doPost ：调用几次，则执行几次<br>destroy()：关闭tomcat服务时，执行一次。</p><p>5 Servlet API ： 由两个软件包组成： 对应于HTTP协议的软件包、对应于除了HTTP协议以外的其他软件包<br>即Servlet  API可以适用于 任何 通信协议。<br>我们学习的Servlet,是位于javax.servlet.http包中的类和接口，是基础HTTP协议。</p><p>6.Servlet继承关系</p><p>ServletConfig:接口<br>ServletContext getServletContext():获取Servlet上下文对象   application<br>String  getInitParameter(String name):在当前Servlet范围内，获取名为name的参数值（初始化参数）</p><p>a.ServletContext中的常见方法(application)：<br>getContextPath():相对路径<br>getRealPath()：绝对路径<br>setAttribute() 、getAttribute()<br>—&gt;<br>String getInitParameter(String name);在当前Web容器范围内，获取名为name的参数值（初始化参数）</p><p>Servlet3.0方式 给当前Servlet设置初始值：<br>@WebServlet( …. , initParams= {@WebInitParam(name=”serveltparaname30”,value=”servletparavalue30”)   }   )<br>注意，此注解只 隶属于某一个具体的Servlet ，因此无法为 整个web容器设置初始化参数 （如果要通过3.0方式设置 web容器的初始化参数，仍然需要在web.xml中设置）</p><p>HttpServletRequest中的方法：(同request)，例如setAttrite()、getCookies()、getMethod()<br>HttpServletResponse中的方法：同response</p><p>Servlet使用层面：</p><p>Eclipse中在src创建一个Servlet，然后重写doGet()  doPost()就可以  （doGet() doPost()只需要编写一个）。</p><h1 id="三层优化"><a href="#三层优化" class="headerlink" title="三层优化"></a>三层优化</h1><p>1.加入接口<br>    建议面向接口开发：先接口-再实现类<br>    –service、dao加入接口<br>    –接口与实现类的命名规范<br>        接口：interface，    起名   I实体类Service        IStudentService<br>                        IStudentDao<br>        实现类：implements    起名   实体类ServiceImpl        StudentServiceImpl<br>                        StudentDaoImpl<br>        接口：    I实体类层所在包名    IStudentService、IStudentDao<br>            接口所在的包：  xxx.service        xx.dao</p><pre><code>    实现类：     实体类层所在包名Impl    StudentServiceImpl、StudentDaoImpl        实现类所在的包：xxx.service.impl        xx.dao.impl以后使用接口/实现类时，推荐写法：接口 x = new 实现类();IStudentDao studentDao = new StudentDaoImpl();</code></pre><p>2.DBUtil 通用的数据库帮助类，可以简化Dao层的代码量</p><p>帮助类 一般建议写在  xxx.util包</p><p>A<br>{</p><pre><code>a(){    B.connection}</code></pre><p>}</p><p>B<br>{<br>    static Connection connection =..<br>    b{</p><pre><code>}</code></pre><p>}</p><p>方法重构：  将多个方法 的共同代码 提炼出来，单独写在一个方法中，然后引入该方法即可<br>a()<br>{<br>    ..<br>    c();<br>    ..</p><p>}</p><p>b()<br>{<br>    ..<br>    c();<br>    ..<br>}</p><p>c()<br>{<br>        [..<br>    ..<br>    …<br>    ..]<br>}</p><p>Web调试：<br>与java代码的调试 区别：启动方式不同</p><p>index.jsp -&gt;index_jsp.java -&gt;index_jsp.class </p><p>jsp-&gt;java-&gt;class<br>jsp翻译成的Java 以及编译后的class文件 存在于tomcat中的work目录中</p><p>10000</p><h1 id="分页：5变量（属性）"><a href="#分页：5变量（属性）" class="headerlink" title="分页：5变量（属性）"></a>分页：5变量（属性）</h1><p>1.数据总数 （select count(*) from xxx ，          查数据库）<br>2.页面大小（页面容量，每页显示的数据条数）    （用户自定义）<br>3.总页数                       （自动计算）<br>    800:10= 80页<br>    总页数= 数据总数 /页面大小</p><pre><code>802:10=  800/10 +1 ；总页数= 数据总数 /页面大小 + 1;--&gt;通式总页数= 数据总数 % 页面大小==0 ?数据总数 /页面大小:数据总数 /页面大小 + 1;</code></pre><p>注意：自动计算的时机：当 数据总数 和 页面大小都被赋值以后，自动计算总页数。</p><p>4.当前页码                    （用户自定义）</p><p>5.实体类对象集合（当前页的数据集合）：依赖于数据库     (查数据库)<br>    假设： 每页显示10条（页面大小=10）</p><p>select * from student where id&gt;=起始 and id&lt;=终止;</p><p>页数          起止            起止等价写法<br>1        1-10            (页数-1)<em>10+1-页数</em>10<br>2        11-20<br>3        21-30</p><p>某一页的数据 起止：</p><pre><code>(页数-1)*10+1-页数*10</code></pre><p>select * from student where sno&gt;=(页数-1)<em>10+1 and sno&lt;=页数</em>10;<br>此种分页SQL 严格依赖sno的数据，  一旦sno出现了间隙（裂缝），则无法满足每页10条</p><p>-&gt;将此SQL 转换： 1.有rownum  2不能有rownum&gt;xx<br>转换的核心：  将rownum从伪列 转换为 一个 临时表的 普通列。</p><p>select <em>from<br>(<br>    select rownum r,t.*from<br>    (select s.</em> from student s order by sno asc) t   </p><p>) where r&gt;=(页数-1)<em>10+1 and r&lt;=页数</em>10;            </p><p>优化：</p><p>select <em>from (<br>    select rownum r,t.*from<br>    (select s.</em> from student s order by sno asc) t<br>    where      rownum&lt;=页数*页面大小            </p><p>) where  r&gt;=(页数-1)*页面大小+1     ;                </p><p>​        </p><p>dao和DBUtil的区别：<br>dao 是处理特定 类的 数据库操作类：<br>DBUtil是通用  数据库操作类</p><p>1分页<br>要实现分页，必须知道  某一页的 数据 从哪里开始 到哪里结束</p><p>页面大小：每页显示的数据量</p><p>假设每页显示10条数据</p><p>mysql分页：<br>mysql:从0开始计数<br>0        0        9<br>1        10        19<br>2        20        29<br>n        n<em>10          (n+1)</em>10-1</p><p>结论：<br>分页：<br>    第n页的数据：  第(n-1)<em>10+1条  – 第n</em>10条</p><p>MYSQL实现分页的sql：<br>limit  开始,多少条<br>第0页<br>select * from student limit 0,10 ;<br>第1页<br>select * from student limit 10,10 ;<br>第2页<br>select * from student limit  20,10 ;<br>第n页<br>select * from student limit n*10,10</p><p>mysql的分页语句：</p><p>select * from student limit 页数*页面大小,页面大小</p><p>b.oracle分页：</p><p>sqlserver/oracle:从1开始计数<br>第n页        开始        结束<br>1        1        10<br>2        11        20<br>3        21        30<br>n        (n-1)<em>10+1    n</em>10</p><p>select <em>from student  where sno &gt;=(n-1)</em>10+1 and sno &lt;=n*10 ;  –此种写法的前提：必须是Id连续 ，否则 无法满足每页显示10条数据</p><p>select rownum,t.<em>from student t where rownum &gt;=(n-1)</em>10+1 and rownum &lt;=n*10  order by sno;<br>–1.如果根据sno排序则rownum会混乱（解决方案：分开使用-&gt;先只排序，再只查询rownum） 2.rownum不能查询&gt;的数据 </p><p>select s.* from student s order by sno asc;</p><p>select rownum, t.* from<br>(select s.* from student s order by sno asc) t<br>where rownum &gt;=(n-1)<em>10+1 and rownum &lt;=n</em>10 ; ;</p><p>//ORACLE\sqlserver都是从1开始计数：  (n-1)<em>10+1    —  n*10<br>oracle的分页查询语句：<br>select *from<br>(<br>    select rownum r, t.</em> from<br>    (select s.* from student s order by sno asc) t         10000<br>)<br>where r&gt;=(n-1)<em>10+1 and &lt;=n</em>10  ;                10</p><p>优化：</p><p>select <em>from<br>(<br>    select rownum r, t.</em> from<br>    (select s.* from student s order by sno asc) t<br>    where rownum&lt;=n<em>10<br>)<br>where r&gt;=(n-1)</em>10+1  ;    </p><p>select <em>from<br>(<br>    select rownum r, t.</em> from<br>    (select s.* from student s order by sno asc) t<br>    where  rownum&lt;=页数<em>页面大小<br>)<br>where r&gt;=(页数-1)</em>页面大小+1  ;    </p><p>SQLServer分页：  3种分页sql<br>row_number()    over(字段) ;</p><p>sqlserver2003:top  –此种分页SQL存在弊端（如果id值不连续，则不能保证每页数据量相等）<br>select top 页面大小 * from student where id not in<br>( select top (页数-1)*页面大小 id from student  order by sno asc )</p><p>sqlserver2005之后支持：<br>select <em>from<br>(<br>    select row_number()  over (sno order by sno asc) as r,</em> from student</p><pre><code>where r&lt;=n*10 </code></pre><p>)<br>where r&gt;=(n-1)*10+1 and  ;    </p><p>SQLServer此种分页sql与oralce分页sql的区别： 1.rownum  ，row_number()    2.oracle需要排序（为了排序，单独写了一个子查询），但是在sqlserver 中可以省略该排序的子查询  因为sqlserver中可以通过over直接排序</p><p>sqlserver2012之后支持：<br>offset fetch next only</p><p>select * from student  oreder by sno<br>offset (页数-1)*页面大小+1  rows fetch next 页面大小  rows only ;</p><p>(n-1)<em>10+1    —  n</em>10 </p><p>mysql从0开始计数，Oracle/sqlserver 从1开始计数</p><p>1<br>2<br>3<br>4<br>6<br>8<br>9<br>10</p><p>11<br>12<br>…<br>20</p><p>21<br>22<br>..<br>31</p><p>分页实现：<br>5个变量（属性）<br>1.数据总数    100    103                    （查数据库,select count(*)..）<br>2.页面大小（每页显示的数据条数）20                  (用户自定义)<br>3.总页数                              （程序自动计算）<br>    总页数 = 100/20  =数据总数/页面大小<br>    总页数 = 103/20 = 数据总数/页面大小+1<br>    —&gt;<br>    总页数 = 数据总数%页面大小==0? 数据总数/页面大小:数据总数/页面大小+1 ;</p><p>4.当前页（页码）                              （用户自定义）<br>5.当前页的对象集合（实体类集合）：每页所显示的所有数据 （10个人信息）<br>List<student>                               (查数据库,分页sql)    </student></p><p>2表单重复提交</p><h1 id="1-上传文件"><a href="#1-上传文件" class="headerlink" title="1.上传文件"></a>1.上传文件</h1><p>a.引入2个jar<br>   apache: commons-fileupload.jar组件<br>    commons-fileupload.jar依赖 commons-io.jar</p><p>b.<br>代码：<br>前台jsp：<br>    <input type="file" name="spicture"><br>    表单提交方式必须为post<br>    在表单中必须增加一个属性 entype=”multipart/form-data”</p><p>后台servlet：</p><p>注意的问题：<br>    上传的目录  upload ：<br>    1.如果修改代码，则在tomcat重新启动时 会被删除<br>        原因：当修改代码的时候,tomcat会重新编译一份class 并且重新部署（重新创建各种目录）</p><pre><code>2.如果不修改代码，则不会删除    原因： 没有修改代码，class仍然是之前的class</code></pre><p>因此，为了防止 上传目录丢失： a.虚拟路径    b.直接更换上传目录 到非tomcat目录</p><p>限制上传：<br>    类型、<br>    大小<br>    注意 对文件的限制条件 写再parseRequest之前</p><p>2.下载：不需要依赖任何jar<br>    a.请求（地址a  form），请求Servlet<br>    b.Servlet通过文件的地址  将文件转为输入流 读到Servlet中<br>    c.通过输出流 将 刚才已经转为输入流的文件  输出给用户<br>注意：下载文件 需要设置2个 响应头：<br>response.addHeader(“content-Type”,”application/octet-stream” );//MIME类型:二进制文件（任意文件）<br>response.addHeader(“content-Disposition”,”attachement;filename=”+fileName );//fileName包含了文件后缀：abc.txt<br>        1.下载时 ，文件名乱码问题：<br>edge：</p><p>URLEncoder.encode(fileName,”UTF-8”) </p><p>firefox：<br>给文件名 加：<br>前缀   =?UTF-8?B?</p><p>String构造方法<br>Base64.encode<br>后缀   ?=<br>示例：<br>    response.addHeader(“content-Disposition”,”attachment;filename==?UTF-8?B?”+   new String(  Base64.encodeBase64(fileName.getBytes(“UTF-8”))  ) +”?=” );//fileName包含了文件后缀：abc.txt</p><p>2</p><h1 id="EL-："><a href="#EL-：" class="headerlink" title="EL ："></a>EL ：</h1><p>为了消除jsp中的Java代码</p><p>语法：<br>${EL表达式}<br>a.EL不需要导包<br>b.在el中调用属性，其实是调用的getXxx()方法</p><p>${范围.对象.属性.属性的属性 }</p><p>操作符：操作：属性，不是对象<br>. : 使用方便<br>[] : 如果是常量属性，需要使用双引号/单引号 引起来;比点操作符更加强大</p><p>[]强大之处：<br>a.可以容纳一些 特殊符号 （.  ?   -）<br>b.[]可以容纳 变量属性 （可以动态赋值）<br>String x = “a”;<br>${requestScope.a}等价于${requestScope[“a”]}等价于${${requestScope[x]}</p><p>c.可以处理数组<br>${requestScope.arr[0] }</p><p>普通对象、map中的变量</p><p>通过EL获取JSP  九大内置对象</p><p>${pageContext }<br>${pageContext.request }<br>${pageContext.sessoin }</p><h1 id="JSTL：比EL更加强大"><a href="#JSTL：比EL更加强大" class="headerlink" title="JSTL：比EL更加强大"></a>JSTL：比EL更加强大</h1><p>需要引入2个jar ：jstl.jar   standard.jar<br>引入tablib  :<br>&lt;%@ taglib uri=”<a href="http://java.sun.com/jsp/jstl/core&quot;" target="_blank" rel="noopener">http://java.sun.com/jsp/jstl/core&quot;</a> prefix=”c” %&gt;<br>其中prefix=”c” :前缀</p><p>核心标签库：  通用标签库、条件标签库  迭代标签库</p><p>a.通用标签库<br>&lt;c:set&gt;赋值<br>i:<br>在某个作用域之中（4个范围对象），给某个变量赋值<br>    &lt;%–<br>        request.setAttribute(“name”, “zhangsan”) ;<br>    –%&gt;<br>        &lt;c:set var=”name”    value=”zhangsan”   scope=”request”/&gt;<br>        ${requestScope.name }</p><p>&lt;c:set var=”变量名”    value=”变量值”   scope=”4个范围对象的作用域”/&gt;</p><p>ii:<br>给普通对象赋值<br>在某个作用域之中（4个范围对象），给某个对象的属性复制 （此种写法，不能指定scope属性）</p><pre><code>&lt;c:set target=&quot;${requestScope.student}&quot; property=&quot;sname&quot;  value=&quot;zxs&quot; /&gt;</code></pre><p>给map对象赋值<br>        &lt;c:set target=”${requestScope.countries}” property=”cn”  value=”中国” /&gt;</p><p>&lt;c:set target=”对象” property=”对象的属性”  value=”赋值” /&gt;</p><p>注意 &lt;c:set&gt;可以给不存在的变量赋值 （但不能给不存在的对象赋值）</p><p>&lt;c:out&gt;  ：显示<br>true:&lt;c:out value=’<a href="https://www.baidu.com" target="_blank" rel="noopener">百度</a>‘ default=”当value为空的，显示的默认值” escapeXml=”true” /&gt;<br>false：    &lt;c:out value=’<a href="https://www.baidu.com" target="_blank" rel="noopener">百度</a>‘ escapeXml=”false” /&gt;</p><p>&lt;c:remove &gt;：删除属性<br>&lt;c:remove var=”a” scope=”request”/&gt;</p><p>选择：<br>if(boolean)<br>单重选择<br>&lt;c:if test=”” &gt;</p><p>if else if… esle if… else  /switch</p><p>&lt;c:choose&gt;<br>    &lt;c:when test=”…”&gt;   <br>    &lt;c:when test=”…”&gt;   <br>    &lt;c:when test=”…”&gt;   <br>    &lt;c:otherwise&gt;   <br></p><p>在使用 test=”” 一定要注意后面是否有空格<br>例如：test=”${10&gt;2 }”   true<br>     test=”${10&gt;2 } “  非true</p><p>循环（迭代标签库）<br>for(int i=0;i&lt;5;i++)<br>    &lt;c:forEach  var=”name” items=”${requestScope.names }” &gt;<br>        -${name }-<br>        </p><p><strong>可以在foreach便签中items属性作用域（requestScope）中保存的对象</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--for(String str:names)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">c:forEach</span>  <span class="attr">var</span>=<span class="string">"student"</span> <span class="attr">items</span>=<span class="string">"$&#123;requestScope.students &#125;"</span> &gt;</span></span><br><span class="line">$&#123;student.sname &#125;-$&#123;student.sno &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="过滤器："><a href="#过滤器：" class="headerlink" title="过滤器："></a>过滤器：</h1><p>实现一个Filter接口<br>init()、destroy() 原理、执行时机 同Servlet<br>配置过滤器，类似servlet<br>通过doFilter()处理拦截，并且通过chain.doFilter(request, response);放行</p><p>filter映射</p><p>只拦截 访问MyServlet的请求<br>    <url-pattern>/MyServlet</url-pattern><br>拦截一切请求（每一次访问 都会被拦截）<br><url-pattern>/*</url-pattern></p><p>通配符</p><p>dispatcher请求方式：<br>REQUEST：拦截HTTP请求 get post<br>FORWARD：只拦截 通过 请求转发方式的请求</p><p>INCLUDE:只拦截拦截通过 request.getRequestDispatcher(“”).include()  、通过&lt;jsp:include page=”…” /&gt;此种方式发出的请求<br>ERROR：只拦截<error-page>发出的请求</error-page></p><p>过滤器中doFilter方法参数：ServletRequest<br>在Servlet中的方法参数：HttpServletRequest</p><p>过滤器链<br>可以配置多个过滤器，过滤器的先后顺序 是由 <filter-mapping>的位置 决定</filter-mapping></p></engine>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;&lt;h1 id=&quot;web路径&quot;&gt;&lt;a href=&quot;#web路径&quot; class=&quot;headerlink&quot; title=&quot;web路径&quot;&gt;&lt;/a&gt;web路径&lt;/h1&gt;&lt;p&gt; &lt;strong&gt;web路径：&lt;/strong&gt;&lt;br&gt;1.不&lt;strong&gt;以/开始的相对路径&lt;/strong&gt;，找资源，&lt;strong&gt;以当前资源的路径为基准&lt;/strong&gt;，经常容易出问题&lt;br&gt;2.&lt;strong&gt;以/开始的开始的相对路径&lt;/strong&gt;，找资源，&lt;strong&gt;以服务器为标准（http//localhost/端口号)需要加项目名&lt;/strong&gt;;&lt;br&gt;就是http//localhost/端口号/crud/…&lt;/p&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;%&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;	&lt;span class=&quot;attr&quot;&gt;pageContext.setAttribute&lt;/span&gt;(&quot;&lt;span class=&quot;attr&quot;&gt;APP_PATH&lt;/span&gt;&quot;, &lt;span class=&quot;attr&quot;&gt;request.getContextPath&lt;/span&gt;());&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	$&amp;#123;APP_PATH&amp;#125;/static/bootstrap-3.3.7-dist/css/bootstrap.min.css&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://codeofli.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://codeofli.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>javaSE</title>
    <link href="https://codeofli.github.io/2019/11/java-note/javaSE/javaSE/"/>
    <id>https://codeofli.github.io/2019/11/java-note/javaSE/javaSE/</id>
    <published>2019-11-12T02:32:06.000Z</published>
    <updated>2019-11-12T02:35:44.689Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="java控制台执行"><a href="#java控制台执行" class="headerlink" title="java控制台执行"></a>java控制台执行</h1><p>可以直接编译＋运行</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java Create.java</span><br></pre></td></tr></table></figure><h1 id="字符串String"><a href="#字符串String" class="headerlink" title="字符串String"></a>字符串String</h1><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>String内容不可改变<br>字符串常量就是String的匿名对象<br>所谓的直接赋值实际上就是相当于将一个匿名对象设置了一个名字而已<br>    String类的匿名对象是由系统自动设置，而不是有用户自己定义的<br>String当做参数传递没有改变，是因为新的String通过赋值指向了新的对象，所以对传入的String没有影响</p><a id="more"></a><h2 id="修改类"><a href="#修改类" class="headerlink" title="修改类"></a>修改类</h2><p>StringBuffer<br>    StringBuffer的内容可以修改<br>    方法：<br>        public StringBuffer reverse()<br>        append<br>        insert<br>        delete<br>    线程安全的，都是同步方法<br>和String一样都实现了CharSequence接口<br>StringBulid<br>    是StringBuffer基本一样<br>    线程不安全的</p><h2 id="两种实例化方式"><a href="#两种实例化方式" class="headerlink" title="两种实例化方式"></a>两种实例化方式</h2><p>直接赋值<br>new构造方法<br>    其内容不会保存在对象池中<br>    使用new关键字，在堆上开辟一个内存<br>    手动入池<br>        public native String intern();<br>    容易找出空间浪费，不建议使用    </p><h1 id="常用类"><a href="#常用类" class="headerlink" title="常用类"></a>常用类</h1><h2 id="数字类"><a href="#数字类" class="headerlink" title="数字类"></a>数字类</h2><h2 id="大数类"><a href="#大数类" class="headerlink" title="大数类"></a>大数类</h2><pre><code>### 大整数类BigInteger</code></pre><p>String构造方法<br>    public BigInteger(String val)</p><h3 id="大浮点数BigDecimal"><a href="#大浮点数BigDecimal" class="headerlink" title="大浮点数BigDecimal"></a>大浮点数BigDecimal</h3><p>构造方法<br>    String构造方法<br>    double构造方法<br>可实现准确的四舍五入操作<br>    public BigDecimal divide(BigDecimal divisor, int scale, int roundingMode)<br>    除以1实现四舍五入<br>        divide(new BigDecimal(1),scale,<br>BigDecimal.ROUND_HALF_UP)<br>    round(new MathContext(setPrecision, RoundingMode.HALF_UP))<br>        MathContext构造方法默认四舍五入<br>    setScale(newScale, RoundingMode.HALF_UP)<br>        小数位后保留</p><h2 id="Math类"><a href="#Math类" class="headerlink" title="Math类"></a>Math类</h2><p> Math类里面提供的方法都是static方法，Math类里面都没有普通方法<br>四舍五入round<br>    public static long round(double a)<br>    如果负数进行四舍五入时，大于-0.5才为-1</p><h1 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h1><p>1、加载数据库驱动<br>    E:\app\test\product\11.2.0\dbhome_1\jdbc\lib\ojdbc6.jar<br>    Oracle驱动类：oracle.jdbc.dirver.OracleDrive<br>    连接oracle<br>        驱动程序下载oracle自带有<br>    加载驱动类class.forName(“oracle.jdbc.dirver.OracleDrive”)<br>2、建立数据库连接<br>    DriverManager.getConnection(url, user, password)<br>    数据库链接地址（URL）<br>        oracle<br>            jdbc：oracle:连接方式：主机名称：端口号：数据库的SID（Security Identifier）<br>            连接本机的mldn数据库：<br>                jdbc:oracle:thin:@localhost:1521:mldn<br>java之中所有的数据库操作类和接口在java.sql<br>数据库驱动程序有数据库生成商提供<br>JDBC在实现数据库驱动连接对象使用工厂设计设计模式，而DriverManager就是工厂类<br>    所以客服端调用连接时，隐藏子类的具体连接实现</p><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p>Pattern类<br>    获得此类对象必须通过Compile()方法，编译正则表达式<br>Matcher类<br>    Pattern类获得</p><h2 id="字符串的正则运用"><a href="#字符串的正则运用" class="headerlink" title="字符串的正则运用"></a>字符串的正则运用</h2><p>​    matches()：正则验证<br>​    replaceAll(String regex, String replacement):全部替换<br>​    replaceFirst(String regex, String replacement)：替换首个<br>​    split(String regex) ：全部拆分<br>​    split(String regex, int limit)：部分拆分</p><h2 id="正则标记"><a href="#正则标记" class="headerlink" title="正则标记"></a>正则标记</h2><p>都在Pattern类定义<br>单个字符（匹配数量1）<br>    字符：由一个字符组成<br>    \转移字符’&#39;<br>    ‘\t’制表符<br>    \n换行符<br>字符集（数量1）<br>    [abc]表示字符a、b和c中的任意一个（或的关系）<br>    [ ^abc]表示不是abc中任意一个（^非的关系）</p><p>​    <strong>[x-y] x的ascii到y的ascii码之间的值</strong></p><p>​    [a-z]所有小写字母<strong>（也可以[e-i])</strong><br>​    [a-zA-Z]任意字母<br>​    [0-9]任意一位数字<br>简化字符表达式（数量1）<br>​    . :任意一位字符<br>​    \d： =[0-9]<br>​    \D : = [ ^0-9]<br>​    \s: 任意空白字符，如’\t’,’\n’<br>​    \S:任意非空白字符<br>​    \w : =[a-zA-Z_0-9]<br>​    \W : = [ ^a-zA-Z_0-9]<br>边界表达式（不要在java中用，javaScript中用）<br>​    ^:正则开始<br>​    $:正则结束<br>数量表达式<br>​    正则？：表示正则可以出现0次或1次 {0,1}<br>​    正则+：表示正则可以出现1次或1次以上 &gt;=1 {1,}<br>​    正则<em>：表示正则可以出现0次或1次或多次 &gt;= 0 {0,}<br>​    正则{n}：表示正则正好出现n次<br>​    正则{n,}：表示正则出现n次及以上<br>​    正则{n,m}：表示正则出现{n,m}次<br>逻辑表达式<br>​    正则1正则2：判断第一个完成以后再判断第二个正则<br>​    正则1|正则2：两个正则的或<br>（正则）：*</em>将多个正则作为一组**，可以为这一组单独设置次数注解</p><h1 id="Annotation"><a href="#Annotation" class="headerlink" title="Annotation"></a>Annotation</h1><p>3个最常用的基础注解<br>    声明覆写操作@Override<br>        明确告诉编译器覆写，如果没有覆写成功则会报错<br>    声明过期操作@desperated<br>    压制警告@SupperssWarming</p><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><p>实现<br>    Thread实现<br>    Runnable接口实现，能多继承<br>        Thread类有Runnable的构造函数<br>    Callable泛型接口实现，能有返回值<br>        Thread类没有Callable的构造函数<br>        FutureTask类负责接收call方法的返回值（接收Callable构造），实现RunnableFuture接口，RunnableFuture接口实现了Runnable接口、Future接口的get方法（负责接收返回值）<br>    需要重写run方法，start开始<br>        不用run方法是因为需要判断线程是否重复启动，并且需要不同操作系统提供start0的资源调配方法<br>休眠Sleep（Thread）<br>    几个线程一起休眠感觉是一起结束（时间长)，当是结束之后还是要抢占资源（时间短）,顺序是不固定的<br>优先级<br>    优先级越高，越有可能抢占到资源，越有可能执行<br>同步synchronized<br>    同步代码块<br>    同步方法public synchronized 返回值<br>等待wait(Object类）<br>    notify唤醒</p><h2 id="对象克隆"><a href="#对象克隆" class="headerlink" title="对象克隆"></a>对象克隆</h2><p>如果没有实现Cloneable的接口会上抛一个异常<br>Cloneable接口<br>    没有方法和全局常量<br>    此为标识接口，表示一种能力<br>需要覆写Object类的clone方法<br>    protected native Object clone() throws CloneNotSupportedException;</p><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><p>“反”通过对象找到类的出处<br>java.lang.Class反射的源头<br>    三种实例化方式<br>        第一种：调用Object类中的getClass()<br>            需要对象实例化<br>        第二种：类.class属性<br>            不需要对象实例化，需要import<br>            Spring、Hibernate<br>        第三种：Class提供的forName()方法<br>            不需要import导入类，类用String描述<br>            public static Class<?> forName(String className)反射对象实例化    Class类的无参构造方法：public T newInstance()    new是耦合的主要元凶，当出现高耦合时大多数时能用反射降低        工厂模式构造方法调用    最好保留无参构造方法，以便构造    取得指定构造方法        public Constructor<t> getConstructor(Class<?>… parameterTypes)<br>            public类型构造方法<br>        public Constructor<t> getDeclaredConstructor(Class&lt;?&gt;… parameterTypes)<br>            所有构造方法<br>    取得一些构造方法<br>调用普通方法    </t></t></p><h1 id="共享设计模式"><a href="#共享设计模式" class="headerlink" title="共享设计模式"></a>共享设计模式</h1><p>​    在JVM的底层实际上会存在有一个对象池（不一定只保存String），当String通过直接赋值创建一个String类对象时，会将此匿名对象如此保存，而后若果有新的String通过直接复制并且赋值内容和之前入池的相同，则不会开辟新的堆内存，而是使用之前对象池的引用。</p><h1 id="4种代码块"><a href="#4种代码块" class="headerlink" title="4种代码块"></a>4种代码块</h1><p>1、普通代码块<br>    代码块写在了方法里面<br>    改变变量作用域，能防止重名？（但是什么没有）<br>2、构造块<br>    代码写在了类里<br>    构造块优先于构造块执行，每次构造执行一次（没什么用）<br>3、静态代码块<br>    非主类<br>    主类<br>        静态块在主方法前运行<br>    为了静态变量的初始化，一个类只执行一次（也没什么用）<br>4、同步代码块<br>    多线程同步使用<br>尽量不要使用代码块</p><p>[^a-zA-Z_0-9]: </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;&lt;h1 id=&quot;java控制台执行&quot;&gt;&lt;a href=&quot;#java控制台执行&quot; class=&quot;headerlink&quot; title=&quot;java控制台执行&quot;&gt;&lt;/a&gt;java控制台执行&lt;/h1&gt;&lt;p&gt;可以直接编译＋运行&lt;/p&gt;&lt;figure class=&quot;highlight cmd&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;java Create.java&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&quot;字符串String&quot;&gt;&lt;a href=&quot;#字符串String&quot; class=&quot;headerlink&quot; title=&quot;字符串String&quot;&gt;&lt;/a&gt;字符串String&lt;/h1&gt;&lt;h2 id=&quot;特点&quot;&gt;&lt;a href=&quot;#特点&quot; class=&quot;headerlink&quot; title=&quot;特点&quot;&gt;&lt;/a&gt;特点&lt;/h2&gt;&lt;p&gt;String内容不可改变&lt;br&gt;字符串常量就是String的匿名对象&lt;br&gt;所谓的直接赋值实际上就是相当于将一个匿名对象设置了一个名字而已&lt;br&gt;    String类的匿名对象是由系统自动设置，而不是有用户自己定义的&lt;br&gt;String当做参数传递没有改变，是因为新的String通过赋值指向了新的对象，所以对传入的String没有影响&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://codeofli.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://codeofli.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>jquery</title>
    <link href="https://codeofli.github.io/2019/11/js-note/jquery/jquery/"/>
    <id>https://codeofli.github.io/2019/11/js-note/jquery/jquery/</id>
    <published>2019-11-12T02:25:41.000Z</published>
    <updated>2019-11-12T02:29:57.666Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="jQuery入口函数"><a href="#jQuery入口函数" class="headerlink" title="jQuery入口函数"></a>jQuery入口函数</h1><h2 id="jQuery与JavaScript加载模式对比"><a href="#jQuery与JavaScript加载模式对比" class="headerlink" title="jQuery与JavaScript加载模式对比"></a>jQuery与JavaScript加载模式对比</h2><ul><li><strong>多个window.onload只会执行一次, 后面的会覆盖前面的</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            alert(<span class="string">"hello lnj1"</span>); <span class="comment">// 不会显示</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            alert(<span class="string">"hello lnj2"</span>); <span class="comment">// 会显示</span></span><br><span class="line">        &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><ul><li><strong>多个$(document).ready()会执行多次,后面的不会覆盖前面的</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            alert(<span class="string">"hello lnj1"</span>); <span class="comment">//会显示</span></span><br><span class="line">        &#125;);</span><br><span class="line">        $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            alert(<span class="string">"hello lnj2"</span>); <span class="comment">// 会显示</span></span><br><span class="line">        &#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><ul><li><em>不会覆盖的本质(了解,后面jQuery原理会详细讲解)</em><ul><li>jQuery框架本质是一个闭包,每次执行我们都会给ready函数传递一个新的函数,不同函数内部的数据不会相互干扰</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="comment">// 相当于这样写</span></span><br><span class="line">        <span class="keyword">var</span> test1 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            alert(<span class="string">"hello lnj1"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> test2 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            alert(<span class="string">"hello lnj2"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        $(<span class="built_in">document</span>).ready(test1);</span><br><span class="line">        $(<span class="built_in">document</span>).ready(test2);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">        var test3 = function () &#123;</span></span><br><span class="line"><span class="regexp">            var abc = "123";</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/            因为在同一个函数中,所以456覆盖123</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/            var abc = "456"; </span></span><br><span class="line"><span class="regexp">            alert(abc);</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        test3();</span></span><br><span class="line"><span class="regexp">        var test4 = function () &#123;</span></span><br><span class="line"><span class="regexp">            /</span><span class="regexp">/ 因为在不同函数中,所以不会影响</span></span><br><span class="line"><span class="regexp">            var abc = "456"; </span></span><br><span class="line"><span class="regexp">            alert(abc);</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        test4();</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>window.onload</th><th>$(document).ready()</th></tr></thead><tbody><tr><td>执行时机</td><td>必须等待网页全部加载完毕(包括 图片等),然后再执行包裹代码</td><td>只需要等待网页中的DOM结构 加载完毕,就能执行包裹的代码</td></tr><tr><td>执行次数</td><td>只能执行一次,如果第二次,那么 第一次的执行会被覆盖</td><td>可以执行多次,第N次都不会被上 一次覆盖</td></tr><tr><td>简写方案</td><td>无</td><td>$(function () { });</td></tr></tbody></table><hr><ul><li><strong>为什么我们能访问$符号?</strong><ul><li>因为$符号jQuery框架对外暴露的一个全局变量</li></ul></li><li><strong>JavaScript中如何定义一个全局变量?</strong></li><li>所有全局变量是 window 对象的属性</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">test</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> customValue = <span class="number">998</span>;</span><br><span class="line">            alert(customValue);</span><br><span class="line"><span class="comment">//            1.没有如下代码customValue就不是一个全局变量,函数执行完毕之后</span></span><br><span class="line"><span class="comment">//            customValue会被自动释放,test函数以外的地方访问不到customValue</span></span><br><span class="line"><span class="comment">//            2.加上如下代码之后customValue就会变成一个全局变量,函数执行完毕也不</span></span><br><span class="line"><span class="comment">//            会被释放,test函数以外的地方可以访问customValue</span></span><br><span class="line"><span class="comment">//            window.customValue = customValue;</span></span><br><span class="line">        &#125;</span><br><span class="line">        test();</span><br><span class="line">        alert(customValue);</span><br></pre></td></tr></table></figure><ul><li>所以jQuery框架源码实现</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">window.jQuery</span> = window.$ = jQuery<span class="comment">;</span></span><br></pre></td></tr></table></figure><ul><li>所以想要使用jQuery框架只有两种方式,一种是通过$,一种是通过jQuery</li></ul><hr><ul><li><strong>jQuery入口函数的其它编写方式如下</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="comment">// 方式一</span></span><br><span class="line">        $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            alert(<span class="string">"hello lnj"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 方式二</span></span><br><span class="line">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            alert(<span class="string">"hello lnj"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 方式三</span></span><br><span class="line">        jQuery(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            alert(<span class="string">"hello lnj"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 方式四</span></span><br><span class="line">        jQuery(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            alert(<span class="string">"hello lnj"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="解决-符号冲突问题"><a href="#解决-符号冲突问题" class="headerlink" title="解决$符号冲突问题"></a>解决$符号冲突问题</h3><ul><li><strong>为什么是window.jQuery = window.$ = jQuery;,而不是window.jQuery  = jQuery;</strong><ul><li>jQuery框架之所以提供了jQuery访问还提供$访问,就是为了提升开发者的编码效率</li></ul></li><li><strong>$符号冲突怎么办?</strong><ul><li>很多js的框架都提供了类似jQuery这样的便捷访问方式,所以很有可能某一天我们在使用多个框架的时,多个框架作者提供的便捷访问方式冲突(A框架通过$访问,B框架也通过$访问)</li></ul></li><li>***释放$使用权<ul><li>当便捷访问符号发生冲突时,我们可以释放$使用权, 释放之后只能使用jQuery</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="comment">// 在使用jQuery之前指定自定义符号</span></span><br><span class="line">        jQuery.noConflict();</span><br><span class="line">        <span class="comment">// 使用 jQuery</span></span><br><span class="line">        jQuery(<span class="string">"div p"</span>).hide();</span><br><span class="line">        <span class="comment">// 使用其他库的 $()</span></span><br><span class="line">        $(<span class="string">"content"</span>).style.display = <span class="string">'none'</span>;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><ul><li><em>自定义便捷访问符号</em><ul><li>当便捷访问符号发生冲突时,我们可以自定义便捷访问符号</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="comment">// 在使用jQuery之前指定自定义符号</span></span><br><span class="line">        <span class="keyword">var</span> nj = jQuery.noConflict();</span><br><span class="line">        <span class="comment">// 和使用$一样通过自定义符号调用jQuery</span></span><br><span class="line">        nj(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            alert(<span class="string">"hello lnj"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h1 id="核心函数和静态方法"><a href="#核心函数和静态方法" class="headerlink" title="核心函数和静态方法"></a>核心函数和静态方法</h1><h3 id="jQuery核心函数"><a href="#jQuery核心函数" class="headerlink" title="jQuery核心函数"></a>jQuery核心函数</h3><ul><li><strong>从jQuery文档中可以看出,jQuery核心函数一共3大类4小类</strong></li><li><em>jQuery(callback)</em><ul><li>当DOM加载完成后执行传入的回调函数</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            alert(<span class="string">"123"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><hr><ul><li><em>jQuery([sel,[context]])</em><ul><li>接收一个包含 CSS 选择器的字符串，然后用这个字符串去匹配一组元素,并包装成jQuery对象</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 利用jquery获取所有div,得到的是一个jQuery对象</span></span><br><span class="line">            <span class="keyword">var</span> $box = $(<span class="string">"div"</span>);</span><br><span class="line">            <span class="built_in">console</span>.log($box);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 利用js原生语法获取所有div,得到的是一个js对象</span></span><br><span class="line">            <span class="keyword">var</span> box = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"div"</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(box);</span><br><span class="line">        &#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><ul><li>原生JS对象和jQuery对象相互转换</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> $box = $(<span class="string">"#box"</span>);</span><br><span class="line"><span class="comment">//            $box.text("新的数据");</span></span><br><span class="line"><span class="comment">//            jQuery对象不能使用原生js对象的方法</span></span><br><span class="line"><span class="comment">//            $box.innerText = "新的数据";</span></span><br><span class="line"><span class="comment">//            将jQuery对象转换为原生js对象</span></span><br><span class="line"><span class="comment">//            注意: 不是eq(0),eq函数返回的是jQuery类型对象,get函数返回的是原生类型对象</span></span><br><span class="line"><span class="comment">//            var box = $box.get(0);</span></span><br><span class="line">            <span class="keyword">var</span> box = $box[<span class="number">0</span>];</span><br><span class="line">            box.innerText = <span class="string">"新的数据"</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> box2 = <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>);</span><br><span class="line"><span class="comment">//            原生js对象不能使用jQuery对象的方法</span></span><br><span class="line"><span class="comment">//            box2.text("新的数据2");</span></span><br><span class="line"><span class="comment">//            原生js对象只能使用原生的js方法</span></span><br><span class="line"><span class="comment">//            box2.innerText = "新的数据2";</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//            将原生js对象转换为jQuery对象</span></span><br><span class="line">            <span class="keyword">var</span> $box2 = $(box);</span><br><span class="line">           $box2.text(<span class="string">"新的数据2"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>Tips:为了方便开发者之间沟通和阅读,一般情况下所有jQuery操作相关的变量前面加上$</p></blockquote><hr><ul><li><em>jQuery(html,[ownerDoc])</em><ul><li>根据 HTML 标记字符串，动态创建DOM 元素</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> $eles = $(<span class="string">"&lt;p&gt;我是span&lt;/p&gt;&lt;u&gt;我是u&lt;/u&gt;"</span>);</span><br><span class="line">            <span class="comment">// 无论是jQuery找到的还是创建的,我们最终拿到的永远都是jQuery对象</span></span><br><span class="line">            <span class="built_in">console</span>.log($eles);</span><br><span class="line">            <span class="comment">// 将创建好的DOM元素添加到body中</span></span><br><span class="line">            $(<span class="string">"body"</span>).append($eles);</span><br><span class="line">        &#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="jQuery对象"><a href="#jQuery对象" class="headerlink" title="jQuery对象"></a>jQuery对象</h3><ul><li>jQuery对象的本质是什么? <ul><li>jQuery对象的本质是一个伪数组</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $div = $(<span class="string">"div"</span>);</span><br><span class="line"><span class="built_in">console</span>.log($div);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure><ul><li>什么是伪数组? <ul><li>有0到length-1的属性</li><li>并且有length属性</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="number">0</span>:<span class="string">"lnj"</span>, <span class="number">1</span>:<span class="string">"33"</span>, <span class="number">2</span>:<span class="string">"male"</span>, <span class="attr">length</span>: <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="jQuery静态方法"><a href="#jQuery静态方法" class="headerlink" title="jQuery静态方法"></a>jQuery静态方法</h2><ul><li>什么是静态方法? <ul><li><strong>静态方法对应的是对象方法</strong>,对象方法用实例对象调用,而静态方法用类名调用</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> &lt;script&gt;</span><br><span class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">AClass</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">            AClass.staticMethof = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                alert(<span class="string">'静态方法'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            AClass.prototype.instaceMethod = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                alert(<span class="string">'实例方法'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//静态方法用类名直接调用</span></span><br><span class="line">            AClass.staticMethof(); </span><br><span class="line"></span><br><span class="line">            <span class="comment">//实例方法必须用类的实例对象调用</span></span><br><span class="line">            <span class="keyword">var</span> instace = <span class="keyword">new</span> AClass();</span><br><span class="line">            instace.instaceMethod();</span><br><span class="line">        &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><ul><li><em>jQuery.holdReady(hold)</em><ul><li>暂停或者恢复jQuery.ready()事件</li><li>传入true或false</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;<span class="number">04</span>-jQuery静态方法&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script src="代码/</span>js/jquery<span class="number">-1.12</span><span class="number">.4</span>.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">    &lt;script&gt;</span></span><br><span class="line"><span class="string">        // 使用$直接调用,是静态方法</span></span><br><span class="line"><span class="string">        $.holdReady(true);</span></span><br><span class="line"><span class="string">        $(function () &#123;</span></span><br><span class="line">            $("#first").click(function () &#123;</span><br><span class="line">                alert(<span class="string">"我是你想要的弹窗"</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;button id=<span class="string">"first"</span>&gt;点击测试弹出&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;button id="second"&gt;解除延迟&lt;/</span>button&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="string">"#second"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $.holdReady(<span class="literal">false</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><hr><ul><li><em>$.each(object,[callback])</em><ul><li>遍历对象或数组</li><li>优点统一遍历对象和数组的方式</li><li>回调参数的顺序更符合我们的思维模式</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 3.1遍历数组</span></span><br><span class="line">            <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>];</span><br><span class="line">            <span class="comment">// 3.1.1通过原生方法遍历数组</span></span><br><span class="line">            <span class="comment">// 第一个回调函数参数是遍历到的元素</span></span><br><span class="line">            <span class="comment">// 第二个回调函数参数是当前遍历的索引</span></span><br><span class="line">            <span class="comment">// 返回值: 没有返回值</span></span><br><span class="line">            <span class="keyword">var</span> res = arr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">ele, idx</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(idx, ele);</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="built_in">console</span>.log(res);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3.1.2通过jQuery静态方法遍历数组</span></span><br><span class="line">            <span class="comment">// 第一个回调函数参数是当前遍历的索引</span></span><br><span class="line">            <span class="comment">// 第二个回调函数参数是遍历到的元素</span></span><br><span class="line">            <span class="comment">// 返回值: 被遍历的数组</span></span><br><span class="line">            <span class="keyword">var</span> $res2 = $.each(arr, <span class="function"><span class="keyword">function</span> (<span class="params">idx, ele</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(idx, ele);</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="built_in">console</span>.log($res2);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3.2遍历对象</span></span><br><span class="line">            <span class="keyword">var</span> obj = &#123;<span class="attr">name</span>: <span class="string">"lnj"</span>, <span class="attr">age</span>:<span class="string">"33"</span>, <span class="attr">gender</span>:<span class="string">"male"</span>&#125;;</span><br><span class="line">            <span class="comment">// 3.2.1js对象没有forEach方法,所以通过forin方法遍历对象</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> obj)&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(key, obj[key]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 3.2.2通过jQuery静态方法遍历对象</span></span><br><span class="line">            $.each(obj,<span class="function"><span class="keyword">function</span> (<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(key, value);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><hr><ul><li><em>$.map(arr|obj,callback)</em><ul><li>遍历对象或数组,将回调函数的返回值组成一个新的数组返回</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 4.1遍历数组</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>];</span><br><span class="line">    <span class="comment">// 4.1.1通过原生方法遍历数组</span></span><br><span class="line">    <span class="comment">// 第一个回调函数参数是遍历到的元素</span></span><br><span class="line">    <span class="comment">// 第二个回调函数参数是当前遍历的索引</span></span><br><span class="line">    <span class="comment">// 第三个回调函数参数是当前被遍历的数组</span></span><br><span class="line">    <span class="comment">// 返回值: 将回调函数返回值收集起来组成一个新的数组</span></span><br><span class="line">    <span class="keyword">var</span> res = arr.map(<span class="function"><span class="keyword">function</span> (<span class="params">ele, idx, arr</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(idx, ele, arr);</span><br><span class="line">        <span class="keyword">return</span> ele + idx;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 4.1.2通过jQuery静态方法遍历数组</span></span><br><span class="line">    <span class="comment">// 第一个回调函数参数是遍历到的元素</span></span><br><span class="line">    <span class="comment">// 第二个回调函数参数是当前遍历的索引</span></span><br><span class="line">    <span class="comment">// 返回值: 将回调函数返回值收集起来组成一个新的数组</span></span><br><span class="line">    <span class="keyword">var</span> $res2 = $.map(arr, <span class="function"><span class="keyword">function</span> (<span class="params">ele,idx</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(idx, ele);</span><br><span class="line">        <span class="keyword">return</span> ele + idx;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log($res2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.2遍历对象</span></span><br><span class="line">    <span class="keyword">var</span> obj = &#123;<span class="attr">name</span>: <span class="string">"lnj"</span>, <span class="attr">age</span>:<span class="string">"33"</span>, <span class="attr">gender</span>:<span class="string">"male"</span>&#125;;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    obj.map(function (ele, idx, obj) &#123;</span></span><br><span class="line"><span class="comment">        // 报错,原生JS没有map方法</span></span><br><span class="line"><span class="comment">        console.log(idx, ele, obj);</span></span><br><span class="line"><span class="comment">    &#125;);</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">var</span> $res = $.map(obj, <span class="function"><span class="keyword">function</span> (<span class="params">value, key</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(key, value);</span><br><span class="line">        <span class="keyword">return</span> key + value;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log($res);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><ul><li><em>$.trim(str)</em><ul><li>去掉字符串起始和结尾的空格。</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> str = <span class="string">"   lnj   "</span>;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"---"</span>+str+<span class="string">"---"</span>);</span><br><span class="line">            <span class="keyword">var</span> $res = $.trim(str);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"---"</span>+$res+<span class="string">"---"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><hr><ul><li><p><strong>$.isArray(obj)</strong></p></li><li><p>判断是否是数组</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 对象</span></span><br><span class="line">            <span class="keyword">var</span> obj = &#123;<span class="attr">name</span>:<span class="string">"lnj"</span>,<span class="attr">age</span>: <span class="string">"33"</span>, <span class="attr">gender</span>:<span class="string">"male"</span>&#125;;</span><br><span class="line">            <span class="comment">// 真数组</span></span><br><span class="line">            <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>];</span><br><span class="line">            <span class="keyword">var</span> $res = $.isArray(obj);</span><br><span class="line">            <span class="built_in">console</span>.log($res);<span class="comment">// false</span></span><br><span class="line">            <span class="keyword">var</span> $res2 = $.isArray(arr);</span><br><span class="line">            <span class="built_in">console</span>.log($res2);<span class="comment">// true</span></span><br><span class="line">        &#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><hr><ul><li><em>$.isFunction(obj)</em><ul><li>判断是否是函数</li><li>jQuery框架本质是一个匿名函数</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> obj = &#123;<span class="attr">name</span>:<span class="string">"lnj"</span>,<span class="attr">age</span>: <span class="string">"33"</span>, <span class="attr">gender</span>:<span class="string">"male"</span>&#125;;</span><br><span class="line">            <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>];</span><br><span class="line">            <span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">            <span class="keyword">var</span> $res = $.isFunction(obj);</span><br><span class="line">            <span class="built_in">console</span>.log($res);<span class="comment">// false</span></span><br><span class="line">            $res = $.isFunction(arr);</span><br><span class="line">            <span class="built_in">console</span>.log($res);</span><br><span class="line">            $res = $.isFunction(fn);</span><br><span class="line">            <span class="built_in">console</span>.log($res);</span><br><span class="line">            <span class="comment">// 通过该方法验证了我们前面所说的,jQuery框架本质是一个匿名函数</span></span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params">window,undefined</span>)</span>&#123;</span><br><span class="line">                xxxx....</span><br><span class="line">            &#125;)(<span class="built_in">window</span>);</span><br><span class="line">            $res = $.isFunction($);</span><br><span class="line">            <span class="built_in">console</span>.log($res);</span><br><span class="line">        &#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><hr><ul><li><em>$.isWindow(obj)</em><ul><li>判断是否是window对象</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> obj = <span class="built_in">window</span>;</span><br><span class="line">            <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>];</span><br><span class="line">            <span class="keyword">var</span> arrlike = &#123;<span class="number">0</span>:<span class="string">"zs"</span>, <span class="number">1</span>:<span class="string">"ls"</span>, <span class="attr">length</span>:<span class="number">2</span>&#125;;</span><br><span class="line">            <span class="keyword">var</span> $res = $.isWindow(obj);</span><br><span class="line">            <span class="built_in">console</span>.log($res); <span class="comment">// true</span></span><br><span class="line">            $res = $.isWindow(arr);</span><br><span class="line">            <span class="built_in">console</span>.log($res); <span class="comment">// false</span></span><br><span class="line">            $res = $.isWindow(arrlike);</span><br><span class="line">            <span class="built_in">console</span>.log($res); <span class="comment">// false</span></span><br><span class="line">        &#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>为什么要讲解以上极度简单的工具方法?<br> 江哥提示: 这是为后面放大招做铺垫,一定要认真记住以上方法哦</p></blockquote><h1 id="基础选择器"><a href="#基础选择器" class="headerlink" title="基础选择器"></a>基础选择器</h1><ul><li><strong>视频参考第十章-CSS选择器</strong></li></ul><table><thead><tr><th>选择器</th><th>名称</th><th>描述</th><th>返回</th><th>示例</th></tr></thead><tbody><tr><td>#id</td><td>id选择器</td><td>根据给定的id匹配一个元素</td><td>单个元素</td><td>$(“#box”);选取id为box元素</td></tr><tr><td>.class</td><td>类选择器</td><td>根据给定的类名匹配元素</td><td>集合元素</td><td>$(“.box”);选取所有类名为box元素</td></tr><tr><td>element</td><td>元素选择器</td><td>根据给定的元素名称匹配元素</td><td>集合元素</td><td>$(“p”);选取所有<p>元素</p></td></tr><tr><td>*</td><td>通配符选择器</td><td>匹配所有元素</td><td>集合元素</td><td>$(“*”);选取所有元素</td></tr><tr><td>selector1,selector2,selectorN</td><td>并集选择器</td><td>将所有选择器匹配到的元素合并后一起返回</td><td>集合元素</td><td>$(“div,p,.box”);选取所有<div>元素,所有<p>元素和所有类名为box元素</p></div></td></tr></tbody></table><p>##层次选择器</p><ul><li><strong>视频参考第十章-CSS选择器</strong></li></ul><table><thead><tr><th>选择器</th><th>名称</th><th>描述</th><th>返回</th><th>示例</th></tr></thead><tbody><tr><td>$(“ancestor descendant”)</td><td>后代选择器</td><td>选取ancestor元素的所有descendant后代标签(不光是儿子,包括孙子/重孙子等)</td><td>集合元素</td><td>$(“div span”);选取<div>元素里所有的<span>元素</span></div></td></tr><tr><td>$(“parent &gt; child”)</td><td>子元素选择器</td><td>找到选取parent 元素中所有直接子元素child(只有儿子,不包括孙子/重孙子等)</td><td>集合元素</td><td>$(“div&gt;span”);选取<div>元素下元素名称是<span>的子元素</span></div></td></tr><tr><td>$(“prev + next”)</td><td>相邻兄弟选择器</td><td>选取prev元素后面紧跟的那个next元素</td><td>集合元素</td><td>$(“.one+div”);选取类名为one的下一个同级的<div>元素</div></td></tr><tr><td>$(“prev ~ siblings”)</td><td>通用兄弟选择器</td><td>选取prev元素后面的所有next元素</td><td>集合元素</td><td>$(“#two~div”);选取id名为two元素后面所有同级的<div>元素</div></td></tr></tbody></table><h3 id="序选择器"><a href="#序选择器" class="headerlink" title="序选择器"></a>序选择器</h3><ul><li><strong>视频参考第十章-CSS选择器</strong></li></ul><blockquote><p>如上内容不再一一赘述,观看第十章-CSS选择器,使用时查询文档即可<br> 做开发是脑力活,我们需要掌握的是解决问题的方法,而不是死记硬背</p></blockquote><h2 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h2><ul><li><strong>视频参考第十章-CSS选择器</strong></li></ul><blockquote><p>如上内容不再一一赘述,观看第十章-CSS选择器,使用时查询文档即可<br> 做开发是脑力活,我们需要掌握的是解决问题的方法,而不是死记硬背</p></blockquote><h3 id="内容过滤选择器"><a href="#内容过滤选择器" class="headerlink" title="内容过滤选择器"></a>内容过滤选择器</h3><table><thead><tr><th>选择器</th><th>描述</th><th>返回</th></tr></thead><tbody><tr><td>:empty</td><td>选取不包含子元素或文本为空的元素</td><td>集合元素</td></tr><tr><td>:parent</td><td>选取含有子元素或文本的元素</td><td>集合元素</td></tr><tr><td>:contains(text)</td><td>选取含有文本内容为text的元素</td><td>集合元素</td></tr><tr><td>:has(selector)</td><td>选取含有选择器所匹配的元素的元素</td><td>集合元素</td></tr></tbody></table><ul><li><strong>:empty</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;<span class="number">05</span>-jQuery选择器&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script src="代码/</span>js/jquery<span class="number">-1.12</span><span class="number">.4</span>.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">    &lt;script&gt;</span></span><br><span class="line"><span class="string">        $(function () &#123;</span></span><br><span class="line"><span class="string">           // 找到所有div中不包含文本内容或子元素的元素</span></span><br><span class="line"><span class="string">            var $res = $("</span>div:empty<span class="string">");</span></span><br><span class="line"><span class="string">            console.log($res.length); // 找到1个元素</span></span><br><span class="line"><span class="string">            $res.each(function (idx,ele) &#123;</span></span><br><span class="line"><span class="string">                console.log(idx, ele); // one</span></span><br><span class="line"><span class="string">            &#125;);</span></span><br><span class="line"><span class="string">        &#125;);</span></span><br><span class="line"><span class="string">    &lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;div class="</span>one<span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;div class="</span>two<span class="string">"&gt;zs&lt;/div&gt;&lt;!--包含内容不会被找到--&gt;</span></span><br><span class="line"><span class="string">&lt;div class="</span>three<span class="string">"&gt;&lt;!--包含子元素不会被找到--&gt;</span></span><br><span class="line"><span class="string">    &lt;span&gt;lnj&lt;/span&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;span class="</span>five<span class="string">"&gt;&lt;/span&gt;&lt;!--不是指定元素不会被找到--&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>:parent</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;<span class="number">05</span>-jQuery选择器&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script src="代码/</span>js/jquery<span class="number">-1.12</span><span class="number">.4</span>.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">    &lt;script&gt;</span></span><br><span class="line"><span class="string">        $(function () &#123;</span></span><br><span class="line"><span class="string">           // 找到所有div中包含文本内容或子元素的元素</span></span><br><span class="line"><span class="string">            var $res = $("</span>div:parent<span class="string">");</span></span><br><span class="line"><span class="string">            console.log($res.length);</span></span><br><span class="line"><span class="string">            $res.each(function (idx, ele) &#123;</span></span><br><span class="line"><span class="string">                console.log(idx, ele);</span></span><br><span class="line"><span class="string">            &#125;);</span></span><br><span class="line"><span class="string">        &#125;);</span></span><br><span class="line"><span class="string">    &lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;div class="</span>one<span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;div class="</span>two<span class="string">"&gt;zs&lt;/div&gt;&lt;!--有文本内容会被找到--&gt;</span></span><br><span class="line"><span class="string">&lt;div class="</span>three<span class="string">"&gt;&lt;!--有子元素会被找到--&gt;</span></span><br><span class="line"><span class="string">    &lt;span&gt;lnj&lt;/span&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;span class="</span>five<span class="string">"&gt;&lt;/span&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>:contains(text)</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;<span class="number">05</span>-jQuery选择器&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script src="代码/</span>js/jquery<span class="number">-1.12</span><span class="number">.4</span>.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">    &lt;script&gt;</span></span><br><span class="line"><span class="string">        $(function () &#123;</span></span><br><span class="line"><span class="string">            // 找到所有div中包含文本内容为lnj的元素</span></span><br><span class="line"><span class="string">            var $res = $("</span>div:contains(<span class="string">'lnj'</span>)<span class="string">");</span></span><br><span class="line"><span class="string">            console.log($res.length);// 找到2个元素</span></span><br><span class="line"><span class="string">            $res.each(function (idx, ele) &#123;</span></span><br><span class="line"><span class="string">                console.log(idx, ele);// one,three,four</span></span><br><span class="line"><span class="string">            &#125;)</span></span><br><span class="line"><span class="string">        &#125;);</span></span><br><span class="line"><span class="string">    &lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;div class="</span>one<span class="string">"&gt;lnj&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;div class="</span>two<span class="string">"&gt;zs&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;div class="</span>three<span class="string">"&gt;lnj&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;div class="</span>four<span class="string">"&gt;&lt;!--子元素中包含该文本也会被找到--&gt;</span></span><br><span class="line"><span class="string">    &lt;span&gt;lnj&lt;/span&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;span class="</span>five<span class="string">"&gt;&lt;/span&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><ul><li><em>:has(selector)</em><ul><li>和:parent区别,parent只要有子元素就会被找到,:has(selector)不仅要有子元素,而且子元素还必须满足我们的条件</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;<span class="number">05</span>-jQuery选择器&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script src="代码/</span>js/jquery<span class="number">-1.12</span><span class="number">.4</span>.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">    &lt;script&gt;</span></span><br><span class="line"><span class="string">        $(function () &#123;</span></span><br><span class="line"><span class="string">            // 找到所有div中包含后代元素为span的元素</span></span><br><span class="line"><span class="string">            var $res = $("</span>div:has(<span class="string">'span'</span>)<span class="string">");</span></span><br><span class="line"><span class="string">            console.log($res.length);</span></span><br><span class="line"><span class="string">            $res.each(function (idx, ele) &#123;</span></span><br><span class="line"><span class="string">                console.log(idx, ele);</span></span><br><span class="line"><span class="string">            &#125;);</span></span><br><span class="line"><span class="string">        &#125;);</span></span><br><span class="line"><span class="string">    &lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;div class="</span>one<span class="string">"&gt; &lt;!--后代中包含span元素会被找到--&gt;</span></span><br><span class="line"><span class="string">    &lt;span&gt;jjj&lt;/span&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;div class="</span>two<span class="string">"&gt;&lt;!--后代中不包含span元素不会被找到--&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;zs&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;div class="</span>three<span class="string">"&gt;&lt;!--后代中包含span元素会被找到--&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;</span></span><br><span class="line"><span class="string">        &lt;span&gt;lnj&lt;/span&gt;</span></span><br><span class="line"><span class="string">    &lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><h1 id="属性相关"><a href="#属性相关" class="headerlink" title="属性相关"></a>属性相关</h1><p>##属性和属性节点</p><ul><li><em>什么是属性?</em><ul><li>属性就是对象身上的变量</li><li>只要对象身上都可以添加属性(<em>无论是自定义对象,还是DOM对象</em>)</li></ul></li></ul><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">            // 1.自定义一个对象</span></span><br><span class="line"><span class="xml">            var obj = </span><span class="template-variable">&#123;&#125;</span><span class="xml">;</span></span><br><span class="line"><span class="xml">            console.log(obj);</span></span><br><span class="line"><span class="xml">            // 2.动态给自定义对象添加属性</span></span><br><span class="line"><span class="xml">            obj.name = "lnj"; // name就是对象obj的一个属性</span></span><br><span class="line"><span class="xml">            obj.age = 33; // age就是对象obj的一个属性</span></span><br><span class="line"><span class="xml">            console.log(obj);</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><img src="https:////upload-images.jianshu.io/upload_images/647982-d31bfc904163474f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" alt="img"></p><p>image.png</p><ul><li><em>什么是属性节点?</em><ul><li>在html中编写的所有标签，里面的属性都是属性节点 <ul><li><code>&lt;span class = &#39;box&#39; nj = &#39;666&#39;&gt;&lt;/span&gt; // 这里的class和nj就是属性节点</code></li></ul></li></ul></li></ul><p><img src="https:////upload-images.jianshu.io/upload_images/647982-7035a4affa5465ad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" alt="img"></p><p>image.png</p><ul><li><p><em>如果操作属性?</em></p><ul><li>添加或修改属性(没有就会添加,有就会修改) <ul><li><code>对象.属性名称 = 值;</code></li><li><code>对象[&quot;属性名称&quot;] = 值;</code></li></ul></li><li>获取属性 <ul><li><code>对象.属性名称</code></li><li><code>对象[&quot;属性名称&quot;]</code></li></ul></li></ul></li><li><p><em>如何操作属性节点?</em></p><ul><li>获取属性节点 <ul><li><code>DOM对象.getAttribute(&quot;属性节点名称&quot;)</code></li></ul></li><li>设置属性节点 <ul><li><code>DOM对象.setAttribute(&quot;属性节点名称&quot;, &quot;值&quot;);</code></li></ul></li></ul></li></ul><hr><h3 id="jQuery中的attr和prop方法"><a href="#jQuery中的attr和prop方法" class="headerlink" title="jQuery中的attr和prop方法"></a>jQuery中的attr和prop方法</h3><ul><li><em>attr(name|pro|key,val|fn)方法</em><ul><li>用于设置或获取属性节点的值</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 1.获取指定属性节点值</span></span><br><span class="line">            <span class="keyword">var</span> $res = $(<span class="string">".span1"</span>).attr(<span class="string">"nj"</span>);</span><br><span class="line">            <span class="built_in">console</span>.log($res);</span><br><span class="line">            <span class="comment">// 2.设置属性节点</span></span><br><span class="line">            $(<span class="string">".span1"</span>).attr(<span class="string">"nj"</span>, <span class="string">"666"</span>);</span><br><span class="line">            $(<span class="string">".span2"</span>).attr(<span class="string">"id"</span>, <span class="string">"box1 box2"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3.注意点:</span></span><br><span class="line">            <span class="comment">// 3.1.获取属性节点时,只会获取找到所有元素中第一个元素的属性节点</span></span><br><span class="line">            $res = $(<span class="string">"span"</span>).attr(<span class="string">"class"</span>);</span><br><span class="line">            <span class="built_in">console</span>.log($res);</span><br><span class="line">             $(<span class="string">"span"</span>).attr(<span class="string">"class"</span>, <span class="string">"lnj"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><ul><li><em>removeAttr(name)方法</em><ul><li>用于删除指定属性节点</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 1.设置属性节点时,会给所有找到元素设置属性节点</span></span><br><span class="line">            $(<span class="string">"span"</span>).attr(<span class="string">"test"</span>, <span class="string">"jonathan"</span>);</span><br><span class="line">            <span class="comment">// 2.删除属性节点时,会删除所有找到元素的属性节点</span></span><br><span class="line">            $(<span class="string">"span"</span>).removeAttr(<span class="string">"test"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><ul><li><em>prop(n|p|k,v|f)方法</em><ul><li>用于设置或者获取元素的属性值</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 1.设置属性</span></span><br><span class="line">            <span class="comment">// 1.1.设置属性时,会设置所有找到元素的属性</span></span><br><span class="line">            $(<span class="string">"span"</span>).prop(<span class="string">"demo"</span>, <span class="string">"lnj"</span>);</span><br><span class="line">            <span class="comment">// 2.获取属性</span></span><br><span class="line">            <span class="comment">// 2.1.获取属性时,只会获取找到第一个元素的属性</span></span><br><span class="line">            <span class="built_in">console</span>.log($(<span class="string">"span"</span>).prop(<span class="string">"demo"</span>));</span><br><span class="line">        &#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>removeProp(name)方法</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 删除所有找到元素的demo属性</span></span><br><span class="line">            $(<span class="string">"span"</span>).removeProp(<span class="string">"demo"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><ul><li><em>attr方法和prop方法区别</em><ul><li>既然所有的DOM对象，都有一个attributes属性,而prop可以操作属性,所以也可以操作属性节点</li><li>官方推荐在操作属性节点时,<strong>具有 true 和 false 两个属性的属性节点，如 checked, selected 或者 disabled 使用prop()，其他的使用 attr()</strong></li><li>因为如果具有 true 和 false 两个属性的属性节点,如果没有编写默认attr返回undefined,而prop返回false</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 1.可以通过prop获取属性节点</span></span><br><span class="line">            <span class="built_in">console</span>.log($(<span class="string">"input"</span>).prop(<span class="string">"class"</span>));</span><br><span class="line">            <span class="comment">// 2.可以通过prop设置属性节点</span></span><br><span class="line">            $(<span class="string">"input"</span>).prop(<span class="string">"class"</span>, <span class="string">"tag"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3.如果没有默认值,那么attr获取返回undefined</span></span><br><span class="line"><span class="comment">//            console.log($("input[type=checkbox]").attr("checked"));</span></span><br><span class="line">            <span class="comment">// 4.如果没有默认值,那么prop获取返回false</span></span><br><span class="line">            <span class="built_in">console</span>.log($(<span class="string">"input[type=checkbox]"</span>).prop(<span class="string">"checked"</span>));</span><br><span class="line">            <span class="comment">// 5.通过attr设置选中</span></span><br><span class="line"><span class="comment">//            $("input[type=checkbox]").attr("checked", true);</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 6.通过prop设置选中</span></span><br><span class="line">            $(<span class="string">"input[type=checkbox]"</span>).prop(<span class="string">"checked"</span>, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="jQuery增删Class"><a href="#jQuery增删Class" class="headerlink" title="jQuery增删Class"></a>jQuery增删Class</h3><ul><li><strong>jQuery CSS类相关方法都是用于操作DOM对象的class属性节点的值</strong></li><li><em>addClass(class|fn)</em><ul><li>给元素添加一个或多个类</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;<span class="number">08</span>-jQueryCSS类&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;style&gt;</span></span><br><span class="line"><span class="regexp">        .class1&#123;</span></span><br><span class="line"><span class="regexp">            width: 200px;</span></span><br><span class="line"><span class="regexp">            height: 200px;</span></span><br><span class="line"><span class="regexp">            background-color: red;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        .class2&#123;</span></span><br><span class="line"><span class="regexp">            border: 5px solid #000;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>style&gt;</span><br><span class="line">    &lt;script src=<span class="string">"代码/js/jquery-1.12.4.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">           $(<span class="string">"button"</span>).eq(<span class="number">0</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">               <span class="comment">// 1.添加一个类</span></span><br><span class="line"><span class="comment">//               $("div").addClass("class1");</span></span><br><span class="line">               <span class="comment">// 2.再添加一个类</span></span><br><span class="line"><span class="comment">//               $("div").addClass("class2");</span></span><br><span class="line">               <span class="comment">// 3.一次性添加多个类(用空格隔开)</span></span><br><span class="line">               $(<span class="string">"div"</span>).addClass(<span class="string">"class1 class2"</span>);</span><br><span class="line">           &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;button&gt;添加&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;button&gt;删除&lt;/</span>button&gt;</span><br><span class="line">&lt;button&gt;切换&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;div&gt;&lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure><ul><li><em>removeClass([class|fn])</em><ul><li>删除元素的一个或多个类</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="string">"button"</span>).eq(<span class="number">1</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="comment">// 4.删除一个类</span></span><br><span class="line"><span class="comment">//                $("div").removeClass("class2");</span></span><br><span class="line">                <span class="comment">// 5.再删除一个类</span></span><br><span class="line"><span class="comment">//                $("div").removeClass("class1");</span></span><br><span class="line">                <span class="comment">// 6.一次性删除多个类(用空格隔开)</span></span><br><span class="line">                $(<span class="string">"div"</span>).removeClass(<span class="string">"class1 class2"</span>);</span><br><span class="line"></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><ul><li><em>toggleClass(class|fn[,sw])</em><ul><li>添加或删除一个类(存在就删除不存在就添加)</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="string">"button"</span>).eq(<span class="number">2</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="comment">// 7.切换一个类</span></span><br><span class="line"><span class="comment">//                $("div").toggleClass("class2");</span></span><br><span class="line">                <span class="comment">// 8.切换多个类</span></span><br><span class="line">                $(<span class="string">"div"</span>).toggleClass(<span class="string">"class1 class2"</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="jQuery代码-文本-值"><a href="#jQuery代码-文本-值" class="headerlink" title="jQuery代码/文本/值"></a>jQuery代码/文本/值</h3><ul><li><em>html([val|fn])</em><ul><li>添加或获取元素中的HTML</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;<span class="number">09</span>-jQuery代码文本值&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script src="代码/</span>js/jquery<span class="number">-1.12</span><span class="number">.4</span>.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">    &lt;script&gt;</span></span><br><span class="line"><span class="string">        $(function () &#123;</span></span><br><span class="line"><span class="string">            var $btns = $("</span>button<span class="string">");</span></span><br><span class="line"><span class="string">            var $div = $("</span>div<span class="string">");</span></span><br><span class="line"><span class="string">            $btns.eq(0).click(function () &#123;</span></span><br><span class="line"><span class="string">                // 1.添加html, 相当于innerHTML</span></span><br><span class="line"><span class="string">//                $div.html("</span>&lt;p&gt;我是p标签&lt;<span class="regexp">/p&gt;");</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/                $div.html("&lt;p&gt;&lt;span&gt;我是span标签&lt;/</span>span&gt;<span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><span class="string">");</span></span><br><span class="line"><span class="string">                $div.html("</span>我是文本<span class="string">");</span></span><br><span class="line"><span class="string">            &#125;);</span></span><br><span class="line"><span class="string">            $btns.eq(1).click(function () &#123;</span></span><br><span class="line"><span class="string">                // 2.获取html</span></span><br><span class="line"><span class="string">                console.log($div.html());</span></span><br><span class="line"><span class="string">            &#125;);</span></span><br><span class="line"><span class="string">        &#125;);</span></span><br><span class="line"><span class="string">    &lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;button&gt;添加html&lt;/button&gt;</span></span><br><span class="line"><span class="string">&lt;button&gt;获取html&lt;/button&gt;</span></span><br><span class="line"><span class="string">&lt;button&gt;添加文本&lt;/button&gt;</span></span><br><span class="line"><span class="string">&lt;button&gt;获取文本&lt;/button&gt;</span></span><br><span class="line"><span class="string">&lt;div&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><ul><li><em>text([val|fn])</em><ul><li>添加或获取元素中的文本</li><li><strong>text方法能做的html方法都能做,所以一般使用html方法即可</strong></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            $btns.eq(<span class="number">2</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="comment">// 3.添加文本, 相当于innerText</span></span><br><span class="line">                <span class="comment">// 如下内容不会被转换为标签</span></span><br><span class="line"><span class="comment">//                $div.text('&lt;p&gt;我是段落&lt;/p&gt;');</span></span><br><span class="line">               $div.text(<span class="string">'我是文本'</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">            $btns.eq(<span class="number">3</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="comment">// 4.获取文本</span></span><br><span class="line">                <span class="built_in">console</span>.log($div.text());</span><br><span class="line">            &#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><ul><li><em>val([val|fn|arr])</em><ul><li>添加或获取元素value属性的值</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            $btns.eq(<span class="number">4</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="comment">// 4.添加value值</span></span><br><span class="line">                $(<span class="string">"input"</span>).val(<span class="string">"我是一个输入框"</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">            $btns.eq(<span class="number">5</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="comment">// 4.获取value值</span></span><br><span class="line">                <span class="built_in">console</span>.log($(<span class="string">"input"</span>).val());</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h1 id="CSS操作"><a href="#CSS操作" class="headerlink" title="CSS操作"></a>CSS操作</h1><h2 id="jQuery操作CSS样式"><a href="#jQuery操作CSS样式" class="headerlink" title="jQuery操作CSS样式"></a>jQuery操作CSS样式</h2><ul><li><em>css(name|pro|[,val|fn])方法</em><ul><li>用于设置或获取元素CSS样式</li><li>格式1:<code>DOM元素.css(&quot;样式名称&quot;, &quot;值&quot;);</code> </li><li>格式2:<code>DOM元素.css({&quot;样式名称1&quot;:&quot;值1&quot;,&quot;样式名称2&quot;:&quot;值2&quot;});</code> </li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">    &lt;script&gt;</span><br><span class="line">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="comment">// 1.单个样式设置</span></span><br><span class="line"><span class="comment">//                $("div").css("width", "100px");</span></span><br><span class="line"><span class="comment">//                $("div").css("height", "100px");</span></span><br><span class="line"><span class="comment">//                $("div").css("background", "red");</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 2.链式设置样式</span></span><br><span class="line"><span class="comment">//                $("div").css("width", "100px").css("height", "100px").css("background", "red");</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 3.传入对象一次性设置样式</span></span><br><span class="line">                $(<span class="string">"div"</span>).css(&#123;</span><br><span class="line">                   <span class="string">"width"</span>:<span class="string">"100px"</span>,</span><br><span class="line">                    <span class="string">"height"</span>:<span class="string">"100px"</span>,</span><br><span class="line">                    <span class="string">"background"</span>:<span class="string">"blue"</span></span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 4.获取指定样式的值</span></span><br><span class="line">                <span class="built_in">console</span>.log($(<span class="string">"div"</span>).css(<span class="string">"width"</span>));</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="jQuery操作元素尺寸"><a href="#jQuery操作元素尺寸" class="headerlink" title="jQuery操作元素尺寸"></a>jQuery操作元素尺寸</h3><ul><li><em>width([val|fn])方法</em><ul><li>设置或获取元素宽度(相当于获取width属性值)</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>11-jQuery操作位置和尺寸<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        *&#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.father</span>&#123;</span></span><br><span class="line">            width: 250px;</span><br><span class="line">            height: 250px;</span><br><span class="line">            background-color: red;</span><br><span class="line">            margin-left: 50px;</span><br><span class="line">            position: relative;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.son</span>&#123;</span></span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            background-color: blue;</span><br><span class="line">            position: absolute;</span><br><span class="line">            left: 50px;</span><br><span class="line">            top: 50px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"代码/js/jquery-1.12.4.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"button"</span>).eq(<span class="number">0</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 1.获取元素宽度(不包括padding和border)</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//                alert($('.son').width());</span></span></span><br><span class="line">            &#125;);</span><br><span class="line"><span class="javascript">            $(<span class="string">"button"</span>).eq(<span class="number">1</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 2.设置元素宽度(不包括padding和border)</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//                $(".son").width("50px");</span></span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"father"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"son"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>获取<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>设置<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>height([val|fn])方法</strong><ul><li>设置或获取元素宽度(相当于获取height属性值)</li><li>用上面按钮代码自己写,工作后都得靠自己,多锻炼自学能力(如何查看文档,如何编写测试案例等)</li></ul></li><li><strong>innerHeight()/innerWidth()</strong><ul><li>用上面按钮代码自己写,工作后都得靠自己,多锻炼自学能力(如何查看文档,如何编写测试案例等)</li></ul></li><li><strong>outerHeight/outerWidth()</strong><ul><li>用上面按钮代码自己写,工作后都得靠自己,多锻炼自学能力(如何查看文档,如何编写测试案例等)</li></ul></li></ul><hr><h3 id="jQuery操作元素位置"><a href="#jQuery操作元素位置" class="headerlink" title="jQuery操作元素位置"></a>jQuery操作元素位置</h3><ul><li><em>offset([coordinates])</em><ul><li>获取或设置元素相对窗口的偏移位</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">"button"</span>).eq(<span class="number">0</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 1.获取距离窗口的偏移位(从border开始)</span></span></span><br><span class="line"><span class="javascript">            alert($(<span class="string">'.son'</span>).offset().left); <span class="comment">// 100</span></span></span><br><span class="line">        &#125;);</span><br><span class="line"><span class="javascript">        $(<span class="string">"button"</span>).eq(<span class="number">1</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 2.设置距离窗口的偏移位</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">'.son'</span>).offset(&#123;<span class="attr">left</span>:<span class="number">10</span>, <span class="attr">top</span>:<span class="number">10</span>&#125;);</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><em>position()</em><ul><li>获取相对于它最近的具有相对位置(position:relative或position:absolute)的父级元素的距离</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">"button"</span>).eq(<span class="number">0</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 1.获取匹配元素相对父元素的偏移</span></span></span><br><span class="line"><span class="javascript">            alert($(<span class="string">'.son'</span>).position().left);<span class="comment">// 50</span></span></span><br><span class="line">        &#125;);</span><br><span class="line"><span class="javascript">        $(<span class="string">"button"</span>).eq(<span class="number">1</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 2.无效,不能设置相对定位元素的偏移位</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">'.son'</span>).position(&#123;<span class="attr">left</span>:<span class="number">10</span>, <span class="attr">top</span>:<span class="number">10</span>&#125;)</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><em>scrollTop([val])</em><ul><li>设置或获取匹配元素相对滚动条顶部的偏移。</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>12-jQuery操作位置<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        *&#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.scroll</span>&#123;</span></span><br><span class="line">            margin-top: 100px;</span><br><span class="line">            margin-left: 100px;</span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 200px;</span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#000</span>;</span></span><br><span class="line">            overflow: auto;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"代码/js/jquery-1.12.4.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"button"</span>).eq(<span class="number">0</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 7.获取匹配元素相对滚动条顶部的偏移</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//                alert($('.scroll').scrollTop());</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//                alert($('html').scrollTop());</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 兼容所有浏览器写法</span></span></span><br><span class="line"><span class="javascript">                alert($(<span class="string">'html'</span>).scrollTop()+$(<span class="string">'body'</span>).scrollTop());</span></span><br><span class="line">            &#125;);</span><br><span class="line"><span class="javascript">            $(<span class="string">"button"</span>).eq(<span class="number">1</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 8.设置匹配元素相对滚动条顶部的偏移</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//                $('.scroll').scrollTop(100);</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//                $('html').scrollTop(100);</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 兼容所有浏览器写法</span></span></span><br><span class="line"><span class="javascript">                $(<span class="string">'html,body'</span>).scrollTop(<span class="number">100</span>);</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"scroll"</span>&gt;</span></span><br><span class="line">    我是文字我是文字我是文字我是文字我是文字我是文字我是文字我是文字我是文字我是文字我是文字我是文字我是文字我是文字我是文字我是文字我是文字我是文字我是文字我是文字我是文字我是文字我是文字我是文字我是文字我是文字我是文字我是文字我是文字我是文字我是文字我是文字我是文字我是文字我是文字我是文字我是文字我是文字我是文字我是文字我是文字我是文字我是文字我是文字我是文字我是文字我是文字我是文字我是文字我是文字我是文字我是文字</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>获取<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>设置<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><em>scrollLeft([val])</em><ul><li>用上面按钮代码自己写,工作后都得靠自己,多锻炼自学能力(如何查看文档,如何编写测试案例等)</li></ul></li></ul><h1 id="other"><a href="#other" class="headerlink" title="other"></a>other</h1><h2 id="jquery中val-和value区分"><a href="#jquery中val-和value区分" class="headerlink" title="jquery中val()和value区分"></a>jquery中val()和value区分</h2><p>1.jQuery中的val()方法<strong>用来获取或设定输入框或选择框的值。</strong></p><p><input id="text" type="text"></p><p>获取值：$(“##text”).val()</p><p>设置值：$(“##text”).val(“value”)</p><p>也可以来获取或设置select标签的值</p><select id="select">  <option>select1</option>  <option>select2</option></select><p>获取值：$(“##select”).val()</p><p>设置值：$(“##select”).val(“select1”)</p><p>2.jQuery中没有value方法，可以通过attr方法获取或设置标签中的value属性的值</p><div id="value" value="div'><p>获取值：$(“##value”).attr(“value”);</p><p>设定值：$(“##value”).attr(“value”,”设定值”);<br>3.在js中可以直接通过对象.属性获取属性值：</p><figure class=" highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"text"</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> type = <span class="built_in">document</span>.getElementById(<span class="string">"text"</span>).type;</span></span><br><span class="line">alert(type)；</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table><h2 id="prop-和attr"><a href="#prop-和attr" class="headerlink" title="prop 和attr"></a>prop 和attr</h2><p> prop  对于HTML元素本身就带有的固有属性   attr  对于HTML元素我们自定义的加在标签中的属性</p><ul><li>对于HTML元素本身就带有的固有属性，在处理时，使用prop方法。</li><li>对于HTML元素我们自己自定义的DOM属性，在处理时，使用attr方法。</li></ul><h2 id="this和-this"><a href="#this和-this" class="headerlink" title="this和$(this)"></a>this和$(this)</h2><p>this其实是一个Html 元素。<br>$this 只是个变量名，加$是为说明其是个jquery对象。<br> 而$(this)是个转换，将this表示的dom对象转为jquery对象，这样就可以使用jquery提供的方法操作。</p><h2 id="获得内容-text-、html-以及-val"><a href="#获得内容-text-、html-以及-val" class="headerlink" title="获得内容 - text()、html() 以及 val()"></a>获得内容 - text()、html() 以及 val()</h2><p>三个简单实用的用于 DOM 操作的 jQuery 方法：</p><ul><li>text() - 设置或返回所选元素的文本内容</li><li>html() - 设置或返回所选元素的内容（包括 HTML 标记）</li><li>val() - 设置或返回表单字段的值</li></ul><h2 id="trigger-方法触发被选元素的指定事件类型。"><a href="#trigger-方法触发被选元素的指定事件类型。" class="headerlink" title="trigger() 方法触发被选元素的指定事件类型。"></a>trigger() 方法触发被选元素的指定事件类型。</h2><h4 id="触发事件"><a href="#触发事件" class="headerlink" title="触发事件"></a>触发事件</h4><p>规定被选元素要触发的事件。</p><h6 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).trigger(event,[param1,param2,...])</span><br></pre></td></tr></table></figure><h2 id="jQuery-eq-选择器"><a href="#jQuery-eq-选择器" class="headerlink" title="jQuery :eq() 选择器"></a>jQuery :eq() 选择器</h2><h3 id="定义和用法"><a href="#定义和用法" class="headerlink" title="定义和用法"></a>定义和用法</h3><p>:eq() 选择器选取带有指定 index 值的元素。</p><p>index 值从 0 开始，所有第一个元素的 index 值是 0（不是 1）。</p><p>经常与其他元素/选择器一起使用，来选择指定的组中特定序号的元素（如上面的例子）。</p><h2 id="unbind-方法移除被选元素的事件处理程序"><a href="#unbind-方法移除被选元素的事件处理程序" class="headerlink" title="unbind() 方法移除被选元素的事件处理程序"></a>unbind() 方法移除被选元素的事件处理程序</h2><p>该方法能够移除所有的或被选的事件处理程序，或者当事件发生时终止指定函数的运行。</p><p>ubind() 适用于任何通过 jQuery 附加的事件处理程序。</p><h2 id="js能对同一html的dom对象增加多个click、change事件，注意在不需要时解绑一些函数"><a href="#js能对同一html的dom对象增加多个click、change事件，注意在不需要时解绑一些函数" class="headerlink" title="js能对同一html的dom对象增加多个click、change事件，注意在不需要时解绑一些函数"></a>js能对同一html的dom对象增加多个click、change事件，注意在不需要时解绑一些函数</h2></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;&lt;h1 id=&quot;jQuery入口函数&quot;&gt;&lt;a href=&quot;#jQuery入口函数&quot; class=&quot;headerlink&quot; title=&quot;jQuery入口函数&quot;&gt;&lt;/a&gt;jQuery入口函数&lt;/h1&gt;&lt;h2 id=&quot;jQuery与JavaScript加载模式对比&quot;&gt;&lt;a href=&quot;#jQuery与JavaScript加载模式对比&quot; class=&quot;headerlink&quot; title=&quot;jQuery与JavaScript加载模式对比&quot;&gt;&lt;/a&gt;jQuery与JavaScript加载模式对比&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;多个window.onload只会执行一次, 后面的会覆盖前面的&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.onload = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            alert(&lt;span class=&quot;string&quot;&gt;&quot;hello lnj1&quot;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// 不会显示&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.onload = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            alert(&lt;span class=&quot;string&quot;&gt;&quot;hello lnj2&quot;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// 会显示&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;&lt;span class=&quot;regexp&quot;&gt;/script&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="note-js" scheme="https://codeofli.github.io/categories/note-js/"/>
    
    
      <category term="js" scheme="https://codeofli.github.io/tags/js/"/>
    
      <category term="前端" scheme="https://codeofli.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>javaScript</title>
    <link href="https://codeofli.github.io/2019/11/js-note/javaScript/javaScript/"/>
    <id>https://codeofli.github.io/2019/11/js-note/javaScript/javaScript/</id>
    <published>2019-11-12T02:18:21.000Z</published>
    <updated>2019-11-12T02:25:01.213Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage"></a>localStorage</h1><p>只读的<code>localStorage</code> 属性允许你访问一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document" target="_blank" rel="noopener"><code>Document</code></a> 源（origin）的对象 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Storage" target="_blank" rel="noopener"><code>Storage</code></a>；其存储的数据能在跨浏览器会话保留。<code>localStorage</code> 类似 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/sessionStorage" target="_blank" rel="noopener"><code>sessionStorage</code></a>，但其区别在于：存储在 <code>localStorage</code> 的数据可以长期保留；而当页面会话结束——也就是说，当页面被关闭时，存储在 <code>sessionStorage</code> 的数据会被清除 。</p><a id="more"></a><h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><p>JavaScript负责页面中的的行为。</p><p>它是一门运行在浏览器端的脚本语言。</p><h2 id="JS的编写的位置"><a href="#JS的编写的位置" class="headerlink" title="JS的编写的位置"></a>JS的编写的位置</h2><p>1.可以编写到标签的指定属性中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"alert('hello');"</span>&gt;</span>我是按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:alert('aaa');"</span>&gt;</span>超链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.可以编写到script标签中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="comment">//编写js代码</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.可以将代码编写到外部的js文件中，然后通过标签将其引入</p><p>script标签一旦用于引入外部文件了，就不能在编写代码了，即使编写了浏览器也会忽略  ,如果需要则可以在创建一个新的script标签用于编写内部代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"文件路径"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>输出语句</p><p>`alert(“要输出的内容”);</p><p>该语句会在浏览器窗口中弹出一个警告框</p><p>`document.write(“要输出的内容”);</p><p>该内容将会被写到body标签中，并在页面中显示</p><p>`console.log(“要输出的内容”);</p><p>该内容会被写到开发者工具的控制台中</p><h2 id="基本的语法"><a href="#基本的语法" class="headerlink" title="基本的语法"></a>基本的语法</h2><p>js函数声明不需要；分号，但是赋值语句要加；分号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function functionName(arg0,arg1,arg2)&#123;</span><br><span class="line">//函数声明</span><br><span class="line">&#125;</span><br><span class="line">var functionName=function(arg0,arg1,arg2)&#123;</span><br><span class="line">//函数表达式</span><br><span class="line">&#125;;(注意分号)</span><br></pre></td></tr></table></figure><p>注释</p><p>单行注释<br>//注释内容</p><p>多行注释<br>/*<br>注释内容<br>*/</p><p>JS严格区分大小写    </p><p>JS中每条语句以分号(;)结尾如果不写分号，浏览器会自动添加，但是会消耗一些系统资源，  而且有些时候，浏览器会加错分号，所以在开发中分号必须写</p><p>JS中会自动忽略多个空格和换行，所以我们可以利用空格和换行对代码进行格式化。</p><h2 id="字面量和变量"><a href="#字面量和变量" class="headerlink" title="字面量和变量"></a>字面量和变量</h2><h3 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h3><p>字面量实际上就是一些固定的值，比如 1 2 3 4 true false null NaN “hello”<br><strong>字面量都是不可以改变的。</strong></p><p>由于字面量不是很方便使用，所以在JS中很少直接使用字面量</p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>变量可以用来保存字面量，并且可以保存任意的字面量</p><p>一般都是通过变量来使用字面量，而不直接使用字面量，而且也可以通过变量来对字面量进行一个描述</p><p>声明变量</p><p>使用var关键字来声明一个变量<br>var a;<br>var b;<br>var c;</p><p>为变量赋值<br>a = 1;<br>b = 2;<br>c = 3;</p><p>声明和赋值同时进行 *****<br>var d = 456;<br>var e = 789;</p><p>标识符</p><p>在JS中所有的可以自主命名的内容，都可以认为是一个标识符，<br>是标识符就应该遵守标识符的规范。</p><p>比如：变量名、函数名、属性名</p><p>规范：<br>1.标识符中可以含有字母、数字、_、$<br>2.标识符不能以数字开头<br>3.标识符不能是JS中的关键字和保留字<br>4.标识符一般采用驼峰命名法<br>xxxYyyZzz</p><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p> JS中一共分成六种数据类型 基本数据类型+object<br> String 字符串<br> Number 数值<br> Boolean 布尔值<br> Null 空值<br> Undefined 未定义<br> Object 对象</p><p> 其中基本数据类型有    5个</p><p>1.String 字符串<br>JS中的字符串需要使用引号引起来双引号或单引号都行<br> 在字符串中使用\作为转义字符<br>&#39;  ==&gt; ‘<br>&quot;  ==&gt; “<br>\n  ==&gt; 换行<br>\t  ==&gt; 制表符<br>\  ==&gt; \    </p><p> 使用typeof运算符检查字符串时，会返回”string”    </p><p>2.Number 数值<br> <strong>JS中所有的整数和浮点数都是Number类型</strong></p><p>最大能表示的值：Number.MAX_VALUE=    1.7976931348623157e+308</p><p> 特殊的数字：能赋值给变量<br>    Infinity 正无穷 a = Infinity ,能赋值<br>    -Infinity 负无穷<br>    NaN 非法数字（Not A Number）<br> 其他进制的数字的表示：<br>0b 开头表示二进制，但是不是所有的浏览器都支持<br>0 开头表示八进制<br>0x 开头表示十六进制</p><p> 使用typeof检查一个Number类型的数据时，会返回”number”<br>（包括NaN 和 Infinity）</p><p>3.Boolean 布尔值<br> 布尔值主要用来进行逻辑判断，布尔值只有两个<br> true 逻辑的真<br> false 逻辑的假<br> 使用typeof检查一个布尔值时，会返回”boolean”    </p><p>4.Null 空值<br> 空值专门用来表示为空的对象，Null类型的值只有一个<br> null<br> 使用typeof检查一个Null类型的值时会返回”object”</p><p> 5.Undefined 未定义<br> <strong>如果声明一个变量但是没有为变量赋值此时变量的值就是undefined</strong><br> 该类型的值只有一个 undefined<br> 使用typeof检查一个Undefined类型的值时，会返回”undefined”</p><p> <strong>引用数据类型</strong><br> Object 对象</p><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p> 类型转换就是指将其他的数据类型，转换为String Number 或 Boolean</p><h3 id="转换为String"><a href="#转换为String" class="headerlink" title="转换为String"></a>转换为String</h3><p> 方式一（强制类型转换）：<br> <strong>调用被转换数据的toString()方法</strong><br> 例子：<br>var a = 123;<br>a = a.toString();<br> 注意：<strong>这个方法不适用于null和undefined</strong><br>由于这两个类型的数据中没有方法，所以调用toString()时会报错</p><p> 方式二（强制类型转换）：<br> <strong>调用String()函数</strong><br> 例子：<br>var a = 123;<br>a = String(a);<br> 原理：<strong>对于Number Boolean String都会调用他们的toString()方法来将其转换为字符串，对于null值，直接转换为字符串”null”。对于undefined直接转换为字符串”undefined”</strong></p><p> 方式三（隐式的类型转换）: <strong>***<br> **为任意的数据类型 +””</strong><br> 例子：<br>var a = true;<br>a = a + “”;<br> 原理：和String()函数一样    </p><h3 id="转换为Number"><a href="#转换为Number" class="headerlink" title="转换为Number"></a>转换为Number</h3><p> 方式一（强制类型转换）：<br> <strong>调用Number()函数</strong><br> 例子：<br>var s = “123”;<br>s = Number(s);<br> 转换的情况：<br>1.字符串 &gt; 数字<br>     如果字符串是一个合法的数字，则直接转换为对应的数字<br>     如果字符串是一个非法的数字，则转换为NaN<br>     如果是一个空串或纯空格的字符串，则转换为0<br>2.布尔值 &gt; 数字<br>     true转换为1<br>     false转换为0<br>3.空值 &gt; 数字<br>     null转换为0<br>4.未定义 &gt; 数字<br>     undefined 转换为NaN</p><p> 方式二（强制类型转换）：<br> 调用parseInt()或parseFloat()<br> 这两个函数专门用来将一个字符串转换为数字的</p><p>如果对非String使用parseInt()或parseFloat()，它会<strong>先将其转换为String</strong>然后在操作 parseInt()<br> 可以将<strong>一个字符串中的有效的整数位</strong>提取出来，并转换为Number<br> 例子：<br>    var a = “123.456px”;<br>    a = parseInt(a); //123<br> 如果需要可以在parseInt()中指定一个第二个参数，来指定进制    </p><p> parseFloat()<br> 可以将一个<strong>字符串中的有效的小数位</strong>提取出来，并转换为Number<br> 例子：<br>    var a = “123.456px”;<br>    a = parseFloat(a); //123.456</p><p> 方式三（隐式的类型转换）：<br> 使用一元的+来进行隐式的类型转换<br> 例子：<br>var a = “123”;<br>a = +a;</p><p> <strong>原理：和Number()函数一样</strong>    </p><h3 id="转换为布尔值"><a href="#转换为布尔值" class="headerlink" title="转换为布尔值"></a>转换为布尔值</h3><p> 方式一（强制类型转换）：<br> 使用Boolean()函数<br> 例子：<br>var s = “false”;<br>s = Boolean(s); //true<br> 转换的情况<br>字符串 &gt; 布尔<br>     除了空串其余全是true</p><p>数值 &gt; 布尔<br>     除了0和NaN其余的全是true</p><p>null、undefined &gt; 布尔<br>     都是false</p><p>对象 &gt; 布尔<br>     都是true</p><p> 方式二（隐式类型转换）：<br> 为任意的数据类型做两次非运算，即可将其转换为布尔值<br> 例子：<br>var a = “hello”;<br>a = !!a; //true</p><p> 运算符<br> 运算符也称为操作符<br> 通过运算符可以对一个或多个值进行运算或操作<br> typeof运算符<br> 用来检查一个变量的数据类型<br> 语法：typeof 变量<br> 它会返回一个用于描述类型的字符串作为结果</p><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h2 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h2><p>+对两个值进行加法运算并返回结果<br>-对两个值进行减法运算并返回结果</p><p>*对两个值进行乘法运算并返回结果<br>/    对两个值进行除法运算并返回结果<br>%    对两个值进行取余运算并返回结果</p><p> <strong>除了加法以外，对非Number类型的值进行运算时，都会先转换为Number然后在做运算。</strong><br> 而做加法运算时，如果是两个字符串进行相加，则会做拼串操作，将两个字符连接为一个字符串。<br> 任何值和字符串做加法，都会先转换为字符串，然后再拼串</p><h2 id="一元运算符"><a href="#一元运算符" class="headerlink" title="一元运算符"></a>一元运算符</h2><p> 一元运算符只需要一个操作数<br> 一元的+<br> 就是正号，不会对值产生任何影响，但是可以将一个非数字转换为数字<br> 例子：<br>var a = true;<br>a = +a;</p><p> 一元的<br> 就是负号，可以对一个数字进行符号位取反<br> 例子：<br>var a = 10;<br>a = a;</p><p> 自增<br> 自增可以使变量在原值的基础上自增1<br> 自增使用 ++<br> 自增可以使用 前++（++a）后++(a++)<br> 无论是++a 还是 a++都会立即使原变量自增1<br>不同的是++a和a++的值是不同的，<br>    ++a的值是变量的新值（自增后的值）<br>    a++的值是变量的原值（自增前的值）</p><p> 自减<br> 自减可以使变量在原值的基础上自减1<br> 自减使用<br> 自减可以使用 前（a）后(a)<br> 无论是a 还是 a都会立即使原变量自减1<br>不同的是a和a的值是不同的，<br>    a的值是变量的新值（自减后的值）<br>    a的值是变量的原值（自减前的值）</p><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>!<br>     非运算可以对一个布尔值进行取反，true变false false边true<br>     当对非布尔值使用!时，会先将其转换为布尔值然后再取反<br>     我们可以利用!来将其他的数据类型转换为布尔值</p><p>&amp;&amp;<br>     &amp;&amp;可以对符号两侧的值进行与运算<br>     只有两端的值都为true时，才会返回true。只要有一个false就会返回false。<br>     与是一个短路的与，如果第一个值是false，则不再检查第二个值<br>     对于非布尔值，它会将其转换为布尔值然后做运算，并返回原值<br>     规则：<br>            1.如果第一个值为false，则返回第一个值<br>            2.如果第一个值为true，则返回第二个值</p><p>||<br>     ||可以对符号两侧的值进行或运算<br>     只有两端都是false时，才会返回false。只要有一个true，就会返回true。<br>     或是一个短路的或，如果第一个值是true，则不再检查第二个值<br>     对于非布尔值，它会将其转换为布尔值然后做运算，并返回原值<br>     规则：<br>            1.如果第一个值为true，则返回第一个值<br>            2.如果第一个值为false，则返回第二个值</p><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><p>=<br>     可以将符号右侧的值赋值给左侧变量</p><p>+=<br>     a += 5 相当于 a = a+5<br>     var str = “hello”;  str += “world”;</p><p>=<br>     a = 5  相当于 a = a5</p><p><em>=<br>     a *= 5 相当于 a = a</em>5</p><p>/=<br>     a /= 5 相当于 a = a/5    </p><p>%=<br>     a %= 5 相当于 a = a%5    </p><h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><p> 关系运算符用来比较两个值之间的大小关系的<br>    &gt;<br>    &gt;=<br>    &lt;<br>    &lt;=<br> 关系运算符的规则和数学中一致，用来比较两个值之间的关系，<br>    如果关系成立则返回true，关系不成立则返回false。<br> 如果比较的两个值是非数值，会将其转换为Number然后再比较。<br> 如果比较的两个值都是字符串，此时会比较字符串的Unicode编码，而不会转换为Number。</p><h2 id="相等运算符"><a href="#相等运算符" class="headerlink" title="相等运算符"></a>相等运算符</h2><p> 相等，判断左右两个值是否相等，如果相等返回true，如果不等返回false<br> 相等会自动对两个值进行类型转换，如果<strong>对不同的类型进行比较，会将其转换为相同的类型然后再比较</strong>，转换后相等它也会返回true，null == undifined</p><p>!=<br>     不等，判断左右两个值是否不等，如果不等则返回true，如果相等则返回false<br>     不等也会做自动的类型转换。</p><p><strong>===</strong><br>     <strong>全等</strong>，判断左右两个值是否全等，它和相等类似，只不过它不会进行自动的类型转换，<br>        如果两个值的类型不同，则直接返回false</p><p>!==<br>     <strong>不全等</strong>，和不等类似，但是它不会进行自动的类型转换，如果两个值的类型不同，它会直接返回true</p><p>特殊的值：<br>     null和undefined<br>         由于undefined衍生自null，所以<strong>null == undefined</strong> 会返回true。<br>            但是 null === undefined 会返回false。<br><strong>NaN</strong><br>     NaN不与任何值相等，报告它自身 NaN == NaN //false</p><p> 判断一个值是否是NaN<br>     使用isNaN()函数</p><h2 id="三元运算符："><a href="#三元运算符：" class="headerlink" title="三元运算符："></a>三元运算符：</h2><p>?:<br>     语法：条件表达式?语句1:语句2;<br>     执行流程：<br>        先对条件表达式求值判断，<br>            如果判断结果为true，则执行语句1，并返回执行结果<br>            如果判断结果为false，则执行语句2，并返回执行结果</p><p>优先级：<br> 和数学中一样，JS中的运算符也是具有优先级的，<br>    比如 先乘除 后加减 先与 后或<br> 具体的优先级可以参考优先级的表格，在表格中越靠上的优先级越高，<br>    优先级越高的越优先计算，优先级相同的，从左往右计算。<br> 优先级不需要记忆，如果越到拿不准的，使用()来改变优先级。</p><h1 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h1><p> 程序都是自上向下的顺序执行的，<br>通过流程控制语句可以改变程序执行的顺序，或者反复的执行某一段的程序。<br> 分类：<br>1.条件判断语句<br>2.条件分支语句<br>3.循环语句</p><p>条件判断语句<br> 条件判断语句也称为if语句<br> 语法一：<br>    if(条件表达式){<br>        语句…<br>    }</p><pre><code>执行流程：   if语句执行时，会先对条件表达式进行求值判断，       如果值为true，则执行if后的语句       如果值为false，则不执行</code></pre><p> 语法二：<br>    if(条件表达式){<br>        语句…<br>    }else{<br>        语句…<br>    }</p><pre><code>执行流程：   if...else语句执行时，会对条件表达式进行求值判断，       如果值为true，则执行if后的语句       如果值为false，则执行else后的语句</code></pre><p> 语法三：<br>    if(条件表达式){<br>        语句…<br>    }else if(条件表达式){<br>        语句…<br>    }else if(条件表达式){<br>        语句…<br>    }else if(条件表达式){<br>        语句…<br>    }else{<br>        语句…<br>    }</p><pre><code>执行流程    if...else if...else语句执行时，会自上至下依次对条件表达式进行求值判断，       如果判断结果为true，则执行当前if后的语句，执行完成后语句结束。       如果判断结果为false，则继续向下判断，直到找到为true的为止。       如果所有的条件表达式都是false，则执行else后的语句</code></pre><p>1.条件分支语句<br>switch语句<br>语法:<br>switch(条件表达式){<br>    case 表达式:<br>        语句…<br>        break;<br>    case 表达式:<br>        语句…<br>        break;<br>    case 表达式:<br>        语句…<br>        break;<br>    default:<br>        语句…<br>        break;<br>}</p><p>执行流程：<br> switch…case…语句在执行时，会依次将case后的表达式的值和switch后的表达式的值进行全等比较，<br>    如果比较结果为false，则继续向下比较。如果比较结果为true，则从当前case处开始向下执行代码。<br>    如果所有的case判断结果都为false，则从default处开始执行代码。</p><p>2.循环语句<br>通过循环语句可以反复执行某些语句多次<br>while循环<br> 语法：<br>    while(条件表达式){<br>        语句…<br>    }</p><p> 执行流程：<br>    while语句在执行时，会先对条件表达式进行求值判断，<br>        如果判断结果为false，则终止循环<br>        如果判断结果为true，则执行循环体<br>        循环体执行完毕，继续对条件表达式进行求值判断，依此类推</p><p>do…while循环<br> 语法:<br>    do{<br>        语句…<br>    }while(条件表达式)</p><p> 执行流程<br>    do…while在执行时，会先执行do后的循环体，然后在对条件表达式进行判断，<br>        如果判断判断结果为false，则终止循环。<br>        如果判断结果为true，则继续执行循环体，依此类推</p><p> 和while的区别：<br>    while：先判断后执行<br>    do…while: 先执行后判断<br>     do…while可以确保循环体至少执行一次。</p><p>for循环<br> 语法：<br>    for(①初始化表达式 ; ②条件表达式 ; ④更新表达式){<br>        ③语句…<br>    }<br> 执行流程：<br>    首先执行①初始化表达式，初始化一个变量，<br>    然后对②条件表达式进行求值判断，如果为false则终止循环<br>    如果判断结果为true，则执行③循环体<br>    循环体执行完毕，执行④更新表达式，对变量进行更新。<br>    更新表达式执行完毕重复②</p><p>死循环<br>while(true){</p><p>}</p><p>for(;;){</p><p>}</p><h1 id="对象（Object）"><a href="#对象（Object）" class="headerlink" title="对象（Object）"></a>对象（Object）</h1><p>对象是JS中的引用数据类型<br><strong>对象是一种复合数据类型，在对象中可以保存多个不同数据类型的属性</strong><br>使用typeof检查一个对象时，会返回object</p><h2 id="对象的分类："><a href="#对象的分类：" class="headerlink" title="对象的分类："></a>对象的分类：</h2><p>1.内建对象<br>    - 由ES标准中定义的对象，在任何的ES的实现中都可以使用<br>    - 比如：Math String Number Boolean Function Object….</p><p>2.宿主对象<br>    - 由JS的运行环境提供的对象，目前来讲主要指由浏览器提供的对象<br>    - 比如 BOM DOM</p><p>3.自定义对象</p><pre><code>- 由开发人员自己创建的对象</code></pre><p>创建对象<br> 方式一：<br>     var obj = new Object();<br> 方式二：<br>     var obj = {};</p><p><strong>向对象中添加属性</strong><br> 语法：<br>    对象.属性名 = 属性值;<br>    <strong>对象[“属性名”] = 属性值;</strong>    //这种方式能够使用特殊的属性名</p><p> <strong>对象的属性名没有任何要求，不需要遵守标识符的规范，但是在开发中，尽量按照标识符的要求去写。</strong><br>属性值也可以任意的数据类型。</p><p>读取对象中的属性<br> 语法：<br>    对象.属性名<br>    对象[“属性名”] //“属性名”可以使字符串常量，也可以是字符串变量<br> 如果读取一个对象中没有的属性，它不会报错，而是返回一个undefined</p><p><strong>删除对象中的属性</strong><br> 语法：<br>    delete 对象.属性名<br>    delete 对象[“属性名”]</p><h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h2><p><strong>使用in检查对象中是否含有指定属性</strong><br> 语法：”属性名” in 对象<br>     如果在对象中含有该属性，则返回true<br>        如果没有则返回false</p><pre><code>循环遍历对象自身的和继承的可枚举属性(不含Symbol属性).</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="string">'0'</span>:<span class="string">'a'</span>,<span class="string">'1'</span>:<span class="string">'b'</span>,<span class="string">'2'</span>:<span class="string">'c'</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> obj) &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(i,<span class="string">":"</span>,obj[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​<br><strong>使用对象字面量，在创建对象时直接向对象中添加属性</strong><br>语法：<br>​    var obj = {<br>​                    属性名:属性值,<br>​                    属性名:属性值,<br>​                    属性名:属性值,<br>​                    属性名:属性值<br>​            }<br>​<br>基本数据类型和引用数据类型<br> 基本数据类型<br>​    String Number Boolean Null Undefined<br> 引用数据类型<br>​    Object<br> <strong>基本数据类型的数据，变量是直接保存的它的值。</strong><br>​    变量与变量之间是互相独立的，修改一个变量不会影响其他的变量。<br> <strong>引用数据类型的数据，变量是保存的对象的引用（内存地址）。</strong><br>​    如果多个变量指向的是同一个对象，此时修改一个变量的属性，会影响其他的变量。<br> 比较两个变量时，对于基本数据类型，比较的就是值，<br>​    对于引用数据类型比较的是地址，地址相同才相同<br>​    </p><h2 id="函数（Function）"><a href="#函数（Function）" class="headerlink" title="函数（Function）"></a>函数（Function）</h2><p><strong>函数也是一个对象，也具有普通对象的功能（能有属性）</strong><br>函数中可以封装一些代码，在需要的时候可以去调用函数来执行这些代码<br>使用typeof检查一个函数时会返回function<br>创建函数<br> 函数声明<br>    function 函数名([形参1,形参2…形参N]){<br>        语句…<br>    }</p><p> 函数表达式<br>    var 函数名 = function([形参1,形参2…形参N]){<br>        语句…<br>    };</p><p>调用函数<br> 语法：函数对象([实参1,实参2…实参N]);<br>    fun() sum() alert() Number() parseInt()<br> 当我们调用函数时，函数中封装的代码会按照编写的顺序执行</p><p><strong>立即执行函数</strong><br>函数定义完，立即被调用，这种函数叫做立即执行函数<br>立即执行函数往往只会执行一次<br>    (function(a,b){<br>    console.log(“a = “+a);<br>    console.log(“b = “+b);<br>    })(123,456);</p><p>遍历对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> v <span class="keyword">in</span> obj)&#123;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">"property：name ="</span>+v+<span class="string">"value="</span>+obj[v]+<span class="string">"&lt;br/&gt;"</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>形参和实参<br> 形参：形式参数<br>     定义函数时，可以在()中定义一个或多个形参，形参之间使用,隔开<br>        定义形参就相当于在函数内声明了对应的变量但是并不赋值，<br>        形参会在调用时才赋值。</p><p> 实参：实际参数<br>     调用函数时，可以在()传递实参，传递的实参会赋值给对应的形参,<br>        调用函数时JS解析器不会检查实参的类型和个数，可以传递任意数据类型的值。<br>        <strong>如果实参的数量大于形参，多余实参将不会赋值，</strong><br>        <strong>如果实参的数量小于形参，则没有对应实参的形参将会赋值undefined</strong></p><p><strong>返回值，就是函数执行的结果。</strong><br> 使用return 来设置函数的返回值。<br> 语法：return 值;<br>     该值就会成为函数的返回值，可以通过一个变量来接收返回值<br> return后边的代码都不会执行，一旦执行到return语句时，函数将会立刻退出。<br> return后可以跟任意类型的值，可以是基本数据类型，也可以是一个对象。<br> <strong>如果return后不跟值，或者是不写return则函数默认返回undefined。</strong><br> break、continue和return<br>     break<br>         退出循环<br>     continue<br>         跳过当次循环<br>     return<br>         退出函数</p><p><strong>参数，函数的实参也可以是任意的数据类型。</strong></p><p><strong>方法（method）</strong><br> 可以将一个函数设置为一个对象的属性，<br>    当一个对象的属性是一个函数时，<br>        我们称这个函数是该对象的方法。<br> 对象.方法名();<br> 函数名()</p><h3 id="函数的属性和方法"><a href="#函数的属性和方法" class="headerlink" title="函数的属性和方法"></a>函数的属性和方法</h3><p>call()<br>apply()<br> <strong>这两个方法都是函数对象的方法需要通过函数对象来调用</strong><br> 通过两个方法可以直接调用函数，并且<strong>可以通过第一个实参来指定函数中this</strong><br> 不同的是call是直接传递函数的实参而apply需要将实参封装到一个数组中传递<br><strong>arguments</strong><br> arguments和this类似，都是函数中的隐含的参数<br> arguments是一个类数组元素，它用来封装函数执行过程中的实参<br>    所以即使不定义形参，也可以通过arguments来使用实参<br> <strong>arguments中有一个属性callee表示当前执行的函数对象</strong></p><p>this（调用函数的那个对象）<br> this是函数的上下文对象，根据函数的调用方式不同会执向不同的对象<br>    1.以函数的形式调用时，this是window<br>    2.以方法的形式调用时，this是调用方法的对象<br>    3.以构造函数的形式调用时，this是新建的那个对象<br>    4.使用call和apply调用时，this是指定的那个对象<br>    5.在全局作用域中this代表window</p><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>作用域简单来说就是一个变量的作用范围。<br>在JS中作用域分成两种：</p><p>1.全局作用域</p><p>​     直接在script标签中编写的代码都运行在全局作用域中<br>​     <strong>全局作用域在打开页面时创建，在页面关闭时销毁。</strong><br>​     全局作用域中有一个全局对象window，window对象由浏览器提供，<br>​        可以在页面中直接使用，它代表的是整个的浏览器的窗口。<br>​     <strong>在全局作用域中创建的变量都会作为window对象的属性保存</strong><br>​        在全局作用域中创建的函数都会作为window对象的方法保存<br>​     在全局作用域中创建的变量和函数可以在页面的任意位置访问。<br>​        在函数作用域中也可以访问到全局作用域的变量。<br>​     尽量不要在全局中创建变量    </p><p>2.函数作用域</p><p>​     函数作用域是函数执行时创建的作用域，每次调用函数都会创建一个新的函数作用域。<br>​     函数作用域在函数执行时创建，在函数执行结束时销毁。<br>​     在函数作用域中创建的变量，不能在全局中访问。<br>​     当在函数作用域中使用一个变量时，它会先在自身作用域中寻找，<br>​        如果找到了则直接使用，如果没有找到则到上一级作用域中寻找，<br>​            如果找到了则使用，找不到则继续向上找，一直会<br>​<br> <strong>变量的声明提前</strong><br>​     在全局作用域中，使用<strong>var关键字声明的变量会在所有的代码执行之前被声明，但是不会赋值。</strong><br>​        所以我们可以在变量声明前使用变量。但是不使用var关键字声明的变量不会被声明提前。<br>​     在函数作用域中，也具有该特性，使用var关键字声明的变量会在函数所有的代码执行前被声明，<br>​        如果没有使用var关键字声明变量，则变量会变成全局变量<br>​<br> <strong>函数的声明提前</strong><br>​     在全局作用域中，使用<strong>函数声明创建的函数（function fun(){}）,会在所有的代码执行之前被创建</strong>，<br>​        也就是我们可以在函数声明前去调用函数，但是使用函数表达式(var fun = function(){})创建的函数没有该特性<br>​     在函数作用域中，使用函数声明创建的函数，会在所有的函数中的代码执行之前就被创建好了。</p><h2 id="this（上下文对象）"><a href="#this（上下文对象）" class="headerlink" title="this（上下文对象）"></a>this（上下文对象）</h2><p>​    </p><p>我们每次调用函数时，解析器都会将一个上下文对象作为隐含的参数传递进函数。<br>使用this来引用上下文对象，根据函数的调用形式不同，this的值也不同。</p><p>指向当前对象</p><p>this的不同的情况：<br>1.以函数的形式调用时，this是window<br>2.以方法的形式调用时，this就是调用方法的对象<br>3.以构造函数的形式调用时，this就是新创建的对象</p><h2 id="4-构造函数"><a href="#4-构造函数" class="headerlink" title="4.构造函数"></a>4.构造函数</h2><p>构造函数是专门用来创建对象的函数<br><strong>一个构造函数我们也可以称为一个类</strong><br>通过一个构造函数创建的对象，我们称该对象时这个构造函数的实例<br>通过同一个构造函数创建的对象，我们称为一类对象<br>构造函数就是一个普通的函数，只是他的调用方式不同，<br>如果直接调用，它就是一个普通函数<br>如果使用new来调用，则它就是一个构造函数</p><p>例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name , age , gender</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造函数的执行流程：<br>1.创建一个新的对象<br>2.将新的对象作为函数的上下文对象（this）<br>3.执行函数中的代码<br>4.将新建的对象返回</p><p><strong>instanceof 用来检查一个对象是否是一个类的实例</strong><br> 语法：对象 instanceof 构造函数<br>     如果该对象时构造函数的实例，则返回true，否则返回false<br>     <strong>Object是所有对象的祖先，所以任何对象和Object做instanceof都会返回true</strong></p><p>枚举对象中的属性<br>for…in<br>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> 属性名 <span class="keyword">in</span> 对象)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>for…in语句的循环体会执行多次，对象中有几个属性就会执行几次，<br>    每次讲一个属性名赋值给我们定义的变量，我们可以通过它来获取对象中的属性</p><h2 id="原型（prototype）"><a href="#原型（prototype）" class="headerlink" title="原型（prototype）"></a>原型（prototype）</h2><p> 创建一个函数以后，<strong>解析器都会默认在函数中添加一个数prototype</strong><br>    prototype属性指向的是一个对象，这个对象我们称为原型对象。<br> 当函数作为构造函数使用，<strong>它所创建的对象中都会有一个隐含的属性执行该原型对象。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这个隐含的属性可以通过对象.__proto__来访问。</span><br></pre></td></tr></table></figure><p><strong>原型对象就相当于一个公共的区域，凡是通过同一个构造函数创建的对象他们通常都可以访问到相同的原型对象。</strong><br>    我们可以将对象中共有的属性和方法统一添加到原型对象中，<br>        这样我们只需要添加一次，就可以使所有的对象都可以使用。<br> 当我们去访问对象的一个属性或调用对象的一个方法时，它会先自身中寻找，<br>    如果在自身中找到了，则直接使用。<br>    如果没有找到，则去原型对象中寻找，如果找到了则使用，<br>    <strong>如果没有找到，则去原型的原型中寻找，</strong>依此类推。直到找到Object的原型为止，Object的原型的原型为null，<br>    如果依然没有找到则返回undefined<br> <strong>hasOwnProperty()</strong><br>     这个方法可以用来检查<strong>对象自身中</strong>是否含有某个属性<br>     语法：对象.hasOwnProperty(“属性名”)</p><h2 id="toString方法"><a href="#toString方法" class="headerlink" title="toString方法"></a>toString方法</h2><p>当我们直接在页面中打印一个对象时，事件上是输出的对象的toString()方法的返回值</p><p>如果我们希望在输出对象时不输出[object Object]，可以为对象添加一个toString()方法    </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改Person原型的toString</span></span><br><span class="line">Person.prototype.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Person[name="</span>+<span class="keyword">this</span>.name+<span class="string">",age="</span>+<span class="keyword">this</span>.age+<span class="string">",gender="</span>+<span class="keyword">this</span>.gender+<span class="string">"]"</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="垃圾回收（GC）"><a href="#垃圾回收（GC）" class="headerlink" title="垃圾回收（GC）"></a>垃圾回收（GC）</h2><p>​     就像人生活的时间长了会产生垃圾一样，程序运行过程中也会产生垃圾<br>​        这些垃圾积攒过多以后，会导致程序运行的速度过慢，<br>​        所以我们需要一个垃圾回收的机制，来处理程序运行过程中产生垃圾<br>​    当一个对象没有任何的变量或属性对它进行引用，此时我们将永远无法操作该对象，<br>​        此时这种对象就是一个垃圾，这种对象过多会占用大量的内存空间，导致程序运行变慢，<br>​        所以这种垃圾必须进行清理。<br>​     在JS中拥有自动的垃圾回收机制，会自动将这些垃圾对象从内存中销毁，<br>​        我们不需要也不能进行垃圾回收的操作<br>​     我们需要做的只是要将不再使用的对象设置null即可</p><h1 id="数组（Array）"><a href="#数组（Array）" class="headerlink" title="数组（Array）"></a>数组（Array）</h1><p> 数组也是一个对象，是一个用来存储数据的对象<br>    和Object类似，但是它的存储效率比普通对象要高<br> 数组中保存的内容我们称为元素<br> 数组使用索引（index）来操作元素<br> 索引指由0开始的整数</p><h2 id="数组的操作："><a href="#数组的操作：" class="headerlink" title="数组的操作："></a>数组的操作：</h2><p> 创建数组<br>     var arr = new Array();<br>     var arr = [];</p><p> 向数组中添加元素<br>     语法；<br>        数组对象[索引] = 值;<br>        arr[0] = 123;<br>        arr[1] = “hello”;</p><p> 创建数组时直接添加元素<br>     语法：<br>        var arr = [元素1,元素2….元素N];<br>         例子：<br>            var arr = [123,”hello”,true,null];</p><p> 获取和修改数组的长度<br>     使用length属性来操作数组的长度<br>     获取长度：<br>        数组.length<br>         length获取到的是数组的最大索引+1<br>         对于连续的数组，length获取到的就是数组中元素的个数<br>     修改数组的长度<br>        数组.length = 新长度<br>             如果修改后的length大于原长度，则多出的部分会空出来<br>             如果修改后的length小于原长度，则原数组中多出的元素会被删除<br>     向数组的最后添加元素<br>        数组[数组.length] = 值;</p><h2 id="数组的方法"><a href="#数组的方法" class="headerlink" title="数组的方法"></a>数组的方法</h2><p> push()<br>     用来向数组的末尾添加一个或多个元素，并返回数组新的长度<br>     语法：数组.push(元素1,元素2,元素N)<br> pop()<br>     用来删除数组的最后一个元素，并返回被删除的元素<br> unshift()<br>     向数组的开头添加一个或多个元素，并返回数组的新的长度<br> shift()<br>     删除数组的开头的一个元素，并返回被删除的元素<br> slice(sart,[end])<br>     可以从一个数组中截取指定的元素<br>     该方法不会影响原数组，而是将截取到的内容封装为一个新的数组并返回<br>     参数：<br>        1.截取开始位置的索引（包括开始位置）<br>        2.截取结束位置的索引（不包括结束位置）<br>             第二个参数可以省略不写，如果不写则一直截取到最后<br>         参数可以传递一个负值，如果是负值，则从后往前数<br> splice()<br>     可以用来删除数组中指定元素，并使用新的元素替换<br>        该方法会将删除的元素封装到新数组中返回<br>     参数：<br>        1.删除开始位置的索引<br>        2.删除的个数<br>        3.三个以后，都是替换的元素，这些元素将会插入到开始位置索引的前边<br>reverse()<br> 可以用来反转一个数组，它会对原数组产生影响<br>concat()<br> 可以连接两个或多个数组，它不会影响原数组，而是新数组作为返回值返回<br>join([splitor])<br> 可以将一个数组转换为一个字符串<br> 参数：<br>    需要一个字符串作为参数，这个字符串将会作为连接符来连接数组中的元素<br>    如果不指定连接符则默认使用,<br>sort()<br> 可以对一个数组中的内容进行排序，默认是按照Unicode编码进行排序<br>    调用以后，会直接修改原数组。<br> 可以自己指定排序的规则，需要一个回调函数作为参数：</p><p>我们可以自己来指定排序的规则<br>我们可以在sort()添加一个回调函数，来指定排序规则，<br>    回调函数中需要定义两个形参,<br>    浏览器将会分别使用数组中的元素作为实参去调用回调函数<br>    使用哪个元素调用不确定，但是肯定的是在数组中a一定在b前边</p><ul><li><p>浏览器会根据回调函数的返回值来决定元素的顺序，<br>  如果返回一个大于0的值，则元素会交换位置<br>  如果返回一个小于0的值，则元素位置不变<br>  如果返回一个0，则认为两个元素相等，也不交换位置</p></li><li><p>如果需要升序排列，则返回 a-b<br>  如果需要降序排列，则返回b-a</p></li></ul><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span><span class="params">(a,b)</span></span>&#123;</span><br><span class="line"><span class="comment">//升序排列</span></span><br><span class="line"><span class="comment">//return a-b;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//降序排列</span></span><br><span class="line"><span class="keyword">return</span> b-a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    </p><h2 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h2><p> 遍历数组就是将数组中元素都获取到<br> 一般情况我们都是使用for循环来遍历数组：<br>    for(var i=0 ; i&lt;数组.length ; i++){<br>        //数组[i]<br>    }</p><p> 使用forEach()方法来遍历数组（不兼容IE8）</p><pre><code>数组.forEach(function(value , index , obj){});forEach()方法需要一个回调函数作为参数，    数组中有几个元素，回调函数就会被调用几次，    每次调用时，都会将遍历到的信息以实参的形式传递进来，    我们可以定义形参来获取这些信息。    value:正在遍历的元素    index:正在遍历元素的索引    obj:被遍历对象</code></pre><h1 id="常用类和方法"><a href="#常用类和方法" class="headerlink" title="常用类和方法"></a>常用类和方法</h1><h2 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h2><p>在JS中为我们提供了<strong>三个包装类：</strong><br>String() Boolean() Number()<br> 通过这三个包装类可以创建基本数据类型的对象<br>例子：<br>    var num = new Number(2);<br>    var str = new String(“hello”);<br>    var bool = new Boolean(true);<br> 但是在实际应用中千万不要这么干。</p><p>当我们去操作一个基本数据类型的属性和方法时，<br><strong>解析器会临时将其转换为对应的包装类，然后再去操作属性和方法，</strong><br>操作完成以后再将这个临时对象进行销毁。</p><h2 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h2><p>日期的对象，在JS中通过Date对象来表示一个时间<br>创建对象<br> 创建一个当前的时间对象<br>    var d = new Date();<br> 创建一个指定的时间对象<br>    var d = new Date(“月/日/年 时:分:秒”);</p><p>方法：<br>getDate()<br>     当前日期对象是几日（1-31）</p><p>getDay()<br>     返回当前日期对象时周几（0-6）<br>         0 周日<br>         1 周一 。。。</p><p>getMonth()<br>     返回当前日期对象的月份（0-11）<br>     0 一月 1 二月 。。。<br>getFullYear() 从 Date 对象以四位数字返回年份。 </p><p>getHours() 返回 Date 对象的小时 (0 ~ 23)。<br>getMinutes() 返回 Date 对象的分钟 (0 ~ 59)。<br>getSeconds() 返回 Date 对象的秒数 (0 ~ 59)。<br>getMilliseconds() 返回 Date 对象的毫秒(0 ~ 999)。 </p><p>getTime()<br>     返回当前日期对象的时间戳<br>     时间戳，指的是从1970年月1日 0时0分0秒，<strong>到现在时间的毫秒数</strong><br>        计算机底层保存时间都是以时间戳的形式保存的。</p><p>Date.now()<br>     可以获取当前代码执行时的时间戳</p><h2 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h2><p>Math属于一个工具类，它不需要我们创建对象，它里边封装了属性运算相关的常量和方法<br>我们可以直接使用它来进行数学运算相关的操作<br>方法：<br>Math.PI<br>     常量，圆周率<br>Math.abs()<br>     绝对值运算<br>Math.ceil()<br>     向上取整<br>Math.floor()<br>     向下取整<br>Math.round()<br>     四舍五入取整<br>Math.random()<br>     生成一个01之间的随机数<br>     生成一个xy之间的随机数<br>        Math.round(Math.random()*(y-x)+x);<br>Math.pow(x,y)<br>     求x的y次幂<br>Math.sqrt()<br>     对一个数进行开方<br>Math.max()<br>     求多个数中最大值<br>Math.min()<br>     求多个数中的最小值</p><h2 id="字符串的相关的方法"><a href="#字符串的相关的方法" class="headerlink" title="字符串的相关的方法"></a>字符串的相关的方法</h2><p>使用ES6中的字符串新方法</p><p> <strong>String.prototype.padStart(maxLength, fillString=’’)</strong> 或 <strong>String.prototype.padEnd(maxLength, fillString=’’)</strong>来填充字符串；</p><p>length<br> 获取字符串的长度<br>charAt()<br> 根据索引获取指定的字符<br>charCodeAt()<br> 根据索引获取指定的字符编码<br><strong>String.fromCharCode()</strong><br> <strong>根据字符编码获取字符</strong><br>indexOf()<br>lastIndexOf()<br> 从一个字符串中检索指定内容<br> 需要一个字符串作为参数，这个字符串就是要检索的内容，<br>    如果找到该内容，则会返回其第一次出现的索引，如果没有找到则返回-1。<br> 可以指定一个第二个参数，来表示开始查找的位置<br> indexOf()是从前向后找<br> lastIndexOf()是从后向前找<br>slice(start,[end])<br> 可以从一个字符串中截取指定的内容，并将截取到内容返回，不会影响原变量<br> 参数：<br>    第一个：截取开始的位置（包括开始）<br>    第二个：截取结束的位置<strong>（不包括结束）</strong><br>         可以省略第二个参数，如果省略则一直截取到最后<br>     可以传负数，如果是负数则从后往前数<br>substr()<br> 和slice()基本一致，不同的是它第二个参数不是索引，而是截取的数量</p><p>substring()<br> 和slice()基本一致，不同的是它不能接受负值作为参数，如果设置一个负值，则会自动修正为0，<br>    <strong>substring()中如果第二个参数小于第一个，自动调整位置</strong><br>toLowerCase()<br> 将字符串转换为小写并返回<br>toUpperCase()<br> 将字符串转换为大写并返回</p><h3 id="正则表达相关方法"><a href="#正则表达相关方法" class="headerlink" title="正则表达相关方法"></a>正则表达相关方法</h3><p><strong>split()</strong><br> 可以根据指定内容将一个字符串拆分为一个数组<br> 参数：<br>     需要一个字符串作为参数，将会根据字符串去拆分数组<br>        可以接收一个正则表达式，此时会根据正则表达式去拆分数组</p><p><strong>match()</strong><br>     可以根据正则表达式，从一个字符串中将符合条件的内容提取出来<br>     默认情况下我们的match只会找到第一个符合要求的内容，找到以后就停止检索<br>        我们可以设置正则表达式为全局匹配模式，这样就会匹配到所有的内容<br>        可以为一个正则表达式设置多个匹配模式，且顺序无所谓<br>     match()会将匹配到的内容封装到一个数组中返回，即使只查询到一个结果</p><p><strong>replace()</strong><br>     可以将字符串中指定内容替换为新的内容<br>    参数：<br>        1.被替换的内容，可以接受一个正则表达式作为参数<br>        <strong>2.新的内容</strong>  空串则为删除””<br>    默认只会替换第一个</p><p>search()<br>     可以搜索字符串中是否含有指定内容<br>     如果搜索到指定内容，则会返回第一次出现的索引，如果没有搜索到返回1<br>     它可以接受一个正则表达式作为参数，然后会根据正则表达式去检索字符串<br>     serach()只会查找第一个，即使设置全局匹配也没用            </p><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p>正则用来定义一些字符串的规则，程序可以根据这些规则来判断一个字符串是否符合规则，<br>也可以将一个字符串中符合规则的内容提取出来。<br><strong>创建正则表达式</strong><br> var reg = new RegExp(“正则”,”匹配模式”); 注意：使用构造函数时，由于它的参数是一个字符串，而\是字符串中转义字符，如果要使用\则需要使用\来代替</p><p> var reg = /正则表达式/匹配模式 （匹配模式可以多个一起写：/gi）</p><h2 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h2><p>匹配模式：<br>    i:忽略大小写（ignore）<br>    g:全局匹配模式（默认为1次）<br>     设置匹配模式时，可以都不设置，也可以设置1个，也可以全设置，设置时没有顺序要求</p><p>正则语法<br>    | 或<br>    [] 或<br>    [^ ] 除了</p><p>​    <strong>[x-y] x的ascii到y的ascii码之间的值</strong></p><p>[a-z] 小写字母 <strong>（也可以[e-i])</strong><br>[A-Z] 大写字母<br>[A-z] 任意字母,<strong>但是还包括了其他ASCII在此之中的</strong><br>[0-9] 任意数字</p><p>元符号</p><p>检查一个字符串中是否含有 .<br>  . 表示任意字符<br>  在正则表达式中使用\作为转义字符<br>  . 来表示.<br>  \  表示\</p><p>\w<br>    任意字母、数字、_  [A-z0-9_]<br>  \W<br>    除了字母、数字、_  [ ^A-z0-9_]<br>  \d<br>    任意的数字 [0-9]<br>  \D<br>    除了数字 [ ^0-9]<br>  \s<br>    空格<br>  \S<br>    除了空格<br>  \b<br>    单词边界<br>  \B<br>    除了单词边界</p><p><strong>量词</strong><br>     通过量词可以设置一个内容出现的次数<br>     量词只对它前边的一个内容起作用<br>     {n} 正好出现n次<br>     {m,n} 出现mn次<br>     {m,} m次以上</p><p>+至少一个，相当于{1,}<br>*个或多个，相当于{0,}<br> ? 0个或1个，相当于{0,1}    </p><p><strong>边界表达式</strong>（不要在java中用，javaScript中用）<br>    ^:正则开始<br>    $:正则结束 ：<strong>注意结束前一个才是结束匹配</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">reg = <span class="regexp">/^a/</span>;</span><br><span class="line">reg = <span class="regexp">/b$/</span>;</span><br></pre></td></tr></table></figure><h2 id="方法："><a href="#方法：" class="headerlink" title="方法："></a>方法：</h2><p>test()<br>     可以用来检查一个字符串是否符合正则表达式<br>     如果符合返回true，否则返回false<br>例子</p><p>去掉两端的空格:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">"        f    afa    "</span>; </span><br><span class="line">s = s.replace(<span class="regexp">/^\s*|\s*$/g</span>,<span class="string">""</span>);</span><br></pre></td></tr></table></figure><h1 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h1><p>Document Object Model<br>文档对象模型，通过DOM可以来任意来修改网页中各个内容<br>文档<br> 文档指的是网页，一个网页就是一个文档<br>对象<br> 对象指将网页中的每一个节点都转换为对象<br>    转换完对象以后，就可以以一种纯面向对象的形式来操作网页了<br>模型<br> 模型用来表示节点和节点之间的关系，方便操作页面<br>节点（Node）<br> 节点是构成网页的最基本的单元，网页中的每一个部分都可以称为是一个节点<br> 虽然都是节点，但是节点的类型却是不同的<br> 常用的节点<br>     文档节点 （Document），代表整个网页<br>     元素节点（Element），代表网页中的标签<br>     属性节点（Attribute），代表标签中的属性<br>     文本节点（Text），代表网页中的文本内容</p><h2 id="DOM操作"><a href="#DOM操作" class="headerlink" title="DOM操作"></a>DOM操作</h2><p> DOM查询<br> 在网页中浏览器已经为我们提供了<strong>document对象</strong>，<br>    <strong>它代表的是整个网页，它是window对象的属性，可以在页面中直接使用。</strong><br> document查询方法：<br>     根据元素的id属性查询一个元素节点对象：<br>         document.getElementById(“id属性值”);<br>     根据元素的name属性值查询一组元素节点对象:<br>         document.getElementsByName(“name属性值”);<br>     根据标签名来查询一组元素节点对象：<br>         document.getElementsByTagName(“标签名”);</p><p> 元素的属性：<br>     <strong>读取元素的属性：</strong><br>        语法：元素.属性名<br>        例子：ele.name<br>              ele.id<br>              ele.value<br>              ele.className<br>            注意：class属性不能采用这种方式，<br>            <strong>读取class属性时需要使用 元素.classNam</strong>e     </p><p>修改元素的属性：<br>    语法：元素.属性名 = 属性值</p><p> innerHTML<br>     使用该属性可以获取或设置元素内部的HTML代码</p><h2 id="事件（Event）"><a href="#事件（Event）" class="headerlink" title="事件（Event）"></a>事件（Event）</h2><p> 事件指的是用户和浏览器之间的交互行为。比如：点击按钮、关闭窗口、鼠标移动。。。<br> 我们可以为事件来绑定回调函数来响应事件。<br> 绑定事件的方式：<br>​    1.可以在标签的事件属性中设置相应的JS代码<br>​        例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onclick=<span class="string">"js代码。。。"</span>&gt;按钮&lt;<span class="regexp">/button&gt;</span></span><br></pre></td></tr></table></figure><p>​    2.可以通过为对象的指定事件属性设置回调函数的形式来处理事件<br>​        例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;button id=<span class="string">"btn"</span>&gt;按钮&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var btn = document.getElementById("btn");</span></span><br><span class="line"><span class="regexp">    btn.onclick = function()&#123;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    &#125;;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><p>文档的加载<br> 浏览器在加载一个页面时，是按照自上向下的顺序加载的，加载一行执行一行。<br> 如果将js代码编写到页面的上边，当代码执行时，页面中的DOM对象还没有加载，<br>    此时将会无法正常获取到DOM对象，导致DOM操作失败。<br> 解决方式一：<br>     可以将js代码编写到body的下边</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;button id=<span class="string">"btn"</span>&gt;按钮&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">var btn = document.getElementById("btn");</span></span><br><span class="line"><span class="regexp">btn.onclick = function()&#123;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br></pre></td></tr></table></figure><p> 解决方式二：<br>     将js代码编写到window.onload = function(){}中<br>     window.onload 对应的回调函数会在整个页面加载完毕以后才执行，<br>        所以可以确保代码执行时，DOM对象已经加载完毕了        </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>);</span><br><span class="line">        btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>​                    </p><h2 id="DOM查询"><a href="#DOM查询" class="headerlink" title="DOM查询"></a>DOM查询</h2><p>通过具体的元素节点来查询<br>元素.getElementsByTagName()<br>通过标签名查询当前元素的指定后代元素</p><p><strong>子节点包括便签元素中的文本，子元素自包含标签元素</strong></p><p>元素.childNodes<br> 获取当前元素的<strong>所有子节点</strong><br> <strong>会获取到空白的文本子节点</strong></p><p>childNodes属性会获取包括文本节点在呢的所有节点<br>  根据DOM标签标签间空白也会当成文本节点<br>  注意：在IE8及以下的浏览器中，不会将空白文本当成子节点，<br>    所以该属性在IE8中会返回4个子元素而其他浏览器是9个</p><p>元素.children<br> 获取当前元素的<strong>所有子元素</strong></p><p>元素.firstChild<br> 获取当前元素的<strong>第一个子节点</strong>，会获取到空白的文本子节点</p><p>元素.lastChild<br> 获取当前元素的<strong>最后一个子节点</strong></p><p>元素.parentNode<br> 获取当前元素的父元素</p><p>元素.previousSibling<br> 获取当前元素的前一个兄弟节点</p><p>previousElementSibling获取前一个兄弟元素，IE8及以下不支持</p><p>元素.nextSibling<br> 获取当前元素的后一个兄弟节点</p><p>firstElementChild获取当前元素的第一个子元素<br> firstElementChild不支持IE8及以下的浏览器，<br>    如果需要兼容他们尽量不要使用</p><p>innerHTML和innerText<br>这两个属性并没有在DOM标准定义，但是大部分浏览器都支持这两个属性<br>两个属性作用类似，都可以获取到标签内部的内容，<br><strong>不同是innerHTML会获取到html标签，而innerText会自动去除标签</strong><br>如果使用这两个属性来设置标签内部的内容时，没有任何区别的    </p><p><strong>读取标签内部的文本内容</strong></p>h1中的文本内容<p>元素.firstChild.nodeValue</p><h2 id="document对象的其他的属性和方法"><a href="#document对象的其他的属性和方法" class="headerlink" title="document对象的其他的属性和方法"></a>document对象的其他的属性和方法</h2><p>document.all<br> <strong>获取页面中的所有元素</strong>，相当于document.getElementsByTagName(“*”);</p><p>document.documentElement<br> <strong>获取页面中html根元素</strong></p><p>document.body<br> 获取页面中的body元素</p><p>document.getElementsByClassName()<br> <strong>根据元素的class属性值查询一组元素节点对象</strong><br> 这个方法不支持IE8及以下的浏览器</p><p>document.querySelector()<br> <strong>根据CSS选择器去页面中查询一个元素</strong><br> 如果匹配到的元素有多个，则它会返回查询到的第一个元素    </p><p>document.querySelectorAll()<br> 根据CSS选择器去页面中查询一组元素<br> 会将匹配到所有元素封装到一个数组中返回，即使只匹配到一个</p><h2 id="DOM修改"><a href="#DOM修改" class="headerlink" title="DOM修改"></a>DOM修改</h2><p>document.createElement(“TagName”)<br>    可以用于创建一个元素节点对象，<br>    它需要一个标签名作为参数，将会根据该标签名创建元素节点对象，<br>    并将创建好的对象作为返回值返回<br>document.createTextNode(“textContent”)<br>可以根据文本内容创建一个文本节点对象</p><p><strong>父节点.appendChild(子节点)</strong><br>  向父节点中添加指定的子节点<br><strong>父节点.insertBefore(新节点,旧节点)</strong><br> 将一个新的节点插入到旧节点的前边<br>父节点.replaceChild(新节点,旧节点)<br> 使用一个新的节点去替换旧节点</p><p><strong>父节点.removeChild(子节点)</strong><br> 删除指定的子节点<br>  推荐方式：<strong>子节点.parentNode.removeChild(子节点)</strong></p><p><strong>以上方法，实际就是改变了相应元素（标签）的innerHTML的值。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">myClick(<span class="string">"btn07"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//向city中添加广州</span></span><br><span class="line">    <span class="keyword">var</span> city = <span class="built_in">document</span>.getElementById(<span class="string">"city"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">* 使用innerHTML也可以完成DOM的增删改的相关操作</span></span><br><span class="line"><span class="comment">* 一般我们会两种方式结合使用</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="comment">//city.innerHTML += "&lt;li&gt;广州&lt;/li&gt;";</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建一个li</span></span><br><span class="line">    <span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">"li"</span>);</span><br><span class="line">    <span class="comment">//向li中设置文本</span></span><br><span class="line">    li.innerHTML = <span class="string">"广州"</span>;</span><br><span class="line">    <span class="comment">//将li添加到city中</span></span><br><span class="line">    city.appendChild(li);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="DOM对CSS的操作"><a href="#DOM对CSS的操作" class="headerlink" title="DOM对CSS的操作"></a>DOM对CSS的操作</h2><h3 id="读取和修改内联样式"><a href="#读取和修改内联样式" class="headerlink" title="读取和修改内联样式"></a>读取和修改内联样式</h3><p>使用style属性来操作元素的内联样式<br>    读取内联样式：<br>    语法：元素.style.样式名<br>例子：<br>    元素.style.width<br>    元素.style.height<br>    注意：<strong>如果样式名中带有-，则需要将样式名修改为驼峰命名法将-去掉，然后后的字母改大写</strong><br>    比如：backgroundcolor &gt; backgroundColor<br>    borderwidth &gt; borderWidth<br>修改内联样式：<br>语法：元素.style.样式名 = 样式值<br> <strong>通过style修改和读取的样式都是内联样式</strong>，由于内联样式的优先级比较高，<br>    所以我们通过JS来修改的样式，往往会立即生效，<br>    <strong>但是如果样式中设置了!important，则内联样式将不会生效。</strong></p><h3 id="读取元素的当前样式"><a href="#读取元素的当前样式" class="headerlink" title="读取元素的当前样式"></a>读取元素的当前样式</h3><p>正常浏览器<br> <strong>使用getComputedStyle()</strong><br> 这个方法是window对象的方法，可以返回一个对象，这个对象中保存着当前元素生效样式<br> 参数：<br>    1.要获取样式的元素<br>    2.可以传递一个伪元素，一般传null<br> 例子：<br>    获取元素的宽度<br>        getComputedStyle(box , null)[“width”];<br> 通过该方法读取到样式都是只读的不能修改</p><p>IE8<br> <strong>使用currentStyle</strong><br> 语法：<br>    元素.currentStyle.样式名<br> 例子：<br>    box.currentStyle[“width”]<br> 通过这个属性读取到的样式是只读的不能修改</p><p><strong>实现兼容性</strong></p><p>//对象.属性不存在，不会报错，如果直接寻找对象，（当前作用域到全局作用域）找不到会报错</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 定义一个函数，用来获取指定元素的当前的样式</span></span><br><span class="line"><span class="comment">* 参数：</span></span><br><span class="line"><span class="comment">* obj 要获取样式的元素</span></span><br><span class="line"><span class="comment">* name 要获取的样式名</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">obj , name</span>)</span>&#123;</span><br><span class="line"><span class="comment">//对象.属性不存在，不会报错，如果直接寻找对象，（当前作用域到全局作用域）找不到会报错</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.getComputedStyle)&#123;</span><br><span class="line">        <span class="comment">//正常浏览器的方式，具有getComputedStyle()方法</span></span><br><span class="line">        <span class="keyword">return</span> getComputedStyle(obj , <span class="literal">null</span>)[name];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//IE8的方式，没有getComputedStyle()方法</span></span><br><span class="line">        <span class="keyword">return</span> obj.currentStyle[name];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//return window.getComputedStyle?getComputedStyle(obj , null)[name]:obj.currentStyle[name];</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="其他的样式相关的属性"><a href="#其他的样式相关的属性" class="headerlink" title="其他的样式相关的属性"></a>其他的样式相关的属性</h3><p>注意：以下样式都是只读的,未指明偏移量都是相对于当前窗口左上角</p><p>clientHeight<br> 元素的可见高度，包括元素的内容区和内边距的高度<br>clientWidth<br> 元素的可见宽度，包括元素的内容区和内边距的宽度<br>offsetHeight<br> 整个元素的高度，包括内容区、内边距、边框<br>offfsetWidth<br> 整个元素的宽度，包括内容区、内边距、边框<br>offsetParent<br> 当前元素的定位父元素<br> 离他最近的开启了定位的祖先元素，如果所有的元素都没有开启定位，则返回body<br>offsetLeft<br>offsetTop<br> 当前元素和定位父元素之间的偏移量<br> offsetLeft水平偏移量  offsetTop垂直偏移量</p><p>scrollHeight<br>scrollWidth<br> 获取元素滚动区域的高度和宽度</p><p>scrollTop<br>scrollLeft<br> 获取元素垂直和水平滚动条滚动的距离</p><p>判断滚动条是否滚动到底<br> 垂直滚动条<br>    scrollHeight -scrollTop = clientHeight</p><p> 水平滚动<br>    scrollWidth -scrollLeft = clientWidth    </p><h1 id="事件（Event）-1"><a href="#事件（Event）-1" class="headerlink" title="事件（Event）"></a>事件（Event）</h1><h2 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h2><p>当响应函数被调用时，浏览器每次都会将一个事件对象作为实参传递进响应函数中，这个事件对象中封装了当前事件的相关信息，比如：鼠标的坐标，键盘的按键，鼠标的按键，滚轮的方向。。</p><p>可以在响应函数中定义一个形参，来使用事件对象，但是在IE8以下浏览器中事件对象没有做完实参传递，而是作为window对象的属性保存</p><p>例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">元素.事件 = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    event = event || <span class="built_in">window</span>.event;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">元素.事件 = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">e = e || event;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>获取到鼠标的坐标</strong><br>  clientX和clientY<br>    用于获取鼠标在当前的可见窗口的坐标<br>  div的偏移量，是相对于整个页面的</p><p>  pageX和pageY 可以获取鼠标相对于当前页面的坐标<br>    但是这个两个属性在IE8中不支持，所以如果需要兼容IE8，则不要使用<br>var left = event.clientX;<br>var　top = event.clientY;</p><h2 id="事件的冒泡（Bubble）"><a href="#事件的冒泡（Bubble）" class="headerlink" title="事件的冒泡（Bubble）"></a>事件的冒泡（Bubble）</h2><p> 事件的冒泡指的是事件向上传导，当后代元素上的事件被触发时，将会导致其祖先元素上的同类事件也会触发。<br> 事件的冒泡大部分情况下都是有益的，如果需要取消冒泡，则需要使用事件对象来取消<br> <strong>可以将事件对象的cancelBubble设置为true，即可取消冒泡</strong><br>   例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">元素.事件 = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    event = event || <span class="built_in">window</span>.event;</span><br><span class="line">    event.cancelBubble = <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="事件的委派"><a href="#事件的委派" class="headerlink" title="事件的委派"></a>事件的委派</h2><p> 指将事件统一绑定给元素的共同的祖先元素，这样当后代元素上的事件触发时，会一直冒泡到祖先元素，从而通过祖先元素的响应函数来处理事件。</p><p>事件委派是利用了冒泡，通过委派可以减少事件绑定的次数，提高程序的性能        </p><p>我们希望，只绑定一次事件，即可应用到多个的元素上，即使元素是后添加的<br>我们可以尝试将其绑定给元素的共同的祖先元素</p><p> <strong>target</strong> : event中的target表示的触发事件的对象</p><h2 id="事件的绑定"><a href="#事件的绑定" class="headerlink" title="事件的绑定"></a>事件的绑定</h2><p>addEventListener()<br> 通过这个方法也可以为元素绑定响应函数<br>参数：<br>    1.事件的字符串，不要on<br>    2.回调函数，当事件触发时该函数会被调用<br>    3.是否在捕获阶段触发事件，需要一个布尔值，一般都传false</p><p>使用addEventListener()可以同时为一个元素的相同事件同时绑定多个响应函数，<br>这样当事件被触发时，响应函数将会按照函数的绑定顺序执行</p><p>这个方法不支持IE8及以下的浏览器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">btn01.addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(<span class="number">1</span>);</span><br><span class="line">&#125;,<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">btn01.addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(<span class="number">2</span>);</span><br><span class="line">&#125;,<span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>attachEvent()</p><p> 在IE8中可以使用attachEvent()来绑定事件<br>参数：<br>    1.事件的字符串，要on<br>    2.回调函数</p><p>这个方法也可以同时为一个事件绑定多个处理函数，<br>    不同的是它是后绑定先执行，执行顺序和addEventListener()相反</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">btn01.attachEvent(<span class="string">"onclick"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">btn01.attachEvent(<span class="string">"onclick"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(<span class="number">2</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个函数，用来为指定元素绑定响应函数</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * addEventListener()中的this，是绑定事件的对象</span></span><br><span class="line"><span class="comment"> * attachEvent()中的this，是window</span></span><br><span class="line"><span class="comment"> *  需要统一两个方法this</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 参数：</span></span><br><span class="line"><span class="comment"> * obj 要绑定事件的对象</span></span><br><span class="line"><span class="comment"> * eventStr 事件的字符串(不要on)</span></span><br><span class="line"><span class="comment"> *  callback 回调函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bind</span>(<span class="params">obj , eventStr , callback</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(obj.addEventListener)&#123;</span><br><span class="line">        <span class="comment">//大部分浏览器兼容的方式</span></span><br><span class="line">        obj.addEventListener(eventStr , callback , <span class="literal">false</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment"> * this是谁由调用方式决定</span></span><br><span class="line"><span class="comment"> * callback.call(obj)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">        <span class="comment">//IE8及以下</span></span><br><span class="line">        obj.attachEvent(<span class="string">"on"</span>+eventStr , <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="comment">//在匿名函数中调用回调函数</span></span><br><span class="line">            callback.call(obj);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="事件的传播"><a href="#事件的传播" class="headerlink" title="事件的传播"></a>事件的传播</h2><p> 关于事件的传播网景公司和微软公司有不同的理解<br> 微软公司认为事件应该是由内向外传播，也就是当事件触发时，应该先触发当前元素上的事件，<br>    然后再向当前元素的祖先元素上传播，也就说事件应该在冒泡阶段执行。<br> 网景公司认为事件应该是由外向内传播的，也就是当前事件触发时，应该先触发当前元素的最外层的祖先元素的事件，<br>    然后在向内传播给后代元素<br> W3C综合了两个公司的方案，将事件传播分成了三个阶段<br>    1.捕获阶段<br>         在捕获阶段时从最外层的祖先元素，向目标元素进行事件的捕获，但是默认此时不会触发事件<br>    2.目标阶段<br>         事件捕获到目标元素，捕获结束开始在目标元素上触发事件<br>    3.冒泡阶段<br>         事件从目标元素向他的祖先元素传递，依次触发祖先元素上的事件</p><p> 如果希望在捕获阶段就触发事件，可以将addEventListener()的第三个参数设置为true<br>    一般情况下我们不会希望在捕获阶段触发事件，所以这个参数一般都是false</p><p> IE8及以下的浏览器中没有捕获阶段</p><h2 id="常用事件"><a href="#常用事件" class="headerlink" title="常用事件"></a>常用事件</h2><h3 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h3><p>拖拽事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">    &lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">        &lt;title&gt;<span class="xml"><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line">&lt;style type=<span class="string">"text/css"</span>&gt;</span><br><span class="line"></span><br><span class="line">    #box1&#123;</span><br><span class="line">width: <span class="number">100</span>px;</span><br><span class="line">height: <span class="number">100</span>px;</span><br><span class="line">background-color: red;</span><br><span class="line">position: absolute;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#box2&#123;</span><br><span class="line">width: <span class="number">100</span>px;</span><br><span class="line">height: <span class="number">100</span>px;</span><br><span class="line">background-color: yellow;</span><br><span class="line">position: absolute;</span><br><span class="line"></span><br><span class="line">left: <span class="number">200</span>px;</span><br><span class="line">top: <span class="number">200</span>px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    &lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script type="text/</span>javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    window.onload = function()&#123;</span></span><br><span class="line"><span class="string">    /*</span></span><br><span class="line"><span class="string"> * 拖拽box1元素</span></span><br><span class="line"><span class="string"> *  - 拖拽的流程</span></span><br><span class="line"><span class="string"> * 1.当鼠标在被拖拽元素上按下时，开始拖拽  onmousedown</span></span><br><span class="line"><span class="string"> * 2.当鼠标移动时被拖拽元素跟随鼠标移动 onmousemove</span></span><br><span class="line"><span class="string"> * 3.当鼠标松开时，被拖拽元素固定在当前位置onmouseup</span></span><br><span class="line"><span class="string"> */</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    //获取box1</span></span><br><span class="line"><span class="string">    var box1 = document.getElementById("</span>box1<span class="string">");</span></span><br><span class="line"><span class="string">    var box2 = document.getElementById("</span>box2<span class="string">");</span></span><br><span class="line"><span class="string">    var img1 = document.getElementById("</span>img1<span class="string">");</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    //开启box1的拖拽</span></span><br><span class="line"><span class="string">    drag(box1);</span></span><br><span class="line"><span class="string">    //开启box2的</span></span><br><span class="line"><span class="string">    drag(box2);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    drag(img1);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/*</span></span><br><span class="line"><span class="string"> * 提取一个专门用来设置拖拽的函数</span></span><br><span class="line"><span class="string"> * 参数：开启拖拽的元素</span></span><br><span class="line"><span class="string"> */</span></span><br><span class="line"><span class="string">function drag(obj)&#123;</span></span><br><span class="line"><span class="string">    //当鼠标在被拖拽元素上按下时，开始拖拽  onmousedown</span></span><br><span class="line"><span class="string">    obj.onmousedown = function(event)&#123;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        //设置box1捕获所有鼠标按下的事件</span></span><br><span class="line"><span class="string">        /*</span></span><br><span class="line"><span class="string"> * setCapture()</span></span><br><span class="line"><span class="string"> * - 只有IE支持，但是在火狐中调用时不会报错，</span></span><br><span class="line"><span class="string"> * 而如果使用chrome调用，会报错</span></span><br><span class="line"><span class="string"> */</span></span><br><span class="line"><span class="string">        /*if(box1.setCapture)&#123;</span></span><br><span class="line"><span class="string">box1.setCapture();</span></span><br><span class="line"><span class="string">&#125;*/</span></span><br><span class="line"><span class="string">        obj.setCapture &amp;&amp; obj.setCapture();</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        event = event || window.event;</span></span><br><span class="line"><span class="string">        //div的偏移量 鼠标.clentX - 元素.offsetLeft</span></span><br><span class="line"><span class="string">        //div的偏移量 鼠标.clentY - 元素.offsetTop</span></span><br><span class="line"><span class="string">        var ol = event.clientX - obj.offsetLeft;</span></span><br><span class="line"><span class="string">        var ot = event.clientY - obj.offsetTop;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        //为document绑定一个onmousemove事件</span></span><br><span class="line"><span class="string">        document.onmousemove = function(event)&#123;</span></span><br><span class="line"><span class="string">            event = event || window.event;</span></span><br><span class="line"><span class="string">            //当鼠标移动时被拖拽元素跟随鼠标移动 onmousemove</span></span><br><span class="line"><span class="string">            //获取鼠标的坐标</span></span><br><span class="line"><span class="string">            var left = event.clientX - ol;</span></span><br><span class="line"><span class="string">            var top = event.clientY - ot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            //修改box1的位置</span></span><br><span class="line"><span class="string">            obj.style.left = left+"</span>px<span class="string">";</span></span><br><span class="line"><span class="string">            obj.style.top = top+"</span>px<span class="string">";</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        //为document绑定一个鼠标松开事件</span></span><br><span class="line"><span class="string">        document.onmouseup = function()&#123;</span></span><br><span class="line"><span class="string">            //当鼠标松开时，被拖拽元素固定在当前位置onmouseup</span></span><br><span class="line"><span class="string">            //取消document的onmousemove事件</span></span><br><span class="line"><span class="string">            document.onmousemove = null;</span></span><br><span class="line"><span class="string">            //取消document的onmouseup事件</span></span><br><span class="line"><span class="string">            document.onmouseup = null;</span></span><br><span class="line"><span class="string">            //当鼠标松开时，取消对事件的捕获</span></span><br><span class="line"><span class="string">            obj.releaseCapture &amp;&amp; obj.releaseCapture();</span></span><br><span class="line"><span class="string">        &#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> /*</span></span><br><span class="line"><span class="string">* 当我们拖拽一个网页中的内容时，浏览器会默认去搜索引擎中搜索内容，</span></span><br><span class="line"><span class="string">* 此时会导致拖拽功能的异常，这个是浏览器提供的默认行为，</span></span><br><span class="line"><span class="string">* 如果不希望发生这个行为，则可以通过return false来取消默认行为</span></span><br><span class="line"><span class="string">* </span></span><br><span class="line"><span class="string">* 但是这招对IE8不起作用</span></span><br><span class="line"><span class="string">*/</span></span><br><span class="line"><span class="string">        return false;</span></span><br><span class="line"><span class="string">    &#125;;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    我是一段文字</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;div id="</span>box1<span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;div id="</span>box2<span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;img src="</span>img/an.jpg<span class="string">" id="</span>img1<span class="string">" style="</span>position: absolute;<span class="string">"/&gt;</span></span><br><span class="line"><span class="string">    &lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><p>滚轮事件：</p><p>onwheel都支持</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">    &lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">        &lt;title&gt;<span class="xml"><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line">&lt;style type=<span class="string">"text/css"</span>&gt;</span><br><span class="line"></span><br><span class="line">    #box1&#123;</span><br><span class="line">width: <span class="number">100</span>px;</span><br><span class="line">height: <span class="number">100</span>px;</span><br><span class="line">background-color: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    &lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp">&lt;script type="text/</span>javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    window.onload = function()&#123;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    //获取id为box1的div</span></span><br><span class="line"><span class="string">    var box1 = document.getElementById("</span>box1<span class="string">");</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    //为box1绑定一个鼠标滚轮滚动的事件</span></span><br><span class="line"><span class="string">    /*</span></span><br><span class="line"><span class="string"> * onmousewheel鼠标滚轮滚动的事件，会在滚轮滚动时触发，</span></span><br><span class="line"><span class="string"> * 但是火狐不支持该属性</span></span><br><span class="line"><span class="string"> * </span></span><br><span class="line"><span class="string"> * 在火狐中需要使用 DOMMouseScroll 来绑定滚动事件</span></span><br><span class="line"><span class="string"> * 注意该事件需要通过addEventListener()函数来绑定</span></span><br><span class="line"><span class="string"> */</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    box1.onmousewheel = function(event)&#123;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        event = event || window.event;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        //event.wheelDelta 可以获取鼠标滚轮滚动的方向</span></span><br><span class="line"><span class="string">        //向上滚 120   向下滚 -120</span></span><br><span class="line"><span class="string">        //wheelDelta这个值我们不看大小，只看正负</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        //alert(event.wheelDelta);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        //wheelDelta这个属性火狐中不支持</span></span><br><span class="line"><span class="string">        //在火狐中使用event.detail来获取滚动的方向</span></span><br><span class="line"><span class="string">        //向上滚 -3  向下滚 3</span></span><br><span class="line"><span class="string">        //alert(event.detail);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        /*</span></span><br><span class="line"><span class="string"> * 当鼠标滚轮向下滚动时，box1变长</span></span><br><span class="line"><span class="string"> * 当滚轮向上滚动时，box1变短</span></span><br><span class="line"><span class="string"> */</span></span><br><span class="line"><span class="string">        //判断鼠标滚轮滚动的方向</span></span><br><span class="line"><span class="string">        if(event.wheelDelta &gt; 0 || event.detail &lt; 0)&#123;</span></span><br><span class="line"><span class="string">            //向上滚，box1变短</span></span><br><span class="line"><span class="string">            box1.style.height = box1.clientHeight - 10 + "</span>px<span class="string">";</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &#125;else&#123;</span></span><br><span class="line"><span class="string">            //向下滚，box1变长</span></span><br><span class="line"><span class="string">            box1.style.height = box1.clientHeight + 10 + "</span>px<span class="string">";</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        /*</span></span><br><span class="line"><span class="string"> * 使用addEventListener()方法绑定响应函数，取消默认行为时不能使用return false</span></span><br><span class="line"><span class="string"> * 需要使用event来取消默认行为event.preventDefault();</span></span><br><span class="line"><span class="string"> * 但是IE8不支持event.preventDefault();这个玩意，如果直接调用会报错</span></span><br><span class="line"><span class="string"> */</span></span><br><span class="line"><span class="string">        event.preventDefault &amp;&amp; event.preventDefault();</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        /*</span></span><br><span class="line"><span class="string"> * 当滚轮滚动时，如果浏览器有滚动条，滚动条会随之滚动，</span></span><br><span class="line"><span class="string"> * 这是浏览器的默认行为，如果不希望发生，则可以取消默认行为</span></span><br><span class="line"><span class="string"> */</span></span><br><span class="line"><span class="string">        return false;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    //为火狐绑定滚轮事件</span></span><br><span class="line"><span class="string">    bind(box1,"</span>DOMMouseScroll<span class="string">",box1.onmousewheel);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">function bind(obj , eventStr , callback)&#123;</span></span><br><span class="line"><span class="string">    if(obj.addEventListener)&#123;</span></span><br><span class="line"><span class="string">        //大部分浏览器兼容的方式</span></span><br><span class="line"><span class="string">        obj.addEventListener(eventStr , callback , false);</span></span><br><span class="line"><span class="string">    &#125;else&#123;</span></span><br><span class="line"><span class="string">        /*</span></span><br><span class="line"><span class="string"> * this是谁由调用方式决定</span></span><br><span class="line"><span class="string"> * callback.call(obj)</span></span><br><span class="line"><span class="string"> */</span></span><br><span class="line"><span class="string">        //IE8及以下</span></span><br><span class="line"><span class="string">        obj.attachEvent("</span>on<span class="string">"+eventStr , function()&#123;</span></span><br><span class="line"><span class="string">            //在匿名函数中调用回调函数</span></span><br><span class="line"><span class="string">            callback.call(obj);</span></span><br><span class="line"><span class="string">        &#125;);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body style="</span>height: <span class="number">2000</span>px;<span class="string">"&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &lt;div id="</span>box1<span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><h3 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h3><p>键盘事件：<br>onkeydown<br> 按键被按下<br> 对于onkeydown来说如果一直按着某个按键不松手，则事件会一直触发<br> 当onkeydown连续触发时，第一次和第二次之间会间隔稍微长一点，其他的会非常的快，这种设计是为了防止误操作的发生。<br>onkeyup<br> 按键被松开</p><p>键盘事件一般都会绑定给一些可以获取到焦点的对象或者是document</p><p>keyCode</p><p>可以通过keyCode来获取按键的编码<br>通过它可以判断哪个按键被按下<br>除了keyCode，事件对象中还提供了几个属性<br>altKey<br>ctrlKey<br>shiftKey<br>这个三个用来判断alt ctrl 和 shift是否被按下<br>如果按下则返回true，否则返回false</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//console.log(event.keyCode);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断一个y是否被按下</span></span><br><span class="line"><span class="comment">//判断y和ctrl是否同时被按下</span></span><br><span class="line"><span class="keyword">if</span>(event.keyCode === <span class="number">89</span> &amp;&amp; event.ctrlKey)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"ctrl和y都被按下了"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">input.onkeydown = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    event = event || <span class="built_in">window</span>.event;</span><br><span class="line">    <span class="comment">//数字 48 - 57</span></span><br><span class="line">    <span class="comment">//使文本框中不能输入数字</span></span><br><span class="line">    <span class="keyword">if</span>(event.keyCode &gt;= <span class="number">48</span> &amp;&amp; event.keyCode &lt;= <span class="number">57</span>) &#123;</span><br><span class="line">        <span class="comment">//在文本框中输入内容，属于onkeydown的默认行为</span></span><br><span class="line">        <span class="comment">//如果在onkeydown中取消了默认行为，则输入的内容，不会出现在文本框中</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h1><p>浏览器对象模型(browser object model)<br>BOM可以使我们通过JS来操作浏览器<br>在BOM中为我们提供了一组对象，用来完成对浏览器的操作<br>BOM对象<br>Window<br> 代表的是整个浏览器的窗口，同时window也是网页中的全局对象<br>Navigator<br> 代表的当前浏览器的信息，通过该对象可以来识别不同的浏览器<br>Location<br> 代表当前浏览器的地址栏信息，通过Location可以获取地址栏信息，或者操作浏览器跳转页面<br>History<br> 代表浏览器的历史记录，可以通过该对象来操作浏览器的历史记录<br>    由于隐私原因，该对象不能获取到具体的历史记录，只能操作浏览器向前或向后翻页<br>    而且该操作只在当次访问时有效<br>Screen<br> 代表用户的屏幕的信息，通过该对象可以获取到用户的显示器的相关的信息</p><p>这些BOM对象在浏览器中都是作为window对象的属性保存的，<br>可以通过window对象来使用，也可以直接使用</p><h2 id="Navigator"><a href="#Navigator" class="headerlink" title="Navigator"></a>Navigator</h2><p> 代表的当前浏览器的信息，通过该对象可以来识别不同的浏览器<br> 由于历史原因，Navigator对象中的大部分属性都已经不能帮助我们识别浏览器了<br> 一般我们只会使用userAgent来判断浏览器的信息，<br>    userAgent是一个字符串，这个字符串中包含有用来描述浏览器信息的内容，<br>    不同的浏览器会有不同的userAgent</p><p>火狐的userAgent<br>Mozilla5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko20100101 Firefox50.0</p><p>Chrome的userAgent<br>Mozilla5.0 (Windows NT 6.1; Win64; x64) AppleWebKit537.36 (KHTML, like Gecko) Chrome52.0.2743.82 Safari537.36</p><p>IE8<br>Mozilla4.0 (compatible; MSIE 8.0; Windows NT 6.1; WOW64; Trident7.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)</p><p>IE9<br>Mozilla5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident7.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)</p><p>IE10<br>Mozilla5.0 (compatible; MSIE 10.0; Windows NT 6.1; WOW64; Trident7.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)</p><p>IE11<br>Mozilla5.0 (Windows NT 6.1; WOW64; Trident7.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; rv:11.0) like Gecko<br> 在IE11中已经将微软和IE相关的标识都已经去除了，所以我们基本已经不能通过UserAgent来识别一个浏览器是否是IE了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">alert(navigator.appName);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ua = navigator.userAgent;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(ua);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(firefoxi.test(ua))&#123;</span><br><span class="line">alert(<span class="string">"你是火狐！！！"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(chromei.test(ua))&#123;</span><br><span class="line">alert(<span class="string">"你是Chrome"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(msiei.test(ua))&#123;</span><br><span class="line">alert(<span class="string">"你是IE浏览器~~~"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"ActiveXObject"</span> <span class="keyword">in</span> <span class="built_in">window</span>)&#123;</span><br><span class="line">alert(<span class="string">"你是IE11，枪毙了你~~~"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><p> 对象可以用来操作浏览器向前或向后翻页<br>length<br> 属性，可以获取到当成访问的链接数量<br>back()<br> 可以用来回退到上一个页面，作用和浏览器的回退按钮一样<br>forward()<br> 可以跳转下一个页面，作用和浏览器的前进按钮一样<br>go()<br> 可以用来跳转到指定的页面<br> 它需要一个整数作为参数<br>    1:表示向前跳转一个页面 相当于forward()<br>    2:表示向前跳转两个页面<br>    -1:表示向后跳转一个页面<br>    -2:表示向后跳转两个页面</p><h2 id="Location"><a href="#Location" class="headerlink" title="Location"></a>Location</h2><p> 该对象中封装了浏览器的地址栏的信息<br>如果直接打印location，则可以获取到地址栏的信息（当前页面的完整路径）<br>alert(location);<br>如果直接将location属性修改为一个完整的路径，或相对路径<br>则我们页面会自动跳转到该路径，并且会生成相应的历史记录<br>location = “http:<a href="http://www.baidu.com&quot;" target="_blank" rel="noopener">www.baidu.com&quot;</a>;<br>location = “01.BOM.html”;<br>assign()<br> 用来跳转到其他的页面，作用和直接修改location一样<br>reload()<br> 用于重新加载当前页面，作用和刷新按钮一样<br> 如果在方法中传递一个true，作为参数，则会强制清空缓存刷新页面<br>location.reload(true);<br>replace()<br> 可以使用一个新的页面替换当前页面，调用完毕也会跳转页面<br>    不会生成历史记录，不能使用回退按钮回退</p><h2 id="window"><a href="#window" class="headerlink" title="window"></a>window</h2><h3 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h3><p><strong>setInterval()</strong><br> 定时调用<br> 可以将一个函数，每隔一段时间执行一次<br> 参数：<br>    1.回调函数，该函数会每隔一段时间被调用一次<br>    2.每次调用间隔的时间，单位是毫秒</p><p> 返回值：<br>    返回一个Number类型的数据<br>    这个数字用来作为定时器的唯一标识<br><strong>clearInterval()可以用来关闭一个定时器</strong><br>方法中需要一个定时器的标识作为参数，这样将关闭标识对应的定时器 </p><p>clearInterval()可以接收任意参数，<br>    如果参数是一个有效的定时器的标识，则停止对应的定时器<br>    如果参数不是一个有效的标识，则什么也不做</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">count.innerHTML = num++;</span><br><span class="line"><span class="keyword">if</span>(num == <span class="number">11</span>) &#123;</span><br><span class="line"><span class="comment">//关闭定时器</span></span><br><span class="line">clearInterval(timer);</span><br><span class="line">&#125;</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h3 id="延时调用"><a href="#延时调用" class="headerlink" title="延时调用"></a>延时调用</h3><p><strong>setTimeout</strong></p><p>延时调用一个函数不马上执行，而是隔一段时间以后在执行，而且只会执行一次<br>延时调用和定时调用的区别，定时调用会执行多次，而延时调用只会执行一次<br>延时调用和定时调用实际上是可以互相代替的，在开发中可以根据自己需要去选择</p><p>var timer = setTimeout(function(){<br>console.log(num++);<br>},3000);</p><p>使用clearTimeout()来关闭一个延时调用<br>clearTimeout(timer);</p><p>#类的操作</p><p><strong>直接修改元素的类css：</strong></p><p>通过style属性来修改元素的样式，每修改一个样式，浏览器就需要重新渲染一次页面。 这样的执行的性能是比较差的，而且这种形式当我们要修改多个样式时，也不太方便 我希望一行代码，可以同时修改多个样式</p><p>我们可以通过修改元素的class属性来间接的修改样式.这样一来，我们只需要修改一次，即可同时修改多个样式，浏览器只需要重新渲染页面一次，性能比较好，<br>并且这种方式，可以使表现和行为进一步的分离</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">box.className += <span class="string">" b2"</span>;<span class="comment">//注意有空格，添加class属性</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个函数，用来向一个元素中添加指定的class属性值</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 参数:</span></span><br><span class="line"><span class="comment"> * obj 要添加class属性的元素</span></span><br><span class="line"><span class="comment"> *  cn 要添加的class值</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addClass</span>(<span class="params">obj, cn</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!hasClass(obj, cn)) &#123;</span><br><span class="line">obj.className += <span class="string">" "</span> + cn;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 判断一个元素中是否含有指定的class属性值</span></span><br><span class="line"><span class="comment"> * 如果有该class，则返回true，没有则返回false</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasClass</span>(<span class="params">obj, cn</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"\\b"</span> + cn + <span class="string">"\\b"</span>);</span><br><span class="line"><span class="keyword">return</span> reg.test(obj.className);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 删除一个元素中的指定的class属性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeClass</span>(<span class="params">obj, cn</span>) </span>&#123;</span><br><span class="line"><span class="comment">//创建一个正则表达式</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"\\b"</span> + cn + <span class="string">"\\b"</span>);</span><br><span class="line"><span class="comment">//删除class</span></span><br><span class="line">obj.className = obj.className.replace(reg, <span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * toggleClass可以用来切换一个类</span></span><br><span class="line"><span class="comment"> * 如果元素中具有该类，则删除</span></span><br><span class="line"><span class="comment"> * 如果元素中没有该类，则添加</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toggleClass</span>(<span class="params">obj , cn</span>)</span>&#123;</span><br><span class="line"><span class="comment">//判断obj中是否含有cn</span></span><br><span class="line"><span class="keyword">if</span>(hasClass(obj , cn))&#123;</span><br><span class="line"><span class="comment">//有，则删除</span></span><br><span class="line">removeClass(obj , cn);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//没有，则添加</span></span><br><span class="line">addClass(obj , cn);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><p> <strong>JavaScript Object Notation</strong> JS对象表示法</p><p>JS中的对象只有JS自己认识，其他的语言都不认识<br><strong>JSON就是一个特殊格式的字符串</strong>，这个字符串可以被任意的语言所识别，<br>并且可以转换为任意语言中的对象，JSON在开发中主要用来数据的交互<br> JSON和JS对象的格式一样，只不过JSON字符串中的属性名必须加双引号<br>    其他的和JS语法一致<br>JSON分类：<br>    1.对象 {}<br>    2.数组 []</p><p>JSON中允许的值：<br>    1.字符串<br>    2.数值<br>    3.布尔值<br>    4.null<br>    5.对象<br>    6.数组</p><p>举例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="string">'[1,2,3,"hello",true]'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="string">'&#123;"arr":[1,2,3]&#125;'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr2 =<span class="string">'[&#123;"name":"孙悟空","age":18,"gender":"男"&#125;,&#123;"name":"孙悟空","age":18,"gender":"男"&#125;]'</span>;</span><br></pre></td></tr></table></figure><p>JSON工具类</p><p>json &gt; js对象<br>JSON.parse()<br> 可以将以JSON字符串转换为js对象<br> 它需要一个JSON字符串作为参数，会将该字符串转换为JS对象并返回</p><p>var o = JSON.parse(json);<br>var o2 = JSON.parse(arr);</p><p>var obj3 = {name:”猪八戒” , age:28 , gender:”男”};</p><p>JS对象 &gt; JSON<br>JSON.stringify()                -ify/fy，表示”使……化。<br> 可以将一个JS对象转换为JSON字符串<br> 需要一个js对象作为参数，会返回一个JSON字符串</p><p>var str = JSON.stringify(obj3);<br>console.log(str);</p><p>JSON这个对象在IE7及以下的浏览器中不支持，所以在这些浏览器中调用时会报错</p><h2 id="原生js"><a href="#原生js" class="headerlink" title="# 原生js"></a># 原生js</h2><h2 id="原生js实现复制内容到剪切板"><a href="#原生js实现复制内容到剪切板" class="headerlink" title="原生js实现复制内容到剪切板"></a>原生js实现复制内容到剪切板</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">copy() &#123;</span><br><span class="line">    <span class="keyword">const</span> input = <span class="built_in">document</span>.createElement(<span class="string">"input"</span>);</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(input);</span><br><span class="line">    input.setAttribute(<span class="string">"value"</span>,<span class="keyword">this</span>.solution.code);</span><br><span class="line">    input.select();</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.execCommand(<span class="string">"copy"</span>)) &#123;</span><br><span class="line">        <span class="built_in">document</span>.execCommand(<span class="string">"copy"</span>);</span><br><span class="line">        <span class="comment">// console.log("复制成功");</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">document</span>.body.removeChild(input);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​            </p><h1 id="other"><a href="#other" class="headerlink" title="other"></a>other</h1><p>eval()<br> 这个函数可以用来执行一段字符串形式的JS代码，并将执行结果返回<br> 如果使用eval()执行的字符串中含有{},它会将{}当成是代码块<br>    如果不希望将其当成代码块解析，则需要在字符串前后各加一个()</p><p> eval()这个函数的功能很强大，可以直接执行一个字符串中的js代码，<br>    但是在开发中尽量不要使用，首先它的执行性能比较差，然后它还具有安全隐患</p><pre><code>var str = &apos;{&quot;name&quot;:&quot;孙悟空&quot;,&quot;age&quot;:18,&quot;gender&quot;:&quot;男&quot;}&apos;;var obj = eval(&quot;(&quot;+str+&quot;)&quot;);</code></pre><p>编码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * 在字符串中使用转义字符输入Unicode编码</span><br><span class="line"> * \u四位编码</span><br><span class="line"> */</span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">"\u2620"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--在网页中使用Unicode编码</span></span><br><span class="line"><span class="comment">&amp;#编码; 这里的编码需要的是10进制</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">"font-size: 200px;"</span>&gt;</span>&amp;#9760;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">"font-size: 200px;"</span>&gt;</span>&amp;#9856;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong><a> 取消默认行为</a></strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hrefs[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">hrefs[i].parentNode.removeChild(hrefs[i]);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 点击超链接以后，超链接会跳转页面，这是超链接的默认行为</span></span><br><span class="line"><span class="comment"> * 如果我们不想出现默认行为，可以returnfalse，取消</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>响应函数只在响应时执行，而其他（for循环）早已在window.onload时执行完毕</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//为每个超链接都绑定一个单击响应函数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span> ; i &lt; allA.length ; i++)&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * for循环会在页面加载完成之后立即执行，</span></span><br><span class="line"><span class="comment"> * 而响应函数会在超链接被点击时才执行</span></span><br><span class="line"><span class="comment"> * 当响应函数执行时，for循环早已执行完毕</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">alert(<span class="string">"for循环正在执行"</span>+i);</span><br><span class="line">allA[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(<span class="string">"响应函数正在执行"</span>+i);</span><br><span class="line"><span class="comment">//alert(allA[i]);</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>confirm()用于弹出一个带有确认和取消按钮的提示框<br>需要一个字符串作为参数，该字符串将会作为提示文字显示出来<br>如果用户点击确认则会返回true，如果点击取消则返回false<br>var flag = confirm(“确认删除”+name+”吗?”);</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;&lt;h1 id=&quot;localStorage&quot;&gt;&lt;a href=&quot;#localStorage&quot; class=&quot;headerlink&quot; title=&quot;localStorage&quot;&gt;&lt;/a&gt;localStorage&lt;/h1&gt;&lt;p&gt;只读的&lt;code&gt;localStorage&lt;/code&gt; 属性允许你访问一个&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/API/Document&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;Document&lt;/code&gt;&lt;/a&gt; 源（origin）的对象 &lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/API/Storage&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;Storage&lt;/code&gt;&lt;/a&gt;；其存储的数据能在跨浏览器会话保留。&lt;code&gt;localStorage&lt;/code&gt; 类似 &lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/API/Window/sessionStorage&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;sessionStorage&lt;/code&gt;&lt;/a&gt;，但其区别在于：存储在 &lt;code&gt;localStorage&lt;/code&gt; 的数据可以长期保留；而当页面会话结束——也就是说，当页面被关闭时，存储在 &lt;code&gt;sessionStorage&lt;/code&gt; 的数据会被清除 。&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记-js" scheme="https://codeofli.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-js/"/>
    
    
      <category term="js" scheme="https://codeofli.github.io/tags/js/"/>
    
      <category term="前端" scheme="https://codeofli.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>vue</title>
    <link href="https://codeofli.github.io/2019/11/js-note/vue/vue/"/>
    <id>https://codeofli.github.io/2019/11/js-note/vue/vue/</id>
    <published>2019-11-11T15:23:44.000Z</published>
    <updated>2019-11-12T02:17:00.498Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第-1-章：-Vue-核心"><a href="#第-1-章：-Vue-核心" class="headerlink" title="第 1 章： Vue 核心"></a>第 1 章： Vue 核心</h1><h2 id="1-1-Vue-的基本认识"><a href="#1-1-Vue-的基本认识" class="headerlink" title="1.1. Vue 的基本认识"></a>1.1. Vue 的基本认识</h2><p>1.1.1. 官网</p><p>1) 英文官网: <a href="https://vuejs.org/" target="_blank" rel="noopener">https://vuejs.org/</a><br>2) 中文官网: <a href="https://cn.vuejs.org/" target="_blank" rel="noopener">https://cn.vuejs.org/</a></p><h3 id="1-1-2-介绍描述"><a href="#1-1-2-介绍描述" class="headerlink" title="1.1.2. 介绍描述"></a>1.1.2. 介绍描述</h3><p>1) 渐进式 JavaScript 框架<br>2) 作者: 尤雨溪(一位华裔前 Google 工程师)<br>3) 作用: 动态构建用户界面</p><a id="more"></a><h3 id="1-1-3-Vue-的特点"><a href="#1-1-3-Vue-的特点" class="headerlink" title="1.1.3. Vue 的特点"></a>1.1.3. Vue 的特点</h3><p>1) 遵循 MVVM 模式<br>2) 编码简洁, 体积小, 运行效率高, 适合移动/PC 端开发<br>3) 它本身只关注 UI, 可以轻松引入 vue 插件或其它第三库开发项目</p><h3 id="1-1-4-与其它前端-JS-框架的关联"><a href="#1-1-4-与其它前端-JS-框架的关联" class="headerlink" title="1.1.4. 与其它前端 JS 框架的关联"></a>1.1.4. 与其它前端 JS 框架的关联</h3><p>1) 借鉴 angular 的<strong>模板和数据绑定</strong>技术<br>2) 借鉴 react 的<strong>组件化和虚拟 DOM 技术</strong> </p><h3 id="1-1-5-Vue-扩展插件"><a href="#1-1-5-Vue-扩展插件" class="headerlink" title="1.1.5. Vue 扩展插件"></a>1.1.5. Vue 扩展插件</h3><p>1) vue-cli: vue 脚手架<br>2) vue-resource(axios): ajax 请求<br>3) vue-router: 路由<br>4) vuex: 状态管理<br>5) vue-lazyload: 图片懒加载<br>6) vue-scroller: 页面滑动相关<br>7) mint-ui: 基于 vue 的 UI 组件库(移动端)<br>8) element-ui: 基于 vue 的 UI 组件库(PC 端) </p><h2 id="1-2-Vue-的基本使用"><a href="#1-2-Vue-的基本使用" class="headerlink" title="1.2. Vue 的基本使用"></a>1.2. Vue 的基本使用</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"username"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, &#123;&#123;username&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            username: <span class="string">'atguigu'</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-2-3-使用-vue-开发者工具调试"><a href="#1-2-3-使用-vue-开发者工具调试" class="headerlink" title="1.2.3. 使用 vue 开发者工具调试"></a>1.2.3. 使用 vue 开发者工具调试</h3><p><a href="https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd?hl=zh-CN" target="_blank" rel="noopener">Vue.jsdevtools-翻墙安装方式-推荐</a></p><h3 id="1-2-4-理解Vue的MVVM"><a href="#1-2-4-理解Vue的MVVM" class="headerlink" title="1.2.4.理解Vue的MVVM"></a>1.2.4.理解Vue的MVVM</h3><p><img src="/2019/11/js-note/vue/vue/1569983854283.png" alt="1569983854283"></p><h2 id="1-3-模板语法"><a href="#1-3-模板语法" class="headerlink" title="1.3. 模板语法"></a>1.3. 模板语法</h2><h3 id="1-3-2-模板的理解"><a href="#1-3-2-模板的理解" class="headerlink" title="1.3.2.模板的理解"></a>1.3.2.模板的理解</h3><p>1) 动态的 html 页面<br>2) 包含了一些 JS 语法代码<br>a. 双大括号表达式<br>b. 指令(以 v-开头的自定义标签属性)</p><h3 id="1-3-3-双大括号表达式"><a href="#1-3-3-双大括号表达式" class="headerlink" title="1.3.3. 双大括号表达式"></a>1.3.3. 双大括号表达式</h3><p>1) 语法: <br>2) 功能: 向页面输出数据<br>3) 可以调用对象的方法</p><h3 id="1-3-4-指令一-强制数据绑定"><a href="#1-3-4-指令一-强制数据绑定" class="headerlink" title="1.3.4. 指令一: 强制数据绑定"></a>1.3.4. 指令一: 强制数据绑定</h3><p>1) 功能: 指定变化的属性值<br>2) 完整写法: v-bind:xxx=’yyy’ //yyy 会作为表达式解析执行<br>3) 简洁写法: :xxx=’yyy’</p><h3 id="1-3-5-指令二-绑定事件监听"><a href="#1-3-5-指令二-绑定事件监听" class="headerlink" title="1.3.5. 指令二: 绑定事件监听"></a>1.3.5. 指令二: 绑定事件监听</h3><p>1) 功能: 绑定指定事件名的回调函数<br>2) 完整写法:<br>v-on:keyup=’xxx’<br>v-on:keyup=’xxx(参数)’<br>v-on:keyup.enter=’xxx’<br>3) 简洁写法:<br>@keyup=’xxx’<br>@keyup.enter=’xx</p><h3 id="1-3-6-编码"><a href="#1-3-6-编码" class="headerlink" title="1.3.6. 编码"></a>1.3.6. 编码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>1. 双大括号表达式<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;msg.toUpperCase()&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>2. 指令一: 强制数据绑定<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"url"</span>&gt;</span>访问指定站点<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="comment">&lt;!--不能使用--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">"url"</span>&gt;</span>访问指定站点 2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">"url"</span>&gt;</span>访问指定站点 3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>3. 指令二: 绑定事件监听<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"handleClick"</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"handleClick"</span>&gt;</span>点我 2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="actionscript">        data: &#123;<span class="comment">// data 的所有属性都会成功 vm 对象的属性, 而模板页面中可以直接访问</span></span></span><br><span class="line"><span class="actionscript">            msg: <span class="string">'NBA I Love This Game!'</span>,</span></span><br><span class="line"><span class="actionscript">            url: <span class="string">'http://www.baidu.com'</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            handleClick () &#123;</span><br><span class="line"><span class="actionscript">                alert(<span class="string">'处理点击'</span>)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-3-8-v-model和双向数据绑定"><a href="#1-3-8-v-model和双向数据绑定" class="headerlink" title="1.3.8 v-model和双向数据绑定`"></a>1.3.8 v-model<code>和</code>双向数据绑定`</h3><p><strong>v-model 只能运用在 表单元素和组件中</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- v-bind 只能实现数据的单向绑定，从 M 自动绑定到 V， 无法实现数据的双向绑定  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-bind:value</span>=<span class="string">"msg"</span> <span class="attr">style</span>=<span class="string">"width:100%;"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用  v-model 指令，可以实现 表单元素和 Model 中数据的双向数据绑定 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- input(radio, text, address, email....)   select    checkbox   textarea   --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">style</span>=<span class="string">"width:100%;"</span> <span class="attr">v-model</span>=<span class="string">"msg"</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="自定义组件的-v-model"><a href="#自定义组件的-v-model" class="headerlink" title="自定义组件的 v-model"></a><a href="https://cn.vuejs.org/v2/guide/components-custom-events.html#自定义组件的-v-model" target="_blank" rel="noopener">自定义组件的 <code>v-model</code></a></h2><p>一个组件上的 <code>v-model</code> 默认会利用名为 <code>value</code> 的 prop 和名为 <code>input</code> 的事件，但是像单选框、复选框等类型的输入控件可能会将 <code>value</code> 特性用于<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox#Value" target="_blank" rel="noopener">不同的目的</a>。</p><h2 id="1-4-计算属性和监视"><a href="#1-4-计算属性和监视" class="headerlink" title="1.4. 计算属性和监视"></a>1.4. 计算属性和监视</h2><h3 id="1-4-2-计算属性"><a href="#1-4-2-计算属性" class="headerlink" title="1.4.2. 计算属性"></a>1.4.2. 计算属性</h3><p>1) 在 computed 属性对象中定义计算属性的方法<br>2) 在页面中使用来显示计算的结果</p><h3 id="1-4-3-监视属性"><a href="#1-4-3-监视属性" class="headerlink" title="1.4.3. 监视属性"></a>1.4.3. 监视属性</h3><p>1) 通过通过 vm 对象的$watch()或 watch 配置来监视指定的属性<br>2) 当属性变化时, 回调函数自动调用, 在函数内部进行计算</p><h3 id="watch-属性的使用"><a href="#watch-属性的使用" class="headerlink" title="watch`属性的使用"></a>watch`属性的使用</h3><p>考虑一个问题：想要实现 <code>名</code> 和 <code>姓</code> 两个文本框的内容改变，则全名的文本框中的值也跟着改变；（用以前的知识如何实现？？？）</p><p>1.监听<code>data</code>中属性的改变：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"text"</span> v-model=<span class="string">"firstName"</span>&gt; +</span><br><span class="line">    &lt;input type=<span class="string">"text"</span> v-model=<span class="string">"lastName"</span>&gt; =</span><br><span class="line">    &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      el: <span class="string">'#app'</span>,</span><br><span class="line">      data: &#123;</span><br><span class="line">        firstName: <span class="string">'jack'</span>,</span><br><span class="line">        lastName: <span class="string">'chen'</span>,</span><br><span class="line">        fullName: <span class="string">'jack - chen'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;,</span><br><span class="line">      watch: &#123;</span><br><span class="line">        <span class="string">'firstName'</span>: <span class="function"><span class="keyword">function</span> (<span class="params">newVal, oldVal</span>) </span>&#123; <span class="comment">// 第一个参数是新数据，第二个参数是旧数据</span></span><br><span class="line">          <span class="keyword">this</span>.fullName = newVal + <span class="string">' - '</span> + <span class="keyword">this</span>.lastName;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">'lastName'</span>: <span class="function"><span class="keyword">function</span> (<span class="params">newVal, oldVal</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">this</span>.fullName = <span class="keyword">this</span>.firstName + <span class="string">' - '</span> + newVal;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>2.监听路由对象的改变：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;router-link to=<span class="string">"/login"</span>&gt;登录&lt;<span class="regexp">/router-link&gt;</span></span><br><span class="line"><span class="regexp">    &lt;router-link to="/</span>register<span class="string">"&gt;注册&lt;/router-link&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &lt;router-view&gt;&lt;/router-view&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  &lt;script&gt;</span></span><br><span class="line"><span class="string">    var login = Vue.extend(&#123;</span></span><br><span class="line"><span class="string">      template: '&lt;h1&gt;登录组件&lt;/h1&gt;'</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    var register = Vue.extend(&#123;</span></span><br><span class="line"><span class="string">      template: '&lt;h1&gt;注册组件&lt;/h1&gt;'</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    var router = new VueRouter(&#123;</span></span><br><span class="line"><span class="string">      routes: [</span></span><br><span class="line"><span class="string">        &#123; path: "</span>/login<span class="string">", component: login &#125;,</span></span><br><span class="line"><span class="string">        &#123; path: "</span>/register<span class="string">", component: register &#125;</span></span><br><span class="line"><span class="string">      ]</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // 创建 Vue 实例，得到 ViewModel</span></span><br><span class="line"><span class="string">    var vm = new Vue(&#123;</span></span><br><span class="line"><span class="string">      el: '#app',</span></span><br><span class="line"><span class="string">      data: &#123;&#125;,</span></span><br><span class="line"><span class="string">      methods: &#123;&#125;,</span></span><br><span class="line"><span class="string">      router: router,</span></span><br><span class="line"><span class="string">      watch: &#123;</span></span><br><span class="line"><span class="string">        '$route': function (newVal, oldVal) &#123;</span></span><br><span class="line"><span class="string">          if (newVal.path === '/login') &#123;</span></span><br><span class="line"><span class="string">            console.log('这是登录组件');</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">  &lt;/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-4-4-计算属性高级"><a href="#1-4-4-计算属性高级" class="headerlink" title="1.4.4. 计算属性高级"></a>1.4.4. 计算属性高级</h3><p>1) 通过 getter/setter 实现对属性数据的显示和监视<br>2) <strong>计算属性存在缓存, 多次读取只执行一次 getter 计算</strong></p><h3 id="computed计算属性的使用"><a href="#computed计算属性的使用" class="headerlink" title="computed计算属性的使用"></a><code>computed</code>计算属性的使用</h3><p>// 计算属性； 特点：当计算属性中所以来的任何一个 data 属性改变之后，都会重新触发 本计算属性 的重新计算，从而更新 fullName 的值<br>          <strong>注意1：</strong> 计算属性，在引用的时候，一定不要加 () 去调用，直接把它 当作 普通 属性去使用就好了；<br>        <strong>注意2：</strong> 只要 计算属性，这个 f<strong>unction 内部，所用到的 任何 data 中的数据发送了变化，就会 立即重新计算 这个 计算属性的值</strong><br>        <strong>注意3：</strong> 计算属性的求值结果，会被缓存起来，方便下次直接使用； 如果 计算属性方法中，所以来的任何数据，都没有发生过变化，则，不会重新对 计算属性求值；</p><ol><li>默认只有<code>getter</code>的计算属性：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"text"</span> v-model=<span class="string">"firstName"</span>&gt; +</span><br><span class="line">    &lt;input type=<span class="string">"text"</span> v-model=<span class="string">"lastName"</span>&gt; =</span><br><span class="line">    &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      el: <span class="string">'#app'</span>,</span><br><span class="line">      data: &#123;</span><br><span class="line">        firstName: <span class="string">'jack'</span>,</span><br><span class="line">        lastName: <span class="string">'chen'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;,</span><br><span class="line">      computed: &#123; </span><br><span class="line">        fullName() &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">' - '</span> + <span class="keyword">this</span>.lastName;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>2.定义有<code>getter</code>和<code>setter</code>的计算属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"text"</span> v-model=<span class="string">"firstName"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"text"</span> v-model=<span class="string">"lastName"</span>&gt;</span><br><span class="line">    &lt;!-- 点击按钮重新为 计算属性 fullName 赋值 --&gt;</span><br><span class="line">    &lt;input type=<span class="string">"button"</span> value=<span class="string">"修改fullName"</span> @click=<span class="string">"changeName"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      el: <span class="string">'#app'</span>,</span><br><span class="line">      data: &#123;</span><br><span class="line">        firstName: <span class="string">'jack'</span>,</span><br><span class="line">        lastName: <span class="string">'chen'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        changeName() &#123;</span><br><span class="line">          <span class="keyword">this</span>.fullName = <span class="string">'TOM - chen2'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      computed: &#123;</span><br><span class="line">        fullName: &#123;</span><br><span class="line">          <span class="keyword">get</span>: function () &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">' - '</span> + <span class="keyword">this</span>.lastName;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="keyword">set</span>: function (newVal) &#123;</span><br><span class="line">            <span class="keyword">var</span> parts = newVal.split(<span class="string">' - '</span>);</span><br><span class="line">            <span class="keyword">this</span>.firstName = parts[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">this</span>.lastName = parts[<span class="number">1</span>];</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-4-5-编码"><a href="#1-4-5-编码" class="headerlink" title="1.4.5. 编码"></a>1.4.5. 编码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span></span><br><span class="line">    姓: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"First Name"</span> <span class="attr">v-model</span>=<span class="string">"firstName"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    名: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"Last Name"</span> <span class="attr">v-model</span>=<span class="string">"lastName"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    姓名 1(单向): <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"Full Name"</span> <span class="attr">v-model</span>=<span class="string">"fullName1"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    姓名 2(单向): <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"Full Name"</span> <span class="attr">v-model</span>=<span class="string">"fullName2"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    姓名 3(双向): <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"Full Name2"</span> <span class="attr">v-model</span>=<span class="string">"fullName3"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#demo'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            firstName: <span class="string">'Kobe'</span>,</span></span><br><span class="line"><span class="actionscript">            lastName: <span class="string">'bryant'</span>,</span></span><br><span class="line"><span class="actionscript">            fullName2: <span class="string">'Kobe bryant'</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        computed: &#123;</span><br><span class="line"><span class="actionscript">            fullName: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">" "</span> + <span class="keyword">this</span>.lastName</span></span><br><span class="line">            &#125;,</span><br><span class="line">            fullName3: &#123;</span><br><span class="line"><span class="actionscript">                <span class="keyword">get</span>: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">" "</span> + <span class="keyword">this</span>.lastName</span></span><br><span class="line">                &#125;,</span><br><span class="line"><span class="actionscript">                <span class="keyword">set</span>: <span class="function"><span class="keyword">function</span> <span class="params">(value)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">var</span> names = value.split(<span class="string">' '</span>)</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.firstName = names[<span class="number">0</span>]</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.lastName = names[<span class="number">1</span>]</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        watch: &#123;</span><br><span class="line"><span class="actionscript">            lastName: <span class="function"><span class="keyword">function</span> <span class="params">(newVal, oldVal)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.fullName2 = <span class="keyword">this</span>.firstName + <span class="string">' '</span> + newVal</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="actionscript">    vm.$watch(<span class="string">'firstName'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(val)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.fullName2 = val + <span class="string">' '</span> + <span class="keyword">this</span>.lastName</span></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h3 id="watch、computed和methods-之间的对比"><a href="#watch、computed和methods-之间的对比" class="headerlink" title="``watch、computed和methods`之间的对比"></a>``watch<code>、</code>computed<code>和</code>methods`之间的对比</h3><ol><li><code>computed</code>属性的结果会被缓存，除非依赖的响应式属性变化才会重新计算。主要当作属性来使用；</li><li><code>methods</code>方法表示一个具体的操作，主要书写业务逻辑；</li><li><code>watch</code>一个对象，键是需要观察的表达式，值是对应回调函数。主要用来监听某些特定数据的变化，从而进行某些具体的业务逻辑操作；可以看作是<code>computed</code>和<code>methods</code>的结合体；</li></ol><h2 id="1-5-class-与-style-绑定"><a href="#1-5-class-与-style-绑定" class="headerlink" title="1.5. class 与 style 绑定"></a>1.5. class 与 style 绑定</h2><h3 id="1-5-2-理解"><a href="#1-5-2-理解" class="headerlink" title="1.5.2. 理解"></a>1.5.2. 理解</h3><p>1) 在应用界面中, 某个(些)元素的样式是变化的<br>2) class/style 绑定就是专门用来实现动态样式效果的技术</p><h3 id="1-5-3-class-绑定（使用class样式）"><a href="#1-5-3-class-绑定（使用class样式）" class="headerlink" title="1.5.3. class 绑定（使用class样式）"></a>1.5.3. class 绑定（使用class样式）</h3><p>1) :class=’xxx’<br>2) 表达式是字符串: ‘classA’<br>3) 表达式是对象: {classA:isA, classB: isB}<br>4) 表达式是数组: [‘classA’, ‘classB’]</p><p>1.数组</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">:class</span>=<span class="string">"['red', 'thin']"</span>&gt;</span>这是一个邪恶的H1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.数组中使用三元表达式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">:class</span>=<span class="string">"['red', 'thin', isactive?'active':'']"</span>&gt;</span>这是一个邪恶的H1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.数组中嵌套对象</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">:class</span>=<span class="string">"['red', 'thin', &#123;'active': isactive&#125;]"</span>&gt;</span>这是一个邪恶的H1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4.直接使用对象</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">:class</span>=<span class="string">"&#123;red:true, italic:true, active:true, thin:true&#125;"</span>&gt;</span>这是一个邪恶的H1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong><br><strong>如果类名中有-，必须用<code>&#39;&#39;</code>括起来,不然没有用</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">:class</span>=<span class="string">"&#123;'page-item': true,active: true&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-5-4-style-绑定"><a href="#1-5-4-style-绑定" class="headerlink" title="1.5.4. style 绑定"></a>1.5.4. style 绑定</h3><p>1) :style=”{ color: activeColor, fontSize: fontSize + ‘px’ }”<br>2) 其中 activeColor/fontSize 是 data 属性</p><h3 id="1-5-5-编吗"><a href="#1-5-5-编吗" class="headerlink" title="1.5.5. 编吗"></a>1.5.5. 编吗</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.classA</span> &#123;</span></span><br><span class="line">        color: red;</span><br><span class="line">    &#125; .</span><br><span class="line">    classB &#123;</span><br><span class="line">        background: blue;</span><br><span class="line">    &#125; .</span><br><span class="line">    classC &#123;</span><br><span class="line">        font-size: 20px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>1. class 绑定: :class='xxx'<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"classB"</span> <span class="attr">:class</span>=<span class="string">"a"</span>&gt;</span>表达式是字符串: 'classA'<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">:class</span>=<span class="string">"&#123;classA: isA, classB: isB&#125;"</span>&gt;</span>表达式是对象: &#123;classA:isA, classB: isB&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">:class</span>=<span class="string">"['classA', 'classC']"</span>&gt;</span> 表达式是数组: ['classA', 'classB']<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>2. style 绑定<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">:style</span>=<span class="string">"&#123;color, fontSize&#125;"</span>&gt;</span>style="&#123; color: activeColor, fontSize: fontSize +</span><br><span class="line">        'px' &#125;"<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"update"</span>&gt;</span>更新<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el : <span class="string">'#demo'</span>,</span></span><br><span class="line">        data : &#123;</span><br><span class="line"><span class="actionscript">            a: <span class="string">'classA'</span>,</span></span><br><span class="line"><span class="actionscript">            isA: <span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">            isB: <span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">            color: <span class="string">'red'</span>,</span></span><br><span class="line"><span class="actionscript">            fontSize: <span class="string">'20px'</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods : &#123;</span><br><span class="line">            update () &#123;</span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.a = <span class="string">'classC'</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.isA = <span class="literal">false</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.isB = <span class="literal">true</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.color = <span class="string">'blue'</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.fontSize = <span class="string">'30px'</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-6-条件渲染"><a href="#1-6-条件渲染" class="headerlink" title="1.6. 条件渲染"></a>1.6. 条件渲染</h2><h3 id="1-6-2-条件渲染指令"><a href="#1-6-2-条件渲染指令" class="headerlink" title="1.6.2. 条件渲染指令"></a>1.6.2. 条件渲染指令</h3><p>1) v-if 与 v-else<br>2) v-show</p><h3 id="1-6-3-比较-v-if-与-v-show"><a href="#1-6-3-比较-v-if-与-v-show" class="headerlink" title="1.6.3. 比较 v-if 与 v-show"></a>1.6.3. 比较 v-if 与 v-show</h3><p>3)<strong>如果需要频繁切换 v-show 较好</strong><br>4)<strong>当条件不成立时, v-if 的所有子节点不会解析(项目中使用)</strong></p><h3 id="1-6-4-编码"><a href="#1-6-4-编码" class="headerlink" title="1.6.4. 编码"></a>1.6.4. 编码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-if</span>=<span class="string">"ok"</span>&gt;</span>表白成功<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-else</span>&gt;</span>表白失败<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-show</span>=<span class="string">"ok"</span>&gt;</span>求婚成功<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-show</span>=<span class="string">"!ok"</span>&gt;</span>求婚失败<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"ok=!ok"</span>&gt;</span>切换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#demo'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            ok: <span class="literal">false</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-7-列表渲染"><a href="#1-7-列表渲染" class="headerlink" title="1.7. 列表渲染"></a>1.7. 列表渲染</h2><p>1) 列表显示指令<br>数组: v-for / index<br>对象: v-for / key<br>2) 列表的更新显示<br>删除 item<br>替换 item<br>3) 列表的高级处理<br>列表过滤<br>列表排序</p><p><a href="https://cn.vuejs.org/v2/guide/list.html#注意事项" target="_blank" rel="noopener"><strong>注意事项</strong></a></p><p>由于 JavaScript 的限制，Vue <strong>不能</strong>检测以下数组的变动：</p><ol><li>当你<strong>利用索引直接设置一个数组项时</strong>，例如：<code>vm.items[indexOfItem] = newValue</code></li><li>当你<strong>修改数组的长度时</strong>，例如：<code>vm.items.length = newLength</code></li></ol><h3 id="1-7-2-编码"><a href="#1-7-2-编码" class="headerlink" title="1.7.2. 编码"></a>1.7.2. 编码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>测试: v-for 遍历数组<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(p, index) in persons"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">            &#123;&#123;index&#125;&#125;--&#123;&#123;p.name&#125;&#125;--&#123;&#123;p.age&#125;&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"deleteItem(index)"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"updateItem(index, &#123;name:'Jok',age:15&#125;)"</span>&gt;</span>更新<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>测试: v-for 遍历对象<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(value, key) in persons[0]"</span>&gt;</span></span><br><span class="line">            &#123;&#123; key &#125;&#125; : &#123;&#123; value &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#demo'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line">            persons: [</span><br><span class="line"><span class="actionscript">                &#123;id: <span class="number">1</span>, name: <span class="string">'Tom'</span>, age: <span class="number">13</span>&#125;,</span></span><br><span class="line"><span class="actionscript">                &#123;id: <span class="number">2</span>, name: <span class="string">'Jack'</span>, age: <span class="number">12</span>&#125;,</span></span><br><span class="line"><span class="actionscript">                &#123;id: <span class="number">3</span>, name: <span class="string">'Bob'</span>, age: <span class="number">14</span>&#125;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            deleteItem(index) &#123;</span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.persons.splice(index, <span class="number">1</span>)</span></span><br><span class="line">            &#125;,</span><br><span class="line">            updateItem(index, p) &#123;</span><br><span class="line"><span class="actionscript">                <span class="comment">// this.persons[index] = p // 页面不会更新</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.persons.splice(index, <span class="number">1</span>, p)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"searchName"</span> <span class="attr">placeholder</span>=<span class="string">"搜索指定用户名"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">v-model</span>=<span class="string">"searchName"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(p, index) in filterPerson"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">            &#123;&#123;index&#125;&#125;--&#123;&#123;p.name&#125;&#125;--&#123;&#123;p.age&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"setOrderType(1)"</span>&gt;</span>年龄升序<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"setOrderType(2)"</span>&gt;</span>年龄降序<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"setOrderType(0)"</span>&gt;</span>原本顺序<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#demo'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            orderType: <span class="number">0</span>, <span class="comment">//0 代表不排序, 1 为升序, 2 为降序</span></span></span><br><span class="line"><span class="actionscript">            searchName: <span class="string">''</span>,</span></span><br><span class="line">            persons: [</span><br><span class="line"><span class="actionscript">                &#123;id: <span class="number">1</span>, name: <span class="string">'Tom'</span>, age: <span class="number">13</span>&#125;,</span></span><br><span class="line"><span class="actionscript">                &#123;id: <span class="number">2</span>, name: <span class="string">'Jack'</span>, age: <span class="number">12</span>&#125;,</span></span><br><span class="line"><span class="actionscript">                &#123;id: <span class="number">3</span>, name: <span class="string">'Bob'</span>, age: <span class="number">17</span>&#125;,</span></span><br><span class="line"><span class="actionscript">                &#123;id: <span class="number">4</span>, name: <span class="string">'Cat'</span>, age: <span class="number">14</span>&#125;,</span></span><br><span class="line"><span class="actionscript">                &#123;id: <span class="number">4</span>, name: <span class="string">'Mike'</span>, age: <span class="number">14</span>&#125;,</span></span><br><span class="line"><span class="actionscript">                &#123;id: <span class="number">4</span>, name: <span class="string">'Monica'</span>, age: <span class="number">16</span>&#125;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            setOrderType (orderType) &#123;</span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.orderType = orderType</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        computed: &#123;</span><br><span class="line">            filterPerson() &#123;</span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> &#123;orderType, searchName, persons&#125; = <span class="keyword">this</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 过滤</span></span></span><br><span class="line"><span class="javascript">                persons = persons.filter(<span class="function"><span class="params">p</span> =&gt;</span> p.name.indexOf(searchName)!=<span class="number">-1</span>)</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 排序</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">if</span>(orderType!==<span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="actionscript">                    persons = persons.sort(<span class="function"><span class="keyword">function</span> <span class="params">(p1, p2)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">if</span>(orderType===<span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="actionscript">                            <span class="keyword">return</span> p1.age-p2.age</span></span><br><span class="line"><span class="actionscript">                        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">                            <span class="keyword">return</span> p2.age-p1.age</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125; r</span><br><span class="line">                eturn persons</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-8-事件处理"><a href="#1-8-事件处理" class="headerlink" title="1.8. 事件处理"></a>1.8. 事件处理</h2><h3 id="1-8-2-绑定监听"><a href="#1-8-2-绑定监听" class="headerlink" title="1.8.2. 绑定监听"></a>1.8.2. 绑定监听</h3><p>1) v-on:xxx=”fun”<br>2) @xxx=”fun”<br>3) @xxx=”fun(参数)”<br>4) 默认事件形参: event </p><p><strong><code>event</code> 是原生 DOM 事件</strong><br>5) 隐含属性对象: $event</p><h3 id="1-8-3-事件修饰符"><a href="#1-8-3-事件修饰符" class="headerlink" title="1.8.3. 事件修饰符"></a>1.8.3. 事件修饰符</h3><p>1) .prevent : 阻止事件的默认行为 event.preventDefault()<br>2) .stop : 停止事件冒泡 event.stopPropagation()</p><h3 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h3><ul><li><p>.stop       阻止冒泡</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用  .stop  阻止冒泡 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span> @<span class="attr">click</span>=<span class="string">"div1Handler"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"戳他"</span> @<span class="attr">click.stop</span>=<span class="string">"btnHandler"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>.prevent    阻止默认事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用 .prevent 阻止默认行为 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.baidu.com"</span> @<span class="attr">click.prevent</span>=<span class="string">"linkClick"</span>&gt;</span>有问题，先去百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>.capture    添加事件侦听器时使用事件捕获模式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用  .capture 实现捕获触发事件的机制 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span> @<span class="attr">click.capture</span>=<span class="string">"div1Handler"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"戳他"</span> @<span class="attr">click</span>=<span class="string">"btnHandler"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>.self       只当事件在该元素本身（比如不是子元素）触发时触发回调</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用 .self 实现只有点击当前元素时候，才会触发事件处理函数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span> @<span class="attr">click</span>=<span class="string">"div1Handler"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"戳他"</span> @<span class="attr">click</span>=<span class="string">"btnHandler"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>.once       事件只触发一次</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用 .once 只触发一次事件处理函数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.baidu.com"</span> @<span class="attr">click.prevent.once</span>=<span class="string">"linkClick"</span>&gt;</span>有问题，先去百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-8-4-按键修饰符"><a href="#1-8-4-按键修饰符" class="headerlink" title="1.8.4. 按键修饰符"></a>1.8.4. 按键修饰符</h3><p>1) .keycode : 操作的是某个 keycode 值的键<br>2) .keyName : 操作的某个按键名的键(少部分)</p><h3 id="1-8-5-编码"><a href="#1-8-5-编码" class="headerlink" title="1.8.5. 编码"></a>1.8.5. 编码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>1. 绑定监听<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"test1"</span>&gt;</span>Greet<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"test1"</span>&gt;</span>Greet2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"test2($event, 'hello')"</span>&gt;</span>Greet3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>2. 事件修饰符<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 阻止事件默认行为 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.baidu.com"</span> @<span class="attr">click.prevent</span>=<span class="string">"test3"</span>&gt;</span>百度一下<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 停止事件冒泡 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width: 200px;height: 200px;background: red"</span> @<span class="attr">click</span>=<span class="string">"test4"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width: 100px;height: 100px;background: green"</span></span></span><br><span class="line"><span class="tag">             @<span class="attr">click.stop</span>=<span class="string">"test5"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>3. 按键修饰符<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.8</span>=<span class="string">"test6"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.enter</span>=<span class="string">"test6"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span> Vue(el: <span class="string">'#example'</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="actionscript">            name: <span class="string">'Vue.js'</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            test1 (event) &#123;</span><br><span class="line"><span class="actionscript">                <span class="comment">// 方法内 `this` 指向 vm</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// alert('Hello ' + this.name + '!')</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// `event` 是原生 DOM 事件</span></span></span><br><span class="line">                alert(event.target.innerHTML)</span><br><span class="line">            &#125;,</span><br><span class="line">                test2 (event, msg) &#123;</span><br><span class="line"><span class="actionscript">                    alert(event.target.innerHTML + <span class="string">'---'</span> + msg)</span></span><br><span class="line">                &#125;,</span><br><span class="line">                    test3() &#123;</span><br><span class="line"><span class="actionscript">                        alert(<span class="string">'阻止事件的默认行为'</span>)</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                        test4() &#123;</span><br><span class="line"><span class="actionscript">                            alert(<span class="string">'out'</span>)</span></span><br><span class="line">                        &#125;,</span><br><span class="line">                            test5() &#123;</span><br><span class="line"><span class="actionscript">                                alert(<span class="string">'inner'</span>)</span></span><br><span class="line">                            &#125;,</span><br><span class="line">                                test6(event) &#123;</span><br><span class="line"><span class="actionscript">                                    alert(event.keyCode + <span class="string">'---'</span> + event.target.value)</span></span><br><span class="line">                                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-9-表单输入绑定"><a href="#1-9-表单输入绑定" class="headerlink" title="1.9. 表单输入绑定"></a>1.9. 表单输入绑定</h2><h3 id="1-9-2-使用-v-model-对表单数据自动收集"><a href="#1-9-2-使用-v-model-对表单数据自动收集" class="headerlink" title="1.9.2. 使用 v-model 对表单数据自动收集"></a>1.9.2. 使用 v-model 对表单数据自动收集</h3><p>1) text/textarea<br>2) checkbox<br>3) radio<br>4) select</p><h3 id="1-9-3-编码"><a href="#1-9-3-编码" class="headerlink" title="1.9.3. 编码"></a>1.9.3. 编码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> @<span class="attr">submit.prevent</span>=<span class="string">"handleSubmit"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>用户名: <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"user.username"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>密码: <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">v-model</span>=<span class="string">"user.pwd"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>性别: <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">id</span>=<span class="string">"female"</span> <span class="attr">value</span>=<span class="string">"female"</span> <span class="attr">v-model</span>=<span class="string">"user.sex"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"female"</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">id</span>=<span class="string">"male"</span> <span class="attr">value</span>=<span class="string">"male"</span> <span class="attr">v-model</span>=<span class="string">"user.sex"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"male"</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>爱好: <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"basket"</span> <span class="attr">value</span>=<span class="string">"basketball"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">v-model</span>=<span class="string">"user.likes"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"basket"</span>&gt;</span>篮球<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"foot"</span> <span class="attr">value</span>=<span class="string">"football"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">v-model</span>=<span class="string">"user.likes"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"foot"</span>&gt;</span>足球<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"pingpang"</span> <span class="attr">value</span>=<span class="string">"pingpang"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">v-model</span>=<span class="string">"user.likes"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"pingpang"</span>&gt;</span>乒乓<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>城市: <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"user.cityId"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>未选择<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">v-for</span>=<span class="string">"city in allCitys"</span> <span class="attr">:value</span>=<span class="string">"city.id"</span>&gt;</span></span><br><span class="line">                &#123;&#123; city.name &#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>介绍: <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">v-model</span>=<span class="string">"user.desc"</span> <span class="attr">rows</span>=<span class="string">"10"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"注册"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#demo'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line">            user: &#123;</span><br><span class="line"><span class="actionscript">                username: <span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">                pwd: <span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">                sex: <span class="string">'female'</span>,</span></span><br><span class="line">                likes: [],</span><br><span class="line"><span class="actionscript">                cityId: <span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">                desc: <span class="string">''</span>,</span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            allCitys: [&#123;id: <span class="number">1</span>, name: <span class="string">'BJ'</span>&#125;, &#123;id: <span class="number">2</span>, name: <span class="string">'SZ'</span>&#125;,&#123;id: <span class="number">4</span>, name:</span></span><br><span class="line"><span class="actionscript">                                                                 <span class="string">'SH'</span>&#125;],</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            handleSubmit (event) &#123;</span><br><span class="line"><span class="javascript">                alert(<span class="built_in">JSON</span>.stringify(<span class="keyword">this</span>.user))</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-10-Vue-实例生命周期"><a href="#1-10-Vue-实例生命周期" class="headerlink" title="1.10. Vue 实例生命周期"></a>1.10. Vue 实例生命周期</h2><h3 id="1-10-2-生命周期流程图"><a href="#1-10-2-生命周期流程图" class="headerlink" title="1.10.2. 生命周期流程图"></a>1.10.2. 生命周期流程图</h3><p><img src="/2019/11/js-note/vue/vue/lifecycle.png" alt="img"></p><h3 id="vue实例的生命周期"><a href="#vue实例的生命周期" class="headerlink" title="vue实例的生命周期"></a><a href="https://cn.vuejs.org/v2/guide/instance.html#实例生命周期" target="_blank" rel="noopener">vue实例的生命周期</a></h3><ul><li>什么是生命周期：从Vue实例创建、运行、到销毁期间，总是伴随着各种各样的事件，这些事件，统称为生命周期！</li><li><a href="https://cn.vuejs.org/v2/api/#选项-生命周期钩子" target="_blank" rel="noopener">生命周期钩子</a>：就是生命周期事件的别名而已；</li><li>生命周期钩子 = 生命周期函数 = 生命周期事件</li><li>主要的生命周期函数分类：</li><li>创建期间的生命周期函数：</li><li><strong>beforeCreate</strong>：实例刚在内存中被创建出来，此时，还没有初始化好 data 和 methods 属性</li><li><strong>created</strong>：实例已经在内存中创建OK，此时 data 和 methods 已经创建OK，此时还没有开始 编译模板</li><li><strong>beforeMount</strong>：此时已经完成了模板的编译，但是还没有挂载到页面中</li><li><strong>mounted</strong>：此时，已经将编译好的模板，挂载到了页面指定的容器中显示</li><li>运行期间的生命周期函数：</li><li>beforeUpdate：状态更新之前执行此函数， 此时 data 中的状态值是最新的，但是界面上显示的 数据还是旧的，因为此时还没有开始重新渲染DOM节点</li><li><strong>updated：</strong>实例更新完毕之后调用此函数，此时 data 中的状态值 和 界面上显示的数据，都已经完成了更新，界面已经被重新渲染好了！</li><li>销毁期间的生命周期函数：</li><li>beforeDestroy：实例销毁之前调用。在这一步，实例仍然完全可用。</li><li>destroyed：Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。</li></ul><h3 id="1-10-3-vue-生命周期分析"><a href="#1-10-3-vue-生命周期分析" class="headerlink" title="1.10.3. vue 生命周期分析"></a>1.10.3. vue 生命周期分析</h3><p>1)初始化显示</p><p>beforeCreate()</p><p>created()</p><p>beforeMount()</p><p>mounted()</p><p>2)更新状态: this.xxx = value</p><p>beforeUpdate()<br>updated()</p><p>3)销毁 vue 实例: vm.$destory()</p><p>beforeDestory()<br>estoryed()</p><h3 id="1-10-4-常用的生命周期方法"><a href="#1-10-4-常用的生命周期方法" class="headerlink" title="1.10.4. 常用的生命周期方法"></a>1.10.4. 常用的生命周期方法</h3><p>1) created()/mounted(): 发送 ajax 请求, 启动定时器等异步任务<br>2) beforeDestory(): 做收尾工作, 如: 清除定时器</p><h3 id="1-10-5-编码"><a href="#1-10-5-编码" class="headerlink" title="1.10.5. 编码"></a>1.10.5. 编码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"destoryVue"</span>&gt;</span>destory vue<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">"isShowing"</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vue = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'div'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            msg: <span class="string">'尚硅谷 IT 教育'</span>,</span></span><br><span class="line"><span class="actionscript">            isShowing: <span class="literal">true</span>,</span></span><br><span class="line">            persons: []</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeCreate () &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'beforeCreate() msg='</span> + <span class="keyword">this</span>.msg)</span></span><br><span class="line"><span class="actionscript">            e.log(<span class="string">'created() msg='</span>+<span class="keyword">this</span>.msg)</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.intervalId = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">'-----'</span>)</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.isShowing = !<span class="keyword">this</span>.isShowing</span></span><br><span class="line">            &#125;, 1000)</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeMount () &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'beforeMount() msg='</span>+<span class="keyword">this</span>.msg)</span></span><br><span class="line">        &#125;,</span><br><span class="line">        mounted () &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'mounted() msg='</span>+<span class="keyword">this</span>.msg)</span></span><br><span class="line">        &#125;,</span><br><span class="line">        beforeUpdate() &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'beforeUpdate isShowing='</span>+<span class="keyword">this</span>.isShowing)</span></span><br><span class="line">        &#125;,</span><br><span class="line">        updated () &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'updated isShowing='</span>+<span class="keyword">this</span>.isShowing)</span></span><br><span class="line">        &#125;,</span><br><span class="line">        beforeDestroy () &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'beforeDestroy() msg='</span>+<span class="keyword">this</span>.msg)</span></span><br><span class="line"><span class="actionscript">            clearInterval(<span class="keyword">this</span>.intervalId)</span></span><br><span class="line">        &#125;,</span><br><span class="line">        destroyed () &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'destroyed() msg='</span>+<span class="keyword">this</span>.msg)</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            destoryVue () &#123;</span><br><span class="line">                vue.$destroy()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-11-过渡-amp-动画"><a href="#1-11-过渡-amp-动画" class="headerlink" title="1.11. 过渡&amp;动画"></a>1.11. 过渡&amp;动画</h2><h3 id="1-11-2-vue-动画的理解"><a href="#1-11-2-vue-动画的理解" class="headerlink" title="1.11.2. vue 动画的理解"></a>1.11.2. vue 动画的理解</h3><p>1) 操作 css 的 trasition 或 animation<br>2) vue 会给目标元素添加/移除特定的 class<br>3) 过渡的相关类名<br>xxx-enter-active: 指定显示的 transition<br>xxx-leave-active: 指定隐藏的 transition<br>xxx-enter/xxx-leave-to: 指定隐藏时的样式 </p><p><img src="/2019/11/js-note/vue/vue/1569986009888.png" alt="1569986009888"></p><h3 id="1-11-3-基本过渡动画的编码"><a href="#1-11-3-基本过渡动画的编码" class="headerlink" title="1.11.3. 基本过渡动画的编码"></a>1.11.3. 基本过渡动画的编码</h3><p>1) 在目标元素外包裹<code>&lt;transition name=&quot;xxx&quot;&gt;</code><br>2) 定义 class 样式<br>指定过渡样式: transition<br>指定隐藏时的样式: opacity/其它</p><h3 id="1-11-4-编码-1"><a href="#1-11-4-编码-1" class="headerlink" title="1.11.4. 编码 1"></a>1.11.4. 编码 1</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.fade-enter-active</span>, <span class="selector-class">.fade-leave-active</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">transition</span>: <span class="selector-tag">opacity</span> <span class="selector-class">.5s</span></span></span><br><span class="line">    &#125; .</span><br><span class="line"><span class="css">    <span class="selector-tag">fade-enter</span>, <span class="selector-class">.fade-leave-to</span> &#123;</span></span><br><span class="line">        opacity: 0</span><br><span class="line">    &#125; /</span><br><span class="line">    * 可以设置不同的进入和离开动画 */</span><br><span class="line"><span class="css">    <span class="selector-class">.slide-fade-enter-active</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">transition</span>: <span class="selector-tag">all</span> <span class="selector-class">.3s</span> <span class="selector-tag">ease</span>;</span></span><br><span class="line">    &#125; .</span><br><span class="line">    slide-fade-leave-active &#123;</span><br><span class="line"><span class="css">        <span class="selector-tag">transition</span>: <span class="selector-tag">all</span> <span class="selector-class">.8s</span> <span class="selector-tag">cubic-bezier</span>(1<span class="selector-class">.0</span>, 0<span class="selector-class">.5</span>, 0<span class="selector-class">.8</span>, 1<span class="selector-class">.0</span>);</span></span><br><span class="line">    &#125; .</span><br><span class="line"><span class="css">    <span class="selector-tag">slide-fade-enter</span>, <span class="selector-class">.slide-fade-leave-to</span> &#123;</span></span><br><span class="line">        transform: translateX(10px);</span><br><span class="line">        opacity: 0;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"show = !show"</span>&gt;</span></span><br><span class="line">        Toggle1</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">"fade"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"show"</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"show = !show"</span>&gt;</span></span><br><span class="line">        Toggle2</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">"slide-fade"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"show"</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#demo1'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            show: <span class="literal">true</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#demo2'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            show: <span class="literal">true</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">1.11.5. 编码 2</span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.bounce-enter-active</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">animation</span>: <span class="selector-tag">bounce-in</span> <span class="selector-class">.5s</span>;</span></span><br><span class="line">    &#125; .</span><br><span class="line">    bounce-leave-active &#123;</span><br><span class="line"><span class="css">        <span class="selector-tag">animation</span>: <span class="selector-tag">bounce-in</span> <span class="selector-class">.5s</span> <span class="selector-tag">reverse</span>;</span></span><br><span class="line">    &#125; @</span><br><span class="line">        keyframes bounce-in &#123;</span><br><span class="line">            0% &#123;</span><br><span class="line">                transform: scale(0);</span><br><span class="line">            &#125; </span><br><span class="line">            50% &#123;</span><br><span class="line"><span class="css">                <span class="selector-tag">transform</span>: <span class="selector-tag">scale</span>(1<span class="selector-class">.5</span>);</span></span><br><span class="line">            &#125; </span><br><span class="line">            100% &#123;</span><br><span class="line">                transform: scale(1);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"test2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"show = !show"</span>&gt;</span>Toggle show<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">"bounce"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"show"</span> <span class="attr">style</span>=<span class="string">"display: inline-block"</span>&gt;</span>Look at me!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#test2'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            show: <span class="literal">true</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-12-过滤器"><a href="#1-12-过滤器" class="headerlink" title="1.12. 过滤器"></a>1.12. 过滤器</h2><h3 id="1-12-2-理解过滤器"><a href="#1-12-2-理解过滤器" class="headerlink" title="1.12.2. 理解过滤器"></a>1.12.2. 理解过滤器</h3><p>1) 功能: 对要显示的数据进行特定格式化后再显示<br>2) 注意: 并没有改变原本的数据, 可是产生新的对应的数据</p><h3 id="1-12-3-定义和使用过滤器"><a href="#1-12-3-定义和使用过滤器" class="headerlink" title="1.12.3. 定义和使用过滤器"></a>1.12.3. 定义和使用过滤器</h3><p>1) 定义过滤器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Vue.filter(filterName, <span class="function"><span class="keyword">function</span>(<span class="params">value[,arg1,arg2,...]</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 进行一定的数据处理</span></span><br><span class="line">    <span class="keyword">return</span> newValue</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>2)使用过滤器</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;myData | filterName&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;myData | filterName(arg)&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-12-4-编码"><a href="#1-12-4-编码" class="headerlink" title="1.12.4. 编码"></a>1.12.4. 编码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>当前时间为: &#123;&#123;currentTime&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>当前时间 1 为: &#123;&#123;currentTime | dateStr&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>当前时间 2 为: &#123;&#123;currentTime | dateStr('YYYY-MM-DD')&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>当前时间 3 为: &#123;&#123;currentTime | dateStr('HH:mm:ss')&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/moment.js/2.19.0/moment.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 注册过滤器</span></span></span><br><span class="line"><span class="actionscript">    Vue.filter(<span class="string">'dateStr'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(value, format)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> moment(value).format(format || <span class="string">'YYYY-MM-DD HH:mm:ss'</span>)</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#test'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            currentTime: <span class="keyword">new</span> <span class="built_in">Date</span>()</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-13-内置指令与自定义指令"><a href="#1-13-内置指令与自定义指令" class="headerlink" title="1.13. 内置指令与自定义指令"></a>1.13. 内置指令与自定义指令</h2><h3 id="1-13-2-常用内置指令"><a href="#1-13-2-常用内置指令" class="headerlink" title="1.13.2. 常用内置指令"></a>1.13.2. 常用内置指令</h3><p>1) v:text : 更新元素的 textContent<br>2) v-html : 更新元素的 innerHTML<br>3) v-if : 如果为 true, 当前标签才会输出到页 面</p><p>4) v-else: 如果为 false, 当前标签才会输出到页面<br>5) v-show : 通过控制 display 样式来控制显示/隐藏<br>6) v-for : 遍历数组/对象<br>7) v-on : 绑定事件监听, 一般简写为@<br>8) v-bind : 强制绑定解析表达式, 可以省略 v-bind<br>9) v-model : 双向数据绑定<br>10) ref : 指定唯一标识, vue 对象通过$els 属性访问这个元素对象<br>11) v-cloak : 防止闪现, 与 css 配合: [v-cloak] { display: none } </p><h3 id="1-13-3-自定义指令"><a href="#1-13-3-自定义指令" class="headerlink" title="1.13.3. 自定义指令"></a>1.13.3. 自定义指令</h3><p>1) 注册全局指令</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.directive(<span class="string">'my-directive'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">el, binding</span>)</span>&#123;</span><br><span class="line">    el.innerHTML = binding.value.toupperCase()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>2) 注册局部指令</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">directives : &#123;</span><br><span class="line">    <span class="string">'my-directive'</span> : &#123;</span><br><span class="line">        bind (el, binding) &#123;</span><br><span class="line">            el.innerHTML = binding.value.toupperCase()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3) 使用指令</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v-my-directive=<span class="string">'xxx'</span></span><br></pre></td></tr></table></figure><h3 id="1-13-4-编码-1-内置指令-）"><a href="#1-13-4-编码-1-内置指令-）" class="headerlink" title="1.13.4. 编码 1(内置指令 ）"></a>1.13.4. 编码 1(内置指令 ）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-attr">[v-cloak]</span> &#123;</span></span><br><span class="line">        display: none</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">"url"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">"url"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">:id</span>=<span class="string">"myid"</span> <span class="attr">:src</span>=<span class="string">"imageSrc"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">ref</span>=<span class="string">"message"</span>&gt;</span>atguigu.com<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"showMsg"</span>&gt;</span>显示左侧文本<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-cloak</span>&gt;</span>&#123;&#123;url&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    alert(<span class="string">'模拟加载慢'</span>)</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#example'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="handlebars"><span class="xml">            url: '<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.atguigu.com"</span>&gt;</span>尚硅谷<span class="tag">&lt;/<span class="name">a</span>&gt;</span>',</span></span></span><br><span class="line"><span class="actionscript">            myid: <span class="string">'abc123'</span>,</span></span><br><span class="line"><span class="actionscript">            imageSrc: <span class="string">'http://cn.vuejs.org/images/logo.png'</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="actionscript">            showMsg: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                alert(<span class="keyword">this</span>.$refs.message.textContent)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-13-5-编码-2-自定义指令"><a href="#1-13-5-编码-2-自定义指令" class="headerlink" title="1.13.5. 编码 2(自定义指令)"></a>1.13.5. 编码 2(自定义指令)</h3><p>需求: 自定义 2 个指令</p><ol><li>功能类型于 v-text, 但转换为全大写</li><li>功能类型于 v-text, 但转换为全小写<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-upper-text</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-lower-text</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo2"</span>&gt;</span> p v-upper-text="msg2"&gt;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-lower-text</span>=<span class="string">"msg2"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="comment">&lt;!--局部指令, 此处不能使用--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//注册全局指令</span></span></span><br><span class="line"><span class="actionscript">    Vue.directive(<span class="string">'upper-text'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(el, binding)</span> </span>&#123;</span></span><br><span class="line">        el.innerHTML = binding.value.toUpperCase()</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#demo1'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            msg: <span class="string">'NBA love this game!'</span></span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="actionscript">        directives: &#123; <span class="comment">// 注册局部指令</span></span></span><br><span class="line"><span class="actionscript">            <span class="string">'lower-text'</span>: &#123;</span></span><br><span class="line">                bind (el, binding) &#123;</span><br><span class="line">                    el.innerHTML = binding.value.toLowerCase()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#demo2'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="vbscript">            msg2: <span class="comment">'I Like You'</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script</span><br></pre></td></tr></table></figure></li></ol><h2 id="1-14-自定义插件"><a href="#1-14-自定义插件" class="headerlink" title="1.14. 自定义插件"></a>1.14. 自定义插件</h2><h3 id="1-14-2-说明"><a href="#1-14-2-说明" class="headerlink" title="1.14.2. 说明"></a>1.14.2. 说明</h3><p>1) Vue 插件是一个包含 install 方法的对象<br>2) 通过 install 方法给 Vue 或 Vue 实例添加方法, 定义全局指令等</p><h3 id="1-14-3-编码"><a href="#1-14-3-编码" class="headerlink" title="1.14.3. 编码"></a>1.14.3. 编码</h3><p>1) 插件 JS</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">- 自定义 Vue 插件</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> MyPlugin = &#123;&#125;</span><br><span class="line">    MyPlugin.install = <span class="function"><span class="keyword">function</span> (<span class="params">Vue, options</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 添加全局方法或属性</span></span><br><span class="line">        Vue.myGlobalMethod = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            alert(<span class="string">'Vue 函数对象方法执行'</span>)</span><br><span class="line">        &#125; <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        <span class="number">2.</span> 添加全局资源</span><br><span class="line">        Vue.directive(<span class="string">'my-directive'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">el, binding</span>) </span>&#123;</span><br><span class="line">            el.innerHTML = <span class="string">"MyPlugin my-directive "</span> + binding.value</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// 3. 添加实例方法</span></span><br><span class="line">        Vue.prototype.$myMethod = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            alert(<span class="string">'vue 实例对象方法执行'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">window</span>.MyPlugin = MyPlugin</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>2) 页面使用插件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用自定义指令--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-my-directive</span>=<span class="string">"ms》g"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"vue-myPlugin.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//使用自定义插件</span></span></span><br><span class="line">    Vue.use(MyPlugin)</span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#demo'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            msg: <span class="string">'atguigu'</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="actionscript">    <span class="comment">//调用自定义的静态方法</span></span></span><br><span class="line">    Vue.myGlobalMethod()</span><br><span class="line"><span class="actionscript">    <span class="comment">//调用自定义的对象方法</span></span></span><br><span class="line">    vm.$myMethod()</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="第-2-章：-vue-组件化编码"><a href="#第-2-章：-vue-组件化编码" class="headerlink" title="第 2 章： vue 组件化编码"></a>第 2 章： vue 组件化编码</h1><h2 id="2-1-使用-vue-cli-创建模板项目"><a href="#2-1-使用-vue-cli-创建模板项目" class="headerlink" title="2.1. 使用 vue-cli 创建模板项目"></a>2.1. 使用 vue-cli 创建模板项目</h2><h3 id="2-1-1-说明"><a href="#2-1-1-说明" class="headerlink" title="2.1.1. 说明"></a>2.1.1. 说明</h3><p>1) vue-cli 是 vue 官方提供的脚手架工具<br>2) github: <a href="https://github.com/vuejs/vue-cli" target="_blank" rel="noopener">https://github.com/vuejs/vue-cli</a><br>3) 作用: 从 <a href="https://github.com/vuejs-templates" target="_blank" rel="noopener">https://github.com/vuejs-templates</a> 下载模板项目 </p><h3 id="2-1-2-创建-vue-项目"><a href="#2-1-2-创建-vue-项目" class="headerlink" title="2.1.2. 创建 vue 项目"></a>2.1.2. 创建 vue 项目</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure><h2 id="cli-2-x安装"><a href="#cli-2-x安装" class="headerlink" title="cli 2.x安装"></a>cli 2.x安装</h2><p><strong>拉取 2.x 模板 (旧版本)</strong></p><p>Vue CLI &gt;= 3 和旧版使用了相同的 <code>vue</code> 命令，所以 Vue CLI 2 (<code>vue-cli</code>) 被覆盖了。如果你仍然需要使用旧版本的 <code>vue init</code> 功能，你可以全局安装一个桥接工具：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli-init</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vue init webpack vue_demo(project_name)</span><br><span class="line"><span class="built_in">cd</span> vue_demo</span><br><span class="line">npm install</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p><img src="/2019/11/js-note/vue/vue/1570005978113.png" alt="1570005978113"></p><p>访问: <a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a> </p><p><img src="/2019/11/js-note/vue/vue/1570456404361.png" alt="1570456404361"></p><h3 id="2-1-3-模板项目的结构"><a href="#2-1-3-模板项目的结构" class="headerlink" title="2.1.3. 模板项目的结构"></a>2.1.3. 模板项目的结构</h3><p>|– build : webpack 相关的配置文件夹(基本不需要修改)<br>|– dev-server.js : 通过 express 启动后台服务器<br>|– config: webpack 相关的配置文件夹(基本不需要修改)<br>|– index.js: 指定的后台服务的端口号和静态资源文件夹<br>|– node_modules<br>|– src : 源码文件夹<br>|– components: vue 组件及其相关资源文件夹<br>|– App.vue: 应用根主组件<br>|– main.js: 应用入口 js<br>|– static: 静态资源文件夹（<strong>build打包原封不动的放到dist文件夹中</strong>）<br>|– .babelrc: babel 的配置文件<br>|– .eslintignore: eslint 检查忽略的配置<br>|– .eslintrc.js: eslint 检查的配置<br>|– .gitignore: git 版本管制忽略的配置<br>|– index.html: 主页面文件<br>|– package.json: 应用包配置文件<br>|– README.md: 应用描述说明的 readme 文件</p><p><strong>.editorconfig配置格式</strong></p><p><img src="/2019/11/js-note/vue/vue/1570455128364.png" alt="1570455128364"></p><h2 id="cli-3-x安装"><a href="#cli-3-x安装" class="headerlink" title="cli 3.x安装"></a>cli 3.x安装</h2><p><img src="/2019/11/js-note/vue/vue/1570456721188.png" alt="1570456721188"></p><p>创建项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create hello-world</span><br></pre></td></tr></table></figure><p><img src="/2019/11/js-note/vue/vue/1570457528400.png" alt="1570457528400"></p><p><strong>在c:user/xxx/.vuerc里可以删除预设的vuecli配置</strong></p><p>rc-&gt; run command</p><h3 id="vuecli3配置文件的查看和修改"><a href="#vuecli3配置文件的查看和修改" class="headerlink" title="vuecli3配置文件的查看和修改"></a>vuecli3配置文件的查看和修改</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue ui</span><br></pre></td></tr></table></figure><p>自定义配置文件vue.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vue.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// 选项...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-项目的打包与发布"><a href="#2-2-项目的打包与发布" class="headerlink" title="2.2. 项目的打包与发布"></a>2.2. 项目的打包与发布</h2><h3 id="2-2-1-打包"><a href="#2-2-1-打包" class="headerlink" title="2.2.1. 打包:"></a>2.2.1. 打包:</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p><img src="/2019/11/js-note/vue/vue/1570456377343.png" alt="1570456377343"></p><h3 id="2-2-2-发布-1-使用静态服务器工具包"><a href="#2-2-2-发布-1-使用静态服务器工具包" class="headerlink" title="2.2.2. 发布 1: 使用静态服务器工具包"></a>2.2.2. 发布 1: 使用静态服务器工具包</h3><p>npm install -g serve<br>serve dist<br>访问: <a href="http://localhost:5000" target="_blank" rel="noopener">http://localhost:5000</a></p><h3 id="2-2-3-发布-2-使用动态-web-服务器-tomcat"><a href="#2-2-3-发布-2-使用动态-web-服务器-tomcat" class="headerlink" title="2.2.3. 发布 2: 使用动态 web 服务器(tomcat)"></a>2.2.3. 发布 2: 使用动态 web 服务器(tomcat)</h3><p>修改配置: .config/index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">build: &#123;</span><br><span class="line">  <span class="comment">// Template for index.html</span></span><br><span class="line">  index: path.resolve(__dirname, <span class="string">'../dist/index.html'</span>),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Paths</span></span><br><span class="line">  assetsRoot: path.resolve(__dirname, <span class="string">'../dist'</span>),</span><br><span class="line">  assetsSubDirectory: <span class="string">'static'</span>,</span><br><span class="line">  assetsPublicPath: <span class="string">'/vue_demo'</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新打包:<br>npm run build<br>修改 dist 文件夹为项目名称: xxx<br>将 xxx 拷贝到运行的 tomcat 的 webapps 目录下<br>访问: <a href="http://localhost:8080/xx" target="_blank" rel="noopener">http://localhost:8080/xx</a> </p><h2 id="2-3-eslint"><a href="#2-3-eslint" class="headerlink" title="2.3. eslint"></a>2.3. eslint</h2><h3 id="2-3-1-说明"><a href="#2-3-1-说明" class="headerlink" title="2.3.1. 说明"></a>2.3.1. 说明</h3><p>1) ESLint 是一个代码规范检查工具<br>2) 它定义了很多特定的规则, 一旦你的代码违背了某一规则, eslint会作出非常有用的提示<br>3) 官网: <a href="http://eslint.org/" target="_blank" rel="noopener">http://eslint.org/</a><br>4) 基本已替代以前的 JSLint</p><h3 id="2-3-2-ESLint-提供以下支持"><a href="#2-3-2-ESLint-提供以下支持" class="headerlink" title="2.3.2. ESLint 提供以下支持"></a>2.3.2. ESLint 提供以下支持</h3><p>1) ES<br>2) JSX<br>3) style 检查<br>4) 自定义错误和提示</p><h3 id="2-3-3-ESLint-提供以下几种校验"><a href="#2-3-3-ESLint-提供以下几种校验" class="headerlink" title="2.3.3. ESLint 提供以下几种校验"></a>2.3.3. ESLint 提供以下几种校验</h3><p>1) 语法错误校验<br>2) 不重要或丢失的标点符号， 如分号<br>3) 没法运行到的代码块（使用过 WebStorm 的童鞋应该了解）<br>4) 未被使用的参数提醒<br>5) 确保样式的统一规则， 如 sass 或者 less<br>6) 检查变量的命名</p><h3 id="2-3-4-规则的错误等级有三种"><a href="#2-3-4-规则的错误等级有三种" class="headerlink" title="2.3.4. 规则的错误等级有三种"></a>2.3.4. 规则的错误等级有三种</h3><p>1) 0： 关闭规则。<br>2) 1： 打开规则， 并且作为一个警告（信息打印黄色字体）<br>3) 2： 打开规则， 并且作为一个错误（信息打印红色字体 )</p><h3 id="2-3-5-相关配置文件"><a href="#2-3-5-相关配置文件" class="headerlink" title="2.3.5. 相关配置文件"></a>2.3.5. 相关配置文件</h3><p>1) .eslintrc.js : 全局规则配置文件<br>‘rules’: {<br>‘no-new’: 1<br>}<br>2) 在 js/vue 文件中修改局部规则<br>/* eslint-disable no-new */<br>new Vue({<br>el: ‘body’,<br>components: { App }<br>})<br>3) .eslintignore: 指令检查忽略的文件<br>*.js<br>*.vu </p><h2 id="2-4-组件定义与使用"><a href="#2-4-组件定义与使用" class="headerlink" title="2.4. 组件定义与使用"></a>2.4. 组件定义与使用</h2><h3 id="2-4-1-vue-文件的组成-3-个部分"><a href="#2-4-1-vue-文件的组成-3-个部分" class="headerlink" title="2.4.1. vue 文件的组成(3 个部分)"></a>2.4.1. vue 文件的组成(3 个部分)</h3><p>1) 模板页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">页面模板</span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2) JS 模块对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">data() &#123;<span class="keyword">return</span> &#123;&#125;&#125;,</span><br><span class="line">    methods: &#123;&#125;,</span><br><span class="line">        computed: &#123;&#125;,</span><br><span class="line">        components: &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>3) 样式</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt; </span><br><span class="line"></span><br><span class="line">样式定义</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="2-4-2-基本使用"><a href="#2-4-2-基本使用" class="headerlink" title="2.4.2. 基本使用"></a>2.4.2. 基本使用</h3><p>1) 引入组件<br>2) 映射成标签<br>3) 使用组件标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">HelloWorld</span>&gt;</span><span class="tag">&lt;/<span class="name">HelloWorld</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hello-world</span>&gt;</span><span class="tag">&lt;/<span class="name">hello-world</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">import</span> HelloWorld <span class="keyword">from</span> <span class="string">'./components/HelloWorld'</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">        components: &#123;</span><br><span class="line">            HelloWorld</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.4.3. 关于标签名与标签属性名书写问题</p><p>1) 写法一: 一模一样<br>2) 写法二: 大写变小写, 并用-连接 </p><h2 id="2-5-组件间通信"><a href="#2-5-组件间通信" class="headerlink" title="2.5. 组件间通信"></a>2.5. 组件间通信</h2><h3 id="2-5-1-组件间通信基本原则"><a href="#2-5-1-组件间通信基本原则" class="headerlink" title="2.5.1. 组件间通信基本原则"></a>2.5.1. 组件间通信基本原则</h3><p>1) 不要在子组件中直接修改父组件的状态数据<br>2) 数据在哪, 更新数据的行为(函数)就应该定义在哪</p><h3 id="2-5-2-vue-组件间通信方式"><a href="#2-5-2-vue-组件间通信方式" class="headerlink" title="2.5.2. vue 组件间通信方式"></a>2.5.2. vue 组件间通信方式</h3><p>1) props<br>2) vue 的自定义事件<br>3) 消息订阅与发布(如: pubsub 库)<br>4) slot<br>5) vuex(后面单独讲)</p><h2 id="2-6-组件间通信-1-props"><a href="#2-6-组件间通信-1-props" class="headerlink" title="2.6. 组件间通信 1: props"></a>2.6. 组件间通信 1: props</h2><p>2.6.1. 使用组件标签时</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">name</span>=<span class="string">'tom'</span> <span class="attr">:age</span>=<span class="string">'3'</span> <span class="attr">:set-name</span>=<span class="string">'setName'</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-6-2-定义-MyComponent-时"><a href="#2-6-2-定义-MyComponent-时" class="headerlink" title="2.6.2. 定义 MyComponent 时"></a>2.6.2. 定义 MyComponent 时</h3><p>1) 在组件内声明所有的 props<br>2) 方式一: <strong>只指定名称(类型要为字符串)</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">props: [<span class="string">'name'</span>, <span class="string">'age'</span>, <span class="string">'setName'</span>]</span><br></pre></td></tr></table></figure><p>3) 方式二: 指定名称和类型</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">props: &#123;</span><br><span class="line">    name: String,</span><br><span class="line">    age: Number,</span><br><span class="line">    setNmae: Function</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4) 方式三: 指定名称/类型/必要性/默认值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">props: &#123;</span><br><span class="line">name: &#123;<span class="attr">type</span>: <span class="built_in">String</span>, <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">default</span>:xxx&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-6-3-注意"><a href="#2-6-3-注意" class="headerlink" title="2.6.3. 注意"></a>2.6.3. 注意</h3><p>1) 此方式用于父组件向子组件传递数据<br>2) 所有标签属性都会成为组件对象的属性, 模板页面可以直接引用<br>3) 问题:<br>a. 如果需要向非子后代传递数据必须多层逐层传递<br>b. 兄弟组件间也不能直接 props 通信, 必须借助父组件才可以</p><h2 id="2-7-组件间通信-2-vue-自定义事件"><a href="#2-7-组件间通信-2-vue-自定义事件" class="headerlink" title="2.7. 组件间通信 2: vue 自定义事件"></a>2.7. 组件间通信 2: vue 自定义事件</h2><h2 id="子组件向父组件传值"><a href="#子组件向父组件传值" class="headerlink" title="子组件向父组件传值"></a>子组件向父组件传值</h2><ol><li>原理：父组件将方法的引用，传递到子组件内部，子组件在内部调用父组件传递过来的方法，同时把要发送给父组件的数据，在调用方法的时候当作参数传递进去；</li><li><strong>父组件将方法的引用传递给子组件，其中，<code>getMsg</code>是父组件中<code>methods</code>中定义的方法名称，<code>func</code>是子组件调用传递过来方法时候的方法名称</strong></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">son</span> @<span class="attr">func</span>=<span class="string">"getMsg"</span>&gt;</span><span class="tag">&lt;/<span class="name">son</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>子组件内部通过<code>this.$emit(&#39;方法名&#39;, 要传递的数据)</code>方式，来调用父组件中的方法，同时把数据传递给父组件使用</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;!-- 引用父组件 --&gt;</span><br><span class="line">    &lt;son @func=<span class="string">"getMsg"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">son</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">    &lt;!-- 组件模板定义 --&gt;</span><br><span class="line">    &lt;script type=<span class="string">"x-template"</span> id=<span class="string">"son"</span>&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;input type=<span class="string">"button"</span> value=<span class="string">"向父组件传值"</span> @click=<span class="string">"sendMsg"</span> /&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>script&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  &lt;script&gt;</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ 子组件的定义方式</span></span><br><span class="line"><span class="regexp">    Vue.component('son', &#123;</span></span><br><span class="line"><span class="regexp">      template: '#son', /</span><span class="regexp">/ 组件模板Id</span></span><br><span class="line"><span class="regexp">      methods: &#123;</span></span><br><span class="line"><span class="regexp">        sendMsg() &#123; /</span><span class="regexp">/ 按钮的点击事件</span></span><br><span class="line"><span class="regexp">          this.$emit('func', 'OK'); /</span><span class="regexp">/ 调用父组件传递过来的方法，同时把数据传递出去</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">    &#125;);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ 创建 Vue 实例，得到 ViewModel</span></span><br><span class="line"><span class="regexp">    var vm = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">      el: '#app',</span></span><br><span class="line"><span class="regexp">      data: &#123;&#125;,</span></span><br><span class="line"><span class="regexp">      methods: &#123;</span></span><br><span class="line"><span class="regexp">        getMsg(val)&#123; /</span><span class="regexp">/ 子组件中，通过 this.$emit() 实际调用的方法，在此进行定义</span></span><br><span class="line"><span class="regexp">          alert(val);</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">    &#125;);</span></span><br><span class="line"><span class="regexp">  &lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><h2 id="使用-this-refs-来获取元素和组件"><a href="#使用-this-refs-来获取元素和组件" class="headerlink" title="使用 this.$refs 来获取元素和组件"></a>使用 <code>this.$refs</code> 来获取元素和组件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;input type=<span class="string">"button"</span> value=<span class="string">"获取元素内容"</span> @click=<span class="string">"getElement"</span> /&gt;</span><br><span class="line">    &lt;!-- 使用 ref 获取元素 --&gt;</span><br><span class="line">    &lt;h1 ref=<span class="string">"myh1"</span>&gt;这是一个大大的H1&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    &lt;hr&gt;</span></span><br><span class="line"><span class="regexp">    &lt;!-- 使用 ref 获取子组件 --&gt;</span></span><br><span class="line"><span class="regexp">    &lt;my-com ref="mycom"&gt;&lt;/my</span>-com&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  Vue.component(<span class="string">'my-com'</span>, &#123;</span><br><span class="line">    template: <span class="string">'&lt;h5&gt;这是一个子组件&lt;/h5&gt;'</span>,</span><br><span class="line">    data() &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        name: <span class="string">'子组件'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span><br><span class="line">  <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;&#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      getElement() &#123;</span><br><span class="line">        <span class="comment">// 通过 this.$refs 来获取元素</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.$refs.myh1.innerText);</span><br><span class="line">        <span class="comment">// 通过 this.$refs 来获取组件</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.$refs.mycom.name);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-7-1-绑定事件监听"><a href="#2-7-1-绑定事件监听" class="headerlink" title="2.7.1. 绑定事件监听"></a>2.7.1. 绑定事件监听</h3><p>使用 <code>this.$refs</code> 来获取元素和组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"获取元素内容"</span> @<span class="attr">click</span>=<span class="string">"getElement"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用 ref 获取元素 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">ref</span>=<span class="string">"myh1"</span>&gt;</span>这是一个大大的H1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用 ref 获取子组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-com</span> <span class="attr">ref</span>=<span class="string">"mycom"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-com</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  Vue.component(<span class="string">'my-com'</span>, &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    template: '<span class="tag">&lt;<span class="name">h5</span>&gt;</span>这是一个子组件<span class="tag">&lt;/<span class="name">h5</span>&gt;</span>',</span></span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">        name: <span class="string">'子组件'</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    methods: &#123;</span><br><span class="line">      getElement() &#123;</span><br><span class="line"><span class="actionscript">        <span class="comment">// 通过 this.$refs 来获取元素</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.$refs.myh1.innerText);</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 通过 this.$refs 来获取组件</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.$refs.mycom.name);</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方式一: 通过 v-on 绑定</span></span><br><span class="line">@delete_todo=<span class="string">"deleteTodo"</span></span><br><span class="line"><span class="comment">// 方式二: 通过$on()</span></span><br><span class="line"><span class="keyword">this</span>.$refs.xxx.$on(<span class="string">'delete_todo'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">todo</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.deleteTodo(todo)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="2-7-2-触发事件"><a href="#2-7-2-触发事件" class="headerlink" title="2.7.2. 触发事件"></a>2.7.2. 触发事件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 触发事件(只能在父组件中接收)</span></span><br><span class="line"><span class="keyword">this</span>.$emit(eventName, data)</span><br></pre></td></tr></table></figure><h3 id="2-7-3-注意"><a href="#2-7-3-注意" class="headerlink" title="2.7.3. 注意:"></a>2.7.3. 注意:</h3><p>1) 此方式只用于子组件向父组件发送消息(数据)<br>2) 问题: <strong>隔代组件或兄弟组件间通信此种方式不合适</strong> </p><h2 id="2-8-组件间通信-3-消息订阅与发布-PubSubJS-库"><a href="#2-8-组件间通信-3-消息订阅与发布-PubSubJS-库" class="headerlink" title="2.8. 组件间通信 3: 消息订阅与发布(PubSubJS 库)"></a>2.8. 组件间通信 3: 消息订阅与发布(PubSubJS 库)</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install pubsub-js</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> PubSub <span class="keyword">from</span> <span class="string">'pubsub-js'</span></span><br></pre></td></tr></table></figure><p>2.8.1. 订阅消息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PubSub.subscribe(<span class="string">'msg'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">msg, data</span>)</span>&#123;&#125;)</span><br></pre></td></tr></table></figure><p>2.8.2. 发布消息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PubSub.publish(<span class="string">'msg'</span>, data)</span><br></pre></td></tr></table></figure><p>2.8.3. 注意</p><p>1) 优点: <strong>此方式可实现任意关系组件间通信(数据)</strong><br>2.8.4. 事件的 2 个重要操作(总结)</p><p>1) 绑定事件监听 (订阅消息)<br>目标: 标签元素 <code>&lt;button&gt;</code><br>事件名(类型): click/focus<br>回调函数: function(event){}<br>2) 触发事件 (发布消息)<br>DOM 事件: 用户在浏览器上对应的界面上做对应的操作<br>自定义: 编码手动触发</p><h2 id="组件间通信-插槽4-slot"><a href="#组件间通信-插槽4-slot" class="headerlink" title="组件间通信 插槽4: slot"></a>组件间通信 插槽4: slot</h2><p>2.9.1. 理解<br>此方式用于父组件向子组件传递<code>标签数据</code></p><h3 id="编译作用域"><a href="#编译作用域" class="headerlink" title="编译作用域"></a><a href="https://cn.vuejs.org/v2/guide/components-slots.html#编译作用域" target="_blank" rel="noopener">编译作用域</a></h3><p>父级模板里的所有内容都是在父级作用域中编译的；子模板里的所有内容都是在子作用域中编译的。</p><p>2.9.2. 子组件: </p><p><strong>Child.vue</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"xxx"</span>&gt;</span>不确定的标签结构 1<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>组件确定的标签结构<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"yyy"</span>&gt;</span>不确定的标签结构 2<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.9.3. 父组件: Parent.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">child</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"xxx"</span>&gt;</span>xxx 对应的标签结构<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"yyy"</span>&gt;</span>yyy 对应的标签结构<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="自定义组件的-v-model-1"><a href="#自定义组件的-v-model-1" class="headerlink" title="自定义组件的 v-model"></a><a href="https://cn.vuejs.org/v2/guide/components-custom-events.html#自定义组件的-v-model" target="_blank" rel="noopener">自定义组件的 <code>v-model</code></a></h2><p>一个组件上的 <code>v-model</code> 默认会利用名为 <code>value</code> 的 prop 和名为 <code>input</code> 的事件，但是像单选框、复选框等类型的输入控件可能会将 <code>value</code> 特性用于<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox#Value" target="_blank" rel="noopener">不同的目的</a>。<code>model</code> 选项可以用来避免这样的冲突：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'base-checkbox'</span>, &#123;</span><br><span class="line">  model: &#123;</span><br><span class="line">    prop: <span class="string">'checked'</span>,</span><br><span class="line">    event: <span class="string">'change'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    checked: <span class="built_in">Boolean</span></span><br><span class="line">  &#125;,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;input</span></span><br><span class="line"><span class="string">      type="checkbox"</span></span><br><span class="line"><span class="string">      v-bind:checked="checked"</span></span><br><span class="line"><span class="string">      v-on:change="$emit('change', $event.target.checked)"</span></span><br><span class="line"><span class="string">    &gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>现在在这个组件上使用 <code>v-model</code> 的时候：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">base-checkbox</span> <span class="attr">v-model</span>=<span class="string">"lovingVue"</span>&gt;</span><span class="tag">&lt;/<span class="name">base-checkbox</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里的 <code>lovingVue</code> 的值将会传入这个名为 <code>checked</code> 的 prop。同时当 <code>&lt;base-checkbox&gt;</code> 触发一个 <code>change</code> 事件并附带一个新的值的时候，这个 <code>lovingVue</code> 的属性将会被更新。</p><p>注意你仍然需要在组件的 <code>props</code> 选项里声明 <code>checked</code> 这个 prop。</p><h1 id="第-3-章：-vue-ajax"><a href="#第-3-章：-vue-ajax" class="headerlink" title="第 3 章： vue-ajax"></a>第 3 章： vue-ajax</h1><h2 id="3-1-vue-项目中常用的-2-个-ajax-库"><a href="#3-1-vue-项目中常用的-2-个-ajax-库" class="headerlink" title="3.1. vue 项目中常用的 2 个 ajax 库"></a>3.1. vue 项目中常用的 2 个 ajax 库</h2><h3 id="3-1-1-vue-resource"><a href="#3-1-1-vue-resource" class="headerlink" title="3.1.1. vue-resource"></a>3.1.1. vue-resource</h3><p>vue 插件, 非官方库, vue1.x 使用广泛</p><h3 id="3-1-2-axios"><a href="#3-1-2-axios" class="headerlink" title="3.1.2. axios"></a>3.1.2. axios</h3><p>通用的 ajax 请求库, 官方推荐, vue2.x 使用广泛</p><h2 id="3-2-vue-resource-的使用"><a href="#3-2-vue-resource-的使用" class="headerlink" title="3.2. vue-resource 的使用"></a>3.2. vue-resource 的使用</h2><p>3.2.1. 在线文档<br><a href="https://github.com/pagekit/vue-resource/blob/develop/docs/http.md" target="_blank" rel="noopener">https://github.com/pagekit/vue-resource/blob/develop/docs/http.md</a><br>3.2.2. 下载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-resource --save</span><br></pre></td></tr></table></figure><p>3.2.3. 编码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入模块</span></span><br><span class="line"><span class="keyword">import</span> VueResource <span class="keyword">from</span> <span class="string">'vue-resource'</span></span><br><span class="line"><span class="comment">// 使用插件</span></span><br><span class="line">Vue.use(VueResource)</span><br><span class="line"><span class="comment">// 通过 vue/组件对象发送 ajax 请求</span></span><br><span class="line"><span class="keyword">this</span>.$http.get(<span class="string">'/someUrl'</span>).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// success callback</span></span><br><span class="line"><span class="built_in">console</span>.log(response.data) <span class="comment">//返回结果数据</span></span><br><span class="line">&#125;, (response) =&gt; &#123;</span><br><span class="line"><span class="comment">// error callbacb</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(response.statusText) <span class="comment">//错误信息</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="3-3-axios-的使用"><a href="#3-3-axios-的使用" class="headerlink" title="3.3. axios 的使用"></a>3.3. axios 的使用</h2><p>3.3.1. 效果<br>ajax_test.gif<br>3.2. 在线文档<br><a href="https://github.com/pagekit/vue-resource/blob/develop/docs/http.md" target="_blank" rel="noopener">https://github.com/pagekit/vue-resource/blob/develop/docs/http.md</a><br>3.3. 下载:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install axios --save</span><br></pre></td></tr></table></figure><p>3.4. 编码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入模块</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="comment">// 发送 ajax 请求</span></span><br><span class="line">axios.get(url)</span><br><span class="line">.then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(response.data) <span class="comment">// 得到返回结果数据</span></span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(error.message)</span><br><span class="line">&#125; )</span><br></pre></td></tr></table></figure><h1 id="第-4-章：-vue-UI-组件库"><a href="#第-4-章：-vue-UI-组件库" class="headerlink" title="第 4 章： vue UI 组件库"></a>第 4 章： vue UI 组件库</h1><h2 id="4-1-常用"><a href="#4-1-常用" class="headerlink" title="4.1. 常用"></a>4.1. 常用</h2><p>1) Mint UI:<br>a. 主页: <a href="http://mint-ui.github.io/#!/zh-cn" target="_blank" rel="noopener">http://mint-ui.github.io/#!/zh-cn</a><br>b. 说明: 饿了么开源的基于 vue 的移动端 UI 组件库<br>2) Elment<br>a. 主页: <a href="http://element-cn.eleme.io/#/zh-CN" target="_blank" rel="noopener">http://element-cn.eleme.io/#/zh-CN</a><br>b. 说明: 饿了么开源的基于 vue 的 PC 端 UI 组件库<br>4.2. 使用 Mint UI<br>4.2.1. 下载: </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save mint-ui</span><br></pre></td></tr></table></figure><p>4.2.2. 实现按需打包</p><ol><li><p>下载</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev babel-plugin-component</span><br></pre></td></tr></table></figure></li></ol><p>2.修改 babel 配置</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"plugins"</span>: [<span class="string">"transform-runtime"</span>,[<span class="string">"component"</span>, [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"libraryName"</span>: <span class="string">"mint-ui"</span>,</span><br><span class="line">        <span class="string">"style"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">]]]</span><br></pre></td></tr></table></figure><h2 id="4-2-3-mint-ui-组件分类"><a href="#4-2-3-mint-ui-组件分类" class="headerlink" title="4.2.3. mint-ui 组件分类"></a>4.2.3. mint-ui 组件分类</h2><p>  1) 标签组件<br>  2) 非标签组件<br>  4.2.4. 使用 mint-ui 的组件</p><p>  1)index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1, maximum-scale=1,</span></span></span><br><span class="line"><span class="tag"><span class="string">                               minimum-scale=1, user-scalable=no"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span></span></span><br><span class="line"><span class="tag">        <span class="attr">src</span>=<span class="string">"https://as.alipayobjects.com/g/component/fastclick/1.0.6/fastclick.js"</span>&gt;</span>&lt;/scrip</span><br><span class="line">    t&gt;</span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (<span class="string">'addEventListener'</span> <span class="keyword">in</span> <span class="built_in">document</span>) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                FastClick.attach(<span class="built_in">document</span>.body);</span></span><br><span class="line"><span class="actionscript">            &#125;, <span class="literal">false</span>);</span></span><br><span class="line">        &#125; i</span><br><span class="line"><span class="javascript">        f(!<span class="built_in">window</span>.Promise) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.writeln(<span class="string">'&lt;script</span></span></span><br><span class="line"><span class="actionscript">                             src=<span class="string">"https://as.alipayobjects.com/g/component/es6-promise/3.2.2/es6-promise.min.js"</span></span></span><br><span class="line"><span class="actionscript">                             <span class="string">'+'</span>&gt;<span class="string">'+'</span>&lt;<span class="string">'+'</span>/<span class="string">'+'</span>script&gt;<span class="string">');</span></span></span><br><span class="line">                             &#125;</span><br><span class="line"><span class="handlebars"><span class="xml"><span class="tag">&lt;/<span class="name">script</span> &gt;</span></span></span></span><br></pre></td></tr></table></figure><p>2) main.js<br>import {Button} from ‘mint-ui’<br>Vue.component(Button.name, Button)<br>3) App.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mt-button</span> @<span class="attr">click</span>=<span class="string">"handleClick"</span> <span class="attr">type</span>=<span class="string">"primary"</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span>Test<span class="tag">&lt;/<span class="name">mt-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">import</span> &#123;Toast&#125; <span class="keyword">from</span> <span class="string">'mint-ui'</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">        methods: &#123;</span><br><span class="line">            handleClick () &#123;</span><br><span class="line"><span class="actionscript">                Toast(<span class="string">'点击了测试'</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="第-5-章：-vue-router"><a href="#第-5-章：-vue-router" class="headerlink" title="第 5 章： vue-router"></a>第 5 章： vue-router</h1><h2 id="5-1-理解"><a href="#5-1-理解" class="headerlink" title="5.1. 理解"></a>5.1. 理解</h2><p>5.1.1. 说明</p><p>1) 官方提供的用来实现 SPA 的 vue 插件<br>2) github: <a href="https://github.com/vuejs/vue-router" target="_blank" rel="noopener">https://github.com/vuejs/vue-router</a><br>3) 中文文档: <a href="http://router.vuejs.org/zh-cn/" target="_blank" rel="noopener">http://router.vuejs.org/zh-cn/</a><br>4) 下载: </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-router --save</span><br></pre></td></tr></table></figure><p>5.1.2. 相关 API 说明<br>1)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">VueRouter(): 用于创建路由器的构建函数</span><br><span class="line"><span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    <span class="comment">// 多个配置项</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>2) 路由配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">routes: [</span><br><span class="line">    &#123; <span class="comment">// 一般路由</span></span><br><span class="line">        path: <span class="string">'/about'</span>,</span><br><span class="line">        component: About</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; <span class="comment">// 自动跳转路由</span></span><br><span class="line">        path: <span class="string">'/'</span>,</span><br><span class="line">        redirect: <span class="string">'/about'</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>3) 注册路由器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    router</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>4) 使用路由组件标签</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> &lt;router-link&gt;: 用来生成路由链接</span><br><span class="line">   &lt;router-link to=<span class="string">"/xxx"</span>&gt;Go to XXX&lt;<span class="regexp">/router-link&gt;</span></span><br><span class="line"><span class="regexp">2. &lt;router-view&gt;: 用来显示当前路由组件界面</span></span><br><span class="line"><span class="regexp">   &lt;router-view&gt;&lt;/</span>router-view&gt;</span><br></pre></td></tr></table></figure><h3 id="编程式路由导航"><a href="#编程式路由导航" class="headerlink" title="编程式路由导航"></a>编程式路由导航</h3><p>1) this.$router.push(path): 相当于点击路由链接(可以返回到当前路由界面)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">router.push(&#123; <span class="attr">name</span>: <span class="string">'user'</span>, <span class="attr">params</span>: &#123; <span class="attr">userId</span>: <span class="number">123</span> &#125;&#125;)</span><br></pre></td></tr></table></figure><p>2) this.$router.replace(path): 用新路由替换当前路由(不可以返回到当前路由界面)<br>3) this.$router.back(): 请求(返回)上一个记录路由<br>4) this.$router.go(-1): 请求(返回)上一个记录路由<br>5) this.$router.go(1): 请求下一个记录路由 </p><h2 id="5-2-基本路由"><a href="#5-2-基本路由" class="headerlink" title="5.2. 基本路由"></a>5.2. 基本路由</h2><p>5.2.2. 路由组件<br>Home.vue<br>About.vue<br>5.2.3. 应用组件: App.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--路由链接--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/about"</span>&gt;</span>About<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/home"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--用于渲染当前路由组件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>5.2.4. 路由器模块: src/router/index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明使用vue-router插件</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">内部定义并注册了2个组件标签(router-link/router-view),</span></span><br><span class="line"><span class="comment">给组件对象添加了2个属性:</span></span><br><span class="line"><span class="comment">  1. $router: 路由器</span></span><br><span class="line"><span class="comment">  2. $route: 当前路由</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    routes: [</span><br><span class="line">        &#123;</span><br><span class="line">            path: <span class="string">'/'</span>,</span><br><span class="line">            redirect: <span class="string">'/about'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            path: <span class="string">'/about'</span>,</span><br><span class="line">            component: About</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            path: <span class="string">'/home'</span>,</span><br><span class="line">            component: Home</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;）</span><br></pre></td></tr></table></figure><h3 id="5-2-5-注册路由器-main-js"><a href="#5-2-5-注册路由器-main-js" class="headerlink" title="5.2.5. 注册路由器: main.js"></a>5.2.5. 注册路由器: main.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line"><span class="comment">// 创建 vue 配置路由器</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">el: <span class="string">'#app'</span>,</span><br><span class="line">router,</span><br><span class="line">render: <span class="function"><span class="params">h</span> =&gt;</span> h(app)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>5.2.6. 优化路由器配置<br>linkActiveClass: ‘active’, // 指定选中的路由链接的 class<br>5.2.7. 总结: 编写使用路由的 3 步</p><p>1) 定义路由组件<br>2) 注册路由<br>3) 使用路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link&gt;</span><br><span class="line">&lt;router-view&gt;</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>注册VueRouter路由是的<strong>属性不是routers是==routes==</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    routes: [</span><br><span class="line">        &#123;&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;）</span><br></pre></td></tr></table></figure><h2 id="5-3-嵌套路由"><a href="#5-3-嵌套路由" class="headerlink" title="5.3. 嵌套路由"></a>5.3. 嵌套路由</h2><h3 id="5-3-2-子路由组件"><a href="#5-3-2-子路由组件" class="headerlink" title="5.3.2. 子路由组件"></a>5.3.2. 子路由组件</h3><p>News.vue<br>Message.vue</p><h3 id="5-3-3-配置嵌套路由-router-js"><a href="#5-3-3-配置嵌套路由-router-js" class="headerlink" title="5.3.3. 配置嵌套路由: router.js"></a>5.3.3. 配置嵌套路由: router.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">path: <span class="string">'/home'</span>,</span><br><span class="line">    component: home,</span><br><span class="line">        children: [</span><br><span class="line">            &#123;</span><br><span class="line">                path: <span class="string">'news'</span>,</span><br><span class="line">                component: News</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                path: <span class="string">'message'</span>,</span><br><span class="line">                component: Message</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br></pre></td></tr></table></figure><h3 id="5-3-4-路由链接-Home-vue"><a href="#5-3-4-路由链接-Home-vue" class="headerlink" title="5.3.4. 路由链接: Home.vue"></a>5.3.4. 路由链接: Home.vue</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/home/news"</span>&gt;</span>News<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/home/message"</span>&gt;</span>Message<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">route-view</span></span></span><br></pre></td></tr></table></figure><h2 id="5-4-向路由组件传递数据"><a href="#5-4-向路由组件传递数据" class="headerlink" title="5.4. 向路由组件传递数据"></a>5.4. 向路由组件传递数据</h2><h3 id="5-4-2-方式-1-路由路径携带参数-param-query"><a href="#5-4-2-方式-1-路由路径携带参数-param-query" class="headerlink" title="5.4.2. 方式 1: 路由路径携带参数(param/query)"></a>5.4.2. 方式 1: 路由路径携带参数(param/query)</h3><p>1) 配置路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">children: [</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">'mdetail/:id'</span>,</span><br><span class="line">        component: MessageDetail</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>2) 路由路径</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"'/home/message/mdetail/'+m.id"</span>&gt;</span>&#123;&#123;m.title&#125;&#125;<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3) 路由组件中读取请求参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$route.params.id</span><br><span class="line"></span><br><span class="line">watch: &#123;</span><br><span class="line">    $route: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 改变当前路由组件参数数据时自动调用</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'$route()'</span>)</span><br><span class="line">        <span class="keyword">const</span> id = <span class="keyword">this</span>.$route.params.id</span><br><span class="line">        <span class="keyword">this</span>.detail = messageDetails.find(<span class="function"><span class="params">detail</span> =&gt;</span> detail.id===id*<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="route-query"><a href="#route-query" class="headerlink" title="$route.query"></a>$route.query</h3><ul><li><p>类型: <code>Object</code></p><p>一个 key/value 对象，表示 URL 查询参数。例如，对于路径 <code>/foo?user=1</code>，则有 <code>$route.query.user == 1</code>，如果没有查询参数，则是个空对象。</p></li></ul><h3 id="5-4-3-方式-2-lt-router-view-gt-属性携带数据"><a href="#5-4-3-方式-2-lt-router-view-gt-属性携带数据" class="headerlink" title="5.4.3. 方式 2: &lt;router-view&gt;属性携带数据"></a>5.4.3. 方式 2: &lt;router-view&gt;属性携带数据</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-view</span> <span class="attr">:msg</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5-5-缓存路由组件对象"><a href="#5-5-缓存路由组件对象" class="headerlink" title="5.5. 缓存路由组件对象"></a>5.5. 缓存路由组件对象</h2><p>5.5.1. 理解</p><p>1) 默认情况下, 被切换的路由组件对象会死亡释放, 再次回来时是重新创建的<br>2) 如果可以缓存路由组件对象, 可以提高用户体验<br>5.5.2. 编码实现</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="实现跳转时判断是否登录"><a href="#实现跳转时判断是否登录" class="headerlink" title="实现跳转时判断是否登录"></a>实现跳转时判断是否登录</h2><p>main.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (to.meta.title) &#123;</span><br><span class="line">    <span class="built_in">document</span>.title = to.meta.title</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> flag = to.meta.withOutLogin</span><br><span class="line">  <span class="built_in">console</span>.log(flag)</span><br><span class="line">  <span class="built_in">console</span>.log(store.state.user)</span><br><span class="line">  <span class="comment">// 判断该路由是否需要登录权限</span></span><br><span class="line">  <span class="keyword">if</span> (!flag &amp;&amp; !store.state.user) &#123;</span><br><span class="line">    request(&#123;</span><br><span class="line">      url: <span class="string">"/user/info"</span>,</span><br><span class="line">      method: <span class="string">"GET"</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(res);</span><br><span class="line">      <span class="keyword">if</span>(res.data.success)&#123;</span><br><span class="line">        next()</span><br><span class="line">        <span class="keyword">const</span> user = res.data.extend.user;</span><br><span class="line">        store.commit(RECEIVE_USER, &#123;</span><br><span class="line">          user</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        next(<span class="string">'/login'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    next()  <span class="comment">// 确保一定要有next()被调用</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="5-7-reoute-routes里的meta属性"><a href="#5-7-reoute-routes里的meta属性" class="headerlink" title="5.7 reoute.routes里的meta属性"></a>5.7 reoute.routes里的meta属性</h2><p><strong>meta能给每个route指定附加值.</strong></p><p>可以实现通过路径判断是否显示组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    path: <span class="string">'/msite'</span>,</span><br><span class="line">    component: Msite,</span><br><span class="line">        meta: &#123;</span><br><span class="line">            showFooter: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;FooterGuide <span class="attribute">v-show</span>=<span class="string">"<span class="variable">$route</span>.meta.showFooter"</span>&gt;&lt;/FooterGuide&gt;</span><br></pre></td></tr></table></figure><h1 id="第-6-章：-vuex"><a href="#第-6-章：-vuex" class="headerlink" title="第 6 章： vuex"></a>第 6 章： vuex</h1><h2 id="6-1-vuex-理解"><a href="#6-1-vuex-理解" class="headerlink" title="6.1. vuex 理解"></a>6.1. vuex 理解</h2><p>6.1.1. vuex 是什么</p><p>1) github 站点: <a href="https://github.com/vuejs/vuex" target="_blank" rel="noopener">https://github.com/vuejs/vuex</a><br>2) 在线文档: <a href="https://vuex.vuejs.org/zh-cn/" target="_blank" rel="noopener">https://vuex.vuejs.org/zh-cn/</a><br>3) 简单来说: 对 vue 应用中多个组件的共享状态进行集中式的管理(读/写)<br>6.1.2. 状态自管理应用</p><p>1) state: 驱动应用的数据源</p><p>2) view: 以声明方式将 state 映射到视图<br>3) actions: 响应在 view 上的用户输入导致的状态变化(包含 n 个更新状态的方法) </p><p><img src="/2019/11/js-note/vue/vue/1570107505633.png" alt="1570107505633"></p><p>6.1.3. 多组件共享状态的问题</p><p>1) 多个视图依赖于同一状态<br>2) 来自不同视图的行为需要变更同一状态<br>3) 以前的解决办法<br>a. 将数据以及操作数据的行为都定义在父组件<br>b. 将数据以及操作数据的行为传递给需要的各个子组件(有可能需要多级传递)<br>4) vuex 就是用来解决这个问题的</p><h2 id="6-2-vuex-核心概念和-API"><a href="#6-2-vuex-核心概念和-API" class="headerlink" title="6.2. vuex 核心概念和 API"></a>6.2. vuex 核心概念和 API</h2><h3 id="6-2-1-state"><a href="#6-2-1-state" class="headerlink" title="6.2.1. state"></a>6.2.1. state</h3><p>1) vuex 管理的状态对像</p><p>2) 它应该是唯一的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">    xxx: initValue</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapState, mapActions &#125; <span class="keyword">from</span> <span class="string">"vuex"</span>;</span><br><span class="line">computed: mapState([</span><br><span class="line">  <span class="comment">// 映射 this.count 为 store.state.count</span></span><br><span class="line">  <span class="string">'count'</span></span><br><span class="line">])</span><br></pre></td></tr></table></figure><h3 id="6-2-2-mutations"><a href="#6-2-2-mutations" class="headerlink" title="6.2.2. mutations"></a>6.2.2. mutations</h3><p>1) 包含多个直接更新 state 的方法(回调函数)的对象<br>2) 谁来触发: action 中的 commit(‘mutation 名称’)<br>3) 只能包含同步的代码, 不能写异步代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    yyy (state, &#123;data1&#125;) &#123;</span><br><span class="line">        <span class="comment">// 更新 state 的某个属性</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-3-actions"><a href="#6-2-3-actions" class="headerlink" title="6.2.3. actions"></a>6.2.3. actions</h3><p>1) 包含多个事件回调函数的对象<br>2) 通过执行: commit()来触发 mutation 的调用, 间接更新 state<br>3) 谁来触发: 组件中: $store.dispatch(‘action 名称’, data1) // ‘zzz’<br>4) 可以包含异步代码(定时器, ajax)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">    zzz (&#123;commit, state&#125;, data1) &#123;</span><br><span class="line">        commit(<span class="string">'yyy'</span>, &#123;data1&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-4-getters"><a href="#6-2-4-getters" class="headerlink" title="6.2.4. getters"></a>6.2.4. getters</h3><p>1) 包含<strong>多个计算属性(get)的对象</strong><br>2) 谁来读取: 组件中: $store.getters.xxx</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">    mmm (state) &#123;</span><br><span class="line">        <span class="keyword">return</span> .. </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-5-modules"><a href="#6-2-5-modules" class="headerlink" title="6.2.5. modules"></a>6.2.5. modules</h3><p>1) 包含多个 module<br>2) 一个 module 是一个 store 的配置对象<br>3) 与一个组件(包含有共享数据)对应</p><h3 id="6-2-6-向外暴露-store-对象"><a href="#6-2-6-向外暴露-store-对象" class="headerlink" title="6.2.6. 向外暴露 store 对象"></a>6.2.6. 向外暴露 store 对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state,</span><br><span class="line">    mutations,</span><br><span class="line">    actions,</span><br><span class="line">    getters</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="6-2-7-组件中"><a href="#6-2-7-组件中" class="headerlink" title="6.2.7. 组件中"></a>6.2.7. 组件中</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;mapState, mapGetters, mapActions&#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    computed: &#123;</span><br><span class="line">        ...mapState([<span class="string">'xxx'</span>]),</span><br><span class="line">        ...mapGetters([<span class="string">'mmm'</span>]),</span><br><span class="line">    &#125; m</span><br><span class="line">    ethods: mapActions([<span class="string">'zzz'</span>])</span><br><span class="line">&#125; &#123;</span><br><span class="line">    &#123;xxx&#125;&#125; &#123;&#123;mmm&#125;&#125; @click=<span class="string">"zzz(data)"</span></span><br></pre></td></tr></table></figure><h3 id="6-2-8-映射-store"><a href="#6-2-8-映射-store" class="headerlink" title="6.2.8. 映射 store"></a>6.2.8. 映射 store</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store'</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    store</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-9-store-对象"><a href="#6-2-9-store-对象" class="headerlink" title="6.2.9. store 对象"></a>6.2.9. store 对象</h3><p>1) 所有用 vuex 管理的组件中都<strong>多了一个属性$store, 它就是一个 store 对象</strong><br>2) 属性:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">state: 注册的 state 对象</span><br><span class="line">getters: 注册的 getters 对象</span><br></pre></td></tr></table></figure><p>3) 方法:<br>dispatch(actionName, data): 分发调用 action </p><h2 id="6-3使用案例"><a href="#6-3使用案例" class="headerlink" title="6.3使用案例"></a>6.3使用案例</h2><p><strong>使用时安装</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save vuex</span><br></pre></td></tr></table></figure><h2 id="6-3-demo1-计数器"><a href="#6-3-demo1-计数器" class="headerlink" title="6.3. demo1: 计数器"></a>6.3. demo1: 计数器</h2><h3 id="5-3-1-定义store模块"><a href="#5-3-1-定义store模块" class="headerlink" title="5.3.1 定义store模块"></a>5.3.1 定义store模块</h3><p>store.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* vuex 的 store 对象模块</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">state 对象</span></span><br><span class="line"><span class="comment">类似于 data</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">    count: <span class="number">0</span> <span class="comment">// 初始化状态数据</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">/* mutations 对象</span></span><br><span class="line"><span class="comment">包含个方法: 能直接更新 state</span></span><br><span class="line"><span class="comment">一个方法就是一个 mutation</span></span><br><span class="line"><span class="comment">mutation 只能包含更新 state 的同步代码, 也不会有逻辑</span></span><br><span class="line"><span class="comment">mutation 由 action 触发调用: commit('mutationName')</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    INCREMENT(state) &#123;</span><br><span class="line">        state.count++</span><br><span class="line">    &#125;,</span><br><span class="line">    DECREMENT (state) &#123; <span class="comment">// ctrl + shift + x</span></span><br><span class="line">        state.count--</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">      actions 对象</span></span><br><span class="line"><span class="comment">      包含个方法: 触发 mutation 调用, 间接更新 state</span></span><br><span class="line"><span class="comment">      一个方法就是一个 action</span></span><br><span class="line"><span class="comment">      action 中可以有逻辑代码和异步代码</span></span><br><span class="line"><span class="comment">      action 由组件来触发调用: this.$store.dispatch('actionName')</span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">    increment (&#123;commit&#125;) &#123;</span><br><span class="line">        commit(<span class="string">'INCREMENT'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    decrement (&#123;commit&#125;) &#123;</span><br><span class="line">        commit(<span class="string">'DECREMENT'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    incrementIfOdd (&#123;commit, state&#125;) &#123;</span><br><span class="line">        <span class="keyword">if</span>(state.count%<span class="number">2</span>===<span class="number">1</span>) &#123;</span><br><span class="line">            commit(<span class="string">'INCREMENT'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    incrementAsync (&#123;commit&#125;) &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            commit(<span class="string">'INCREMENT'</span>)</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">getters 对象包含多个 get 计算计算属性方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">    oddOrEven (state) &#123;</span><br><span class="line">        <span class="keyword">return</span> state.count%<span class="number">2</span>===<span class="number">0</span> ? <span class="string">'偶数'</span> : <span class="string">'奇数'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    count (state) &#123;</span><br><span class="line">        <span class="keyword">return</span> state.count</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="comment">//</span></span><br><span class="line">向外暴露 store 实例对象</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state,</span><br><span class="line">    mutations,</span><br><span class="line">    actions,</span><br><span class="line">    getters</span><br><span class="line">&#125;）</span><br></pre></td></tr></table></figure><h3 id="6-3-2-在vue中注册"><a href="#6-3-2-在vue中注册" class="headerlink" title="6.3.2 在vue中注册"></a>6.3.2 在vue中注册</h3><p> main.js  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> app <span class="keyword">from</span> <span class="string">'./app1.vue'</span></span><br><span class="line"><span class="comment">// import app from './app.vue'</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store'</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    render: <span class="function"><span class="params">h</span> =&gt;</span> h(app),</span><br><span class="line">    store <span class="comment">// 所有组件都多个一个属性: $store</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="6-3-3-app-vue-未优化前"><a href="#6-3-3-app-vue-未优化前" class="headerlink" title="6.3.3. app.vue(未优化前)"></a>6.3.3. app.vue(未优化前)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">    &lt;p&gt;clicked: &#123;&#123;$store.state.count&#125;&#125; times, count is &#123;&#123;oddOrEven&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;button @click="increment"&gt;+&lt;/</span>button&gt;</span><br><span class="line">&lt;button @click=<span class="string">"decrement"</span>&gt;-<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;button @click=<span class="string">"incrementIfOdd"</span>&gt;increment <span class="keyword">if</span> odd&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;button @click="incrementAsync"&gt;increment async&lt;/</span>button&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">computed: &#123;</span><br><span class="line">    oddOrEven () &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.$store.getters.oddOrEven</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        increment () &#123;</span><br><span class="line">            <span class="keyword">this</span>.$store.dispatch(<span class="string">'increment'</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">            decrement () &#123;</span><br><span class="line">                <span class="keyword">this</span>.$store.dispatch(<span class="string">'decrement'</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">                incrementIfOdd () &#123;</span><br><span class="line">                    <span class="keyword">this</span>.$store.dispatch(<span class="string">'incrementIfOdd'</span>)</span><br><span class="line">                &#125;,</span><br><span class="line">                    incrementAsync () &#123;</span><br><span class="line">                        <span class="keyword">this</span>.$store.dispatch(<span class="string">'incrementAsync'</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;style&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>style&gt;</span><br></pre></td></tr></table></figure><h3 id="6-3-4-app2-vue-优化后"><a href="#6-3-4-app2-vue-优化后" class="headerlink" title="6.3.4. app2.vue(优化后)"></a>6.3.4. app2.vue(优化后)</h3> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>clicked: &#123;&#123;count&#125;&#125; times, count is &#123;&#123;oddOrEven2&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"increment"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"decrement"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"incrementIfOdd"</span>&gt;</span>increment if odd<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"incrementAsync"</span>&gt;</span>increment async<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">import</span> &#123;mapGetters, mapActions&#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">        computed: mapGetters(&#123; <span class="comment">// 名称不一样</span></span></span><br><span class="line"><span class="actionscript">            oddOrEven2: <span class="string">'oddOrEven'</span>,</span></span><br><span class="line"><span class="actionscript">            count: <span class="string">'count'</span></span></span><br><span class="line">        &#125;),</span><br><span class="line"><span class="actionscript">        methods: mapActions([<span class="string">'increment'</span>, <span class="string">'decrement'</span>, <span class="string">'incrementIfOdd'</span>,</span></span><br><span class="line"><span class="actionscript">                             <span class="string">'incrementAsync'</span>]) <span class="comment">// 名称一样</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6-5-vuex-结构分析"><a href="#6-5-vuex-结构分析" class="headerlink" title="6.5. vuex 结构分析"></a>6.5. vuex 结构分析</h2><p><img src="/2019/11/js-note/vue/vue/vuex%E7%BB%93%E6%9E%84%E5%9B%BE.png" alt="vuex结构图"></p><h2 id="使用注意"><a href="#使用注意" class="headerlink" title="使用注意"></a>使用注意</h2><p><strong>只有当前组件使用的数据不需要使用vuex管理</strong></p><h1 id="vue使用-me"><a href="#vue使用-me" class="headerlink" title="vue使用-me"></a>vue使用-me</h1><h2 id="使用bootstarp"><a href="#使用bootstarp" class="headerlink" title="使用bootstarp"></a>使用bootstarp</h2><p>1安装</p><p>需要安装<code>jquery</code>,因为<code>bootstrap</code>是依赖于<code>jquery</code>的。我们同样使用npm安装<code>jquery</code>。bootstrap也需要安装<code>popper.js</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install --save jquery</span><br><span class="line">npm install --save popper.js</span><br><span class="line">npm install --save bootstrap@4</span><br></pre></td></tr></table></figure><p>2.在 <strong>vue.config.js</strong> 文件写入以下内容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*Vue-CLI项目的核心配置文件</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">"webpack"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"> configureWebpack: &#123;</span><br><span class="line">   plugins: [</span><br><span class="line">     <span class="keyword">new</span> webpack.ProvidePlugin(&#123;</span><br><span class="line">       $: <span class="string">"jquery"</span>,</span><br><span class="line">       jQuery: <span class="string">"jquery"</span>,</span><br><span class="line">       <span class="string">"window.jQuery"</span>: <span class="string">"jquery"</span>,</span><br><span class="line">       Popper: [<span class="string">"popper.js"</span>, <span class="string">"default"</span>]</span><br><span class="line">     &#125;)</span><br><span class="line">   ]</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>2引入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用bootstarp</span></span><br><span class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">'jquery'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"bootstrap/dist/css/bootstrap.css"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">"bootstrap/dist/js/bootstrap.min.js"</span>;</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  $,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure><h2 id="使用-Font-Awesome"><a href="#使用-Font-Awesome" class="headerlink" title="使用 Font Awesome"></a>使用 Font Awesome</h2><p>Font Awesome<br>：<a href="http://fontawesome.dashgame.com/" target="_blank" rel="noopener">http://fontawesome.dashgame.com/</a></p><p>npm 安装 font-awesome</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install font-awesome --save-dev</span><br></pre></td></tr></table></figure><p>1<br>font-awesome引入<br>在 mani.js 文件中引入 font-awesome</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'font-awesome/css/font-awesome.css'</span></span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'font-awesome/scss/font-awesome.scss'</span></span><br></pre></td></tr></table></figure><p>1<br>然后在组件中使用即可实现：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"fa fa-camera-retro fa-lg"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="vue-cli-3-x配置跨域代理"><a href="#vue-cli-3-x配置跨域代理" class="headerlink" title="vue-cli 3.x配置跨域代理"></a><a href="https://segmentfault.com/a/1190000014474361" target="_blank" rel="noopener">vue-cli 3.x配置跨域代理</a></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vue.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">// 修改的配置</span></span><br><span class="line">    <span class="comment">// 将baseUrl: '/api',改为baseUrl: '/',</span></span><br><span class="line">    baseUrl: <span class="string">'/'</span>,</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        proxy: &#123;</span><br><span class="line">            <span class="string">'/api'</span>: &#123;</span><br><span class="line">                target: <span class="string">'http://www.example.org'</span>,</span><br><span class="line">                changeOrigin: <span class="literal">true</span>,</span><br><span class="line">                ws: <span class="literal">true</span>,</span><br><span class="line">                pathRewrite: &#123;</span><br><span class="line">                  <span class="string">'^/api'</span>: <span class="string">''</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// .env.development</span></span><br><span class="line">VUE_APP_BASE_API=<span class="regexp">/api</span></span><br></pre></td></tr></table></figure><h1 id="vue项目使用-env文件配置全局环境变量"><a href="#vue项目使用-env文件配置全局环境变量" class="headerlink" title="vue项目使用.env文件配置全局环境变量"></a>vue项目使用.env文件配置全局环境变量</h1><p><a href="https://cli.vuejs.org/zh/guide/mode-and-env.html#模式" target="_blank" rel="noopener">官方文档</a></p><p>关于文件名：必须以如下方式命名，不要乱起名，也无需专门手动控制加载哪个文件</p><p>.env 全局默认配置文件，不论什么环境都会加载合并</p><p>.env.development 开发环境下的配置文件</p><p>.env.production 生产环境下的配置文件</p><p>关于文件名：必须以如下方式命名，不要乱起名，也无需专门手动控制加载哪个文件</p><p>.env 全局默认配置文件，不论什么环境都会加载合并</p><p>.env.development 开发环境下的配置文件</p><p>.env.production 生产环境下的配置文件</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第-1-章：-Vue-核心&quot;&gt;&lt;a href=&quot;#第-1-章：-Vue-核心&quot; class=&quot;headerlink&quot; title=&quot;第 1 章： Vue 核心&quot;&gt;&lt;/a&gt;第 1 章： Vue 核心&lt;/h1&gt;&lt;h2 id=&quot;1-1-Vue-的基本认识&quot;&gt;&lt;a href=&quot;#1-1-Vue-的基本认识&quot; class=&quot;headerlink&quot; title=&quot;1.1. Vue 的基本认识&quot;&gt;&lt;/a&gt;1.1. Vue 的基本认识&lt;/h2&gt;&lt;p&gt;1.1.1. 官网&lt;/p&gt;&lt;p&gt;1) 英文官网: &lt;a href=&quot;https://vuejs.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://vuejs.org/&lt;/a&gt;&lt;br&gt;2) 中文官网: &lt;a href=&quot;https://cn.vuejs.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://cn.vuejs.org/&lt;/a&gt;&lt;/p&gt;&lt;h3 id=&quot;1-1-2-介绍描述&quot;&gt;&lt;a href=&quot;#1-1-2-介绍描述&quot; class=&quot;headerlink&quot; title=&quot;1.1.2. 介绍描述&quot;&gt;&lt;/a&gt;1.1.2. 介绍描述&lt;/h3&gt;&lt;p&gt;1) 渐进式 JavaScript 框架&lt;br&gt;2) 作者: 尤雨溪(一位华裔前 Google 工程师)&lt;br&gt;3) 作用: 动态构建用户界面&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="js vue" scheme="https://codeofli.github.io/tags/js-vue/"/>
    
  </entry>
  
  <entry>
    <title>ssm-crud</title>
    <link href="https://codeofli.github.io/2019/10/java-note/ssm-crud/ssm-crud/"/>
    <id>https://codeofli.github.io/2019/10/java-note/ssm-crud/ssm-crud/</id>
    <published>2019-10-21T07:25:49.000Z</published>
    <updated>2019-11-13T12:20:05.926Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="web路径"><a href="#web路径" class="headerlink" title="web路径"></a>web路径</h1><p> <strong>web路径：</strong><br>    1.不<strong>以/开始的相对路径</strong>，找资源，<strong>以当前资源的路径为基准</strong>，经常容易出问题<br>    2.<strong>以/开始的开始的相对路径</strong>，找资源，<strong>以服务器为标准（http//localhost/端口号)需要加项目名</strong>;<br>    就是http//localhost/端口号/crud/…</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%</span></span></span><br><span class="line"><span class="tag"><span class="attr">pageContext.setAttribute</span>("<span class="attr">APP_PATH</span>", <span class="attr">request.getContextPath</span>());</span></span><br><span class="line"><span class="tag">%&gt;</span></span><br><span class="line">$&#123;APP_PATH&#125;/static/bootstrap-3.3.7-dist/css/bootstrap.min.css</span><br><span class="line">  --&gt;</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="maven配置文件"><a href="#maven配置文件" class="headerlink" title="maven配置文件"></a>maven配置文件</h1><p>D:\apache-maven-3.6.1\conf\settings.xml</p><p>设置镜像阿里mirrors</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置maven的jdk</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk18<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">activaByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activaByDefault</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="maven使用spring单元测试"><a href="#maven使用spring单元测试" class="headerlink" title="maven使用spring单元测试"></a>maven使用spring单元测试</h1><p>test写在src/test/mapper/目录下</p><p>推荐Spring的项目就可以使用spring的单元测试，可以依赖注入我们需要的组件</p><p> 1.导入springTest模块(meven导包)<br> 2.@ContextConfiguration指定spring配置文件内容,@RunWith(SpringJUnit4ClassRunner.class)<br> 3.直接autoWrited要使用的组件即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">**</span><br><span class="line"> * 测试dao工作层</span><br><span class="line"> * <span class="meta">@author</span> test</span><br><span class="line"> */</span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(locations = &#123;<span class="string">"classpath:applicationContext.xml"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapperTest</span> </span>&#123;</span><br></pre></td></tr></table></figure><h2 id="mybatis不在同一目录下"><a href="#mybatis不在同一目录下" class="headerlink" title="mybatis不在同一目录下"></a>mybatis不在同一目录下</h2><p>如果需要mapper和mapper.xml文件不在一个文件夹里还能映射成功的话，需要在spring配置文件中，<strong>分别将mapper和mapper.xml的包添加扫描；</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- ============配置和mybatis的整合============== --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span></span></span><br><span class="line"><span class="tag"><span class="attr">value</span>=<span class="string">"classpath:mybatis-config.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"pooledDataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定mybatis的mapper文件位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span></span></span><br><span class="line"><span class="tag"><span class="attr">value</span>=<span class="string">"classpath:mapper/*.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置扫描器，将mapper接口实现加入ioc容器 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 批量生成mapper代理对象 批量产生的mapper对象在SpringIOC容器中的id值默认就是接口mapper名(首字母小写） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.atguigu.crud.dao"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="maven中classpath路径"><a href="#maven中classpath路径" class="headerlink" title="maven中classpath路径"></a>maven中classpath路径</h1><p>在Maven工程中，classpath的路径指java resources路径下的目录，即</p><p>src/main/java、 src/main/resource、src/test/java 、src/test/resource   四个目录</p><p>所以在配置路径时需要注意文件名是否重名，导致加载文件失败</p><h1 id="jsr303数据校验"><a href="#jsr303数据校验" class="headerlink" title="jsr303数据校验"></a>jsr303数据校验</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--jsr303数据检验支持 （Hibernate Validator Engine Relocation Artifact） --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- jrs303数据校验支持：tomcat7以上的服务器，</span></span><br><span class="line"><span class="comment">tomcat7以下的服务器：el表达式，不是最新的。额外给服务器的lib包中替换新的标准的el</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.hibernate/hibernate-validator --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.4.1.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="数据校验"><a href="#数据校验" class="headerlink" title="数据校验"></a>数据校验</h1><p>JSR303<br>Hibernate Validator </p><p><strong>JSR 303提供的标准注解如表所示。</strong></p><table><thead><tr><th>注解</th><th>简介</th></tr></thead><tbody><tr><td>@Null</td><td>被注释的元素必须为 null。</td></tr><tr><td>@NotNull</td><td>被注释的元素必须不为 null。</td></tr><tr><td>@AssertTrue</td><td>被注释的元素必须为 true。</td></tr><tr><td>@AssertFalse</td><td>被注释的元素必须为 false。</td></tr><tr><td>@Min(value)</td><td>被注释的元素必须是一个数字，其值必须大于或等于value。</td></tr><tr><td>@Max(value)</td><td>被注释的元素必须是一个数字，其值必须小于或等于value。</td></tr><tr><td>@DecimalMin(value)</td><td>被注释的元素必须是一个数字，其值必须大于或等于value。</td></tr><tr><td>@DecimalMax(value)</td><td>被注释的元素必须是一个数字，其值必须小于或等于value。</td></tr><tr><td>@Size(max,   min)</td><td>被注释的元素的取值范围必须是介于min和max之间。</td></tr><tr><td>@Digits   (integer, fraction)</td><td>被注释的元素必须是一个数字，其值必须在可接受的范围内。</td></tr><tr><td>@Past</td><td>被注释的元素必须是一个过去的日期。</td></tr><tr><td>@Future</td><td>被注释的元素必须是一个将来的日期。</td></tr><tr><td>@Pattern(value)</td><td>被注释的元素必须符合指定的正则表达式。</td></tr></tbody></table><p>表JSR 303注解</p><p>Hibernate Validator 是JSR 303的扩展。Hibernate Validator 提供了 JSR 303中所有内置的注解，以及自身扩展的4个注解，如表所示。</p><table><thead><tr><th>注解</th><th>简介</th></tr></thead><tbody><tr><td>@Email</td><td>被注释的元素值必须是合法的电子邮箱地址。</td></tr><tr><td>@Length</td><td>被注释的字符串的长度必须在指定的范围内。</td></tr><tr><td>@NotEmpty</td><td>被注释的字符串的必须非空。</td></tr><tr><td>@Range</td><td>被注释的元素必须在合适的范围内。</td></tr></tbody></table><p><strong>表  Hibernate Validator扩展注解</strong></p><p>使用Hibernate Validator步骤：</p><p>a.jar（注意各个jar之间可能存在版本不兼容）<br>hibernate-validator-5.0.0.CR2.jar     classmate-0.8.0.jar     jboss-logging-3.1.1.GA.jar<br>validation-api-1.1.0.CR1.jar     hibernate-validator-annotation-processor-5.0.0.CR2.jar</p><p>b配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> &gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时mvc:annotation-driven的作用：要实现Hibernate Validator/JSR303 校验（或者其他各种校验），必须实现SpringMVC提供的一个接口：ValidatorFactory</p><p>LocalValidatorFactoryBean是ValidatorFactory的一个实现类。<br>&lt;mvc:annotation-driven &gt;会在<strong>springmvc容器中 自动加载一个LocalValidatorFactoryBean类，因此可以直接实现数据校验。</strong></p><p>c.直接使用注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">```</span><br><span class="line"><span class="meta">@Past</span><span class="comment">//当前时间以前</span></span><br><span class="line"><span class="keyword">private</span> Date birthday ;</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    </p><p>在校验的Controller中 ，给<strong>校验的对象前增加 @Valid</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testDateTimeFormat</span><span class="params">(@Valid Student student, BindingResult result ,Map&lt;String,Object&gt; map)</span> </span>&#123;</span><br><span class="line">    &#123;...&#125;</span><br></pre></td></tr></table></figure><h1 id="mybatis分页插件PageHleper"><a href="#mybatis分页插件PageHleper" class="headerlink" title="mybatis分页插件PageHleper"></a>mybatis分页插件PageHleper</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 导入jackson包</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lmz</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019年7月15日-上午8:59:36</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pageNumber</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/emps"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span> <span class="comment">// 告诉SpringMVC，此时的返回 不是一个 View页面，而是一个 ajax调用的返回值（Json数组）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Msg <span class="title">getEmpsWithJson</span><span class="params">(@RequestParam(value = <span class="string">"pageNumber"</span>, defaultValue = <span class="string">"1"</span>)</span> Integer pageNumber) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入分页插件PageHleper</span></span><br><span class="line"><span class="comment">// 在查询之前调用即可</span></span><br><span class="line">PageHelper.startPage(pageNumber, <span class="number">5</span>);</span><br><span class="line"><span class="comment">// startPage之后紧跟着的查询就是分页查询</span></span><br><span class="line">List&lt;Employee&gt; emps = employeeService.getAll();</span><br><span class="line"><span class="comment">// 用PageInfo对结果进行包装</span></span><br><span class="line"><span class="comment">// 将pagaInfo交给页面就可以了，封装了详细的分页信息，包括有我们的查询数据</span></span><br><span class="line"><span class="comment">// 传入连续显示的页数</span></span><br><span class="line">PageInfo&lt;Employee&gt; page = <span class="keyword">new</span> PageInfo&lt;Employee&gt;(emps, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">return</span> Msg.success().add(<span class="string">"pageInfo"</span>, page);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="sprigMVC自带HttpputFormContentFilter"><a href="#sprigMVC自带HttpputFormContentFilter" class="headerlink" title="sprigMVC自带HttpputFormContentFilter"></a>sprigMVC自带HttpputFormContentFilter</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">           * 解决方案</span></span><br><span class="line"><span class="comment">           * 要能支持直接发送PUT之类的请求，还要封装请求体中的数据</span></span><br><span class="line"><span class="comment">     * 1、配置上HttpputFormContentFilter；</span></span><br><span class="line"><span class="comment">     * 2、作用：将请求体中的数据解析包装成一个map。</span></span><br><span class="line"><span class="comment">     * 3、request被重新包装，request.getParameter()被重写，就会从自己封装的map中取数据</span></span><br><span class="line"><span class="comment">     * 员工更新方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> employee</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@PutMapping</span>(<span class="string">"/emp/&#123;empId&#125;"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Msg <span class="title">saveEmp</span><span class="params">(Employee employee,HttpServletRequest request)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"requestScope中的值："</span>+request.getParameter(<span class="string">"email"</span>));</span><br><span class="line">    System.out.println(employee);</span><br><span class="line">    employeeService.updateEmp(employee);</span><br><span class="line">    <span class="keyword">return</span> Msg.success();</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="/2019/10/java-note/ssm-crud/ssm-crud/E:%5Cpictures%5CLanguage%5Cssm%5Cssm%E6%95%B4%E5%90%88%5Cssm%E6%80%BB%E7%BB%93.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;&lt;h1 id=&quot;web路径&quot;&gt;&lt;a href=&quot;#web路径&quot; class=&quot;headerlink&quot; title=&quot;web路径&quot;&gt;&lt;/a&gt;web路径&lt;/h1&gt;&lt;p&gt; &lt;strong&gt;web路径：&lt;/strong&gt;&lt;br&gt;    1.不&lt;strong&gt;以/开始的相对路径&lt;/strong&gt;，找资源，&lt;strong&gt;以当前资源的路径为基准&lt;/strong&gt;，经常容易出问题&lt;br&gt;    2.&lt;strong&gt;以/开始的开始的相对路径&lt;/strong&gt;，找资源，&lt;strong&gt;以服务器为标准（http//localhost/端口号)需要加项目名&lt;/strong&gt;;&lt;br&gt;    就是http//localhost/端口号/crud/…&lt;/p&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;%&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;	&lt;span class=&quot;attr&quot;&gt;pageContext.setAttribute&lt;/span&gt;(&quot;&lt;span class=&quot;attr&quot;&gt;APP_PATH&lt;/span&gt;&quot;, &lt;span class=&quot;attr&quot;&gt;request.getContextPath&lt;/span&gt;());&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	$&amp;#123;APP_PATH&amp;#125;/static/bootstrap-3.3.7-dist/css/bootstrap.min.css&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://codeofli.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://codeofli.github.io/tags/java/"/>
    
      <category term="ssm" scheme="https://codeofli.github.io/tags/ssm/"/>
    
  </entry>
  
  <entry>
    <title>springMvc</title>
    <link href="https://codeofli.github.io/2019/10/java-note/springMvc/springMvc/"/>
    <id>https://codeofli.github.io/2019/10/java-note/springMvc/springMvc/</id>
    <published>2019-10-20T07:24:32.000Z</published>
    <updated>2019-11-13T12:51:59.242Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="springmvc"><a href="#springmvc" class="headerlink" title="springmvc:"></a>springmvc:</h1><p>1.jar<br>spring-aop.jar<br>spring-bean.jar<br>spring-context.jar<br>spring-core.jar<br>spring-web.jar</p><p>spring-webmvc.jar<br>commons-logging.jar</p><p>报错NoClassDefFoundError：缺少jar</p><a id="more"></a><p>2.第一个SpringMVC程序<br>Servet - Springmvc<br>jsp -&gt;Servlet (Springmvc)-&gt;Jsp</p><p>url</p><h2 id="springmvc配置文件-springmvc-xml"><a href="#springmvc配置文件-springmvc-xml" class="headerlink" title="springmvc配置文件 springmvc.xml"></a>springmvc配置文件 springmvc.xml</h2><p>选中常用的命名空间：beans  aop context  mvc</p><p>普通的servlet流程：<br>请求-url-pattern -交给对应的servlet去处理</p><p>如果现在想用springmvc，而不是普通的servlet，如何告知程序？-如何让springmvc 介入程序：<br>需要配置一个 Springmvc自带的servlet</p><p>通过以下配置，<strong>拦截所有请求，交给SpringMVC处理</strong>：</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springDispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springDispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中：<br><url-pattern>.action</url-pattern></p><p>/:一切请求  ，注意不是 /*<br>/user:拦截以 /user开头的请求<br>/user/abc.do  :只拦截该请求<br>.action:只拦截 .action结尾的请求</p><p>项目中同时兼容 springMVC和Servlet</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springDispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>.action<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springDispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span></span></span><br><span class="line"><span class="tag"><span class="attr">base-package</span>=<span class="string">"pers.nicolas.handler"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置视图解析器(InternalResourceViewResolver) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/views/"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>指定springmvc配置文件的路径</strong>，如果要省略，必须放到 默认路径：<br>/WEB-INF/<strong>（web.xml配置中）servetname的值</strong>-servlet.xml</p><p><strong>可以提示工具自动生成alt+/ ,选</strong></p><p><img src="/2019/10/java-note/springMvc/springMvc/E:%5Cpictures%5CLanguage%5Cspring%5C%E6%8F%90%E7%A4%BA%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90springMvc%E9%85%8D%E7%BD%AE.png" alt="1561949336976"></p><h2 id="映射是-去匹配-RequestMapping注解"><a href="#映射是-去匹配-RequestMapping注解" class="headerlink" title="映射是 去匹配@RequestMapping注解"></a>映射是 去匹配@RequestMapping注解</h2><p>可以和方法名、类名不一致<br><strong>通过method指定 请求方式（get  post  delete put）</strong><br>    @RequestMapping(value=”welcome”,method=RequestMethod.POST)//映射</p><p>设置name=”xxxx”的情况：<br>params= {“name2=zs”,”age!=23”}</p><p>name2:必须有name=”name2”参数</p><p>age!=23 :    a.如果有name=”age”，则age值不能是23<br>         b.没有age<br>!name2  ：不能name=”name2”的属性</p><h2 id="ant风格的请求路径"><a href="#ant风格的请求路径" class="headerlink" title="ant风格的请求路径"></a>ant风格的请求路径</h2><p>?  单字符</p><ul><li>任意个字符（0或多个）</li><li><ul><li>任意目录</li></ul></li></ul><p>@RequestMapping(value=”welcome3/**/test”)<br>接受示例：</p><p>a href=”welcome3/abc/xyz/abccc/test”</p><p><a href="handler/welcome5/zs">…</a></p><h2 id="通过-PathVariable获取动态参数"><a href="#通过-PathVariable获取动态参数" class="headerlink" title="通过@PathVariable获取动态参数**"></a>通过@PathVariable获取动态参数**</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"welcome5/&#123;name&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String  <span class="title">welcome5</span><span class="params">(@PathVariable(<span class="string">"name"</span>)</span> String name ) </span>&#123;</span><br><span class="line">System.out.println(name);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"success"</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接口/类、注解、配置</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"handler"</span>) <span class="comment">// 映射</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringMVCHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"welcome"</span>, method = RequestMethod.POST, params = &#123; <span class="string">"name=zs"</span>, <span class="string">"age!=23"</span>, <span class="string">"!height"</span> &#125;) <span class="comment">// 映射</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">welcome</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"success"</span>; <span class="comment">// /views/success.jsp </span></span><br><span class="line">&#125;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"welcome2"</span>, headers = &#123;</span><br><span class="line">        <span class="string">"Accept=text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"</span>, <span class="string">"Accept-Encoding=gzip, deflate"</span> &#125;) <span class="comment">// 映射</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">welcome2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>; <span class="comment">// /views/success.jsp </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"welcome3/**/test"</span>) </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">welcome3</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"success"</span>; <span class="comment">// /views/success.jsp </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"welcome4/&#123;name&#125;"</span>) <span class="comment">// 映射</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">welcome4</span><span class="params">(@PathVariable(<span class="string">"name"</span>)</span> String name) </span>&#123;</span><br><span class="line">  System.out.println(name);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"success"</span>; <span class="comment">// /views/success.jsp</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="请求方式和获取参数"><a href="#请求方式和获取参数" class="headerlink" title="请求方式和获取参数"></a>请求方式和获取参数</h1><p>REST风格 ：软件编程风格</p><p>Springmvc:<br>GET  :查<br>POST  ：增<br>DELETE ：删<br>PUT ：改</p><p>普通浏览器 只支持get post方式 ；其他请求方式 如 delelte|put请求是通过 过滤器新加入的支持。</p><p>springmvc实现 ：put|post请求方式的步骤<br>a.增加过滤器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 增加HiddenHttpMethodFilte过滤器：目的是给普通浏览器 增加 put|delete请求方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilte<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilte<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>b.表单</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"handler/testRest/1234"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span>  <span class="attr">name</span>=<span class="string">"_method"</span> <span class="attr">value</span>=<span class="string">"DELETE"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"删"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>i:必须是post方式<br>ii:<strong>通过隐藏域 的value值 设置实际的请求方式 DELETE|PUT</strong></p><p>c.控制器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"testRest/&#123;id&#125;"</span>,method=RequestMethod.DELETE)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String  <span class="title">testDelete</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id) </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"delete：删 "</span> +id);</span><br><span class="line"><span class="comment">//Service层实现 真正的增</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"success"</span> ;<span class="comment">//默认使用了请求转发的跳转方式</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过    method=RequestMethod.DELETE    匹配具体的请求方式</p><p><strong>此外，可以发现 ，当映射名相同时@RequestMapping(value=”testRest)，可以通过method处理不同的请求。</strong></p><p>过滤器中 处理put|delete请求的部分源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">HttpServletRequest requestToUse = request;</span><br><span class="line"><span class="keyword">if</span> (<span class="string">"POST"</span>.equals(request.getMethod()) &amp;&amp; request.getAttribute(WebUtils.ERROR_EXCEPTION_ATTRIBUTE) == <span class="keyword">null</span>) &#123;</span><br><span class="line">String paramValue = request.getParameter(<span class="keyword">this</span>.methodParam);</span><br><span class="line"><span class="keyword">if</span> (StringUtils.hasLength(paramValue)) &#123;</span><br><span class="line">requestToUse = <span class="keyword">new</span> HttpMethodRequestWrapper(request, paramValue);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">filterChain.doFilter(requestToUse, response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原始请求：request，改请求默认只支持get post  header<br>但是如果 是”POST”  并且有隐藏域        <input type="hidden" name="_method" value="DELETE"><br>则，过滤器 将原始的请求 request加入新的请求方式DELETE，并将原始请求 转为 requestToUse 请求（request+Delete请求）<br>最后将requestToUse 放入 请求链中， 后续再事情request时  实际就使用改造后的 requestToUse</p><h2 id="获取参数方法2"><a href="#获取参数方法2" class="headerlink" title="获取参数方法2"></a>获取参数方法2</h2><p>@RequestParam(“uname”) String name,@RequestParam(value=”uage”,required=false,defaultValue=”23”)</p><p>@RequestParam(“uname”):接受前台传递的值，等价于request.getParameter(“uname”);</p><p>required=false:该属性 不是必须的。<br>defaultValue=”23”：默认值23</p><h2 id="获取请求头信息-RequestHeader"><a href="#获取请求头信息-RequestHeader" class="headerlink" title="获取请求头信息 @RequestHeader"></a>获取请求头信息 @RequestHeader</h2><p>public String  testRequestHeader(@RequestHeader(“Accept-Language”)  String al  ) {</p><p>通过@RequestHeader(“Accept-Language”)  String al   获取请求头中的Accept-Language值，并将值保存再al变量中 </p><h3 id="通过mvc获取cookie值（JSESSIONID）"><a href="#通过mvc获取cookie值（JSESSIONID）" class="headerlink" title="通过mvc获取cookie值（JSESSIONID）"></a>通过mvc获取cookie值（JSESSIONID）</h3><p>@CookieValue<br>(前置知识： 服务端在接受客户端第一次请求时，会给该客户端分配一个session （该session包含一个sessionId）),并且服务端会在第一次响应客户端时 ，请该sessionId赋值给JSESSIONID 并传递给客户端的cookie中</p><p>小结：</p><h2 id="SpringMVC处理各种参数的流程-逻辑："><a href="#SpringMVC处理各种参数的流程-逻辑：" class="headerlink" title="SpringMVC处理各种参数的流程/逻辑："></a>SpringMVC处理各种参数的流程/逻辑：</h2><p>请求：  前端发请求a-&gt; @RequestMappting(“a”)<br>处理请求中的参数xyz：<br>    @RequestMappting(“a”)<br>    public String  aa(@Xxx注解(“xyz”)  xyz)<br>    {</p><pre><code>}</code></pre><h2 id="使用对象（实体类Student）接受请求参数"><a href="#使用对象（实体类Student）接受请求参数" class="headerlink" title="使用对象（实体类Student）接受请求参数"></a>使用对象（实体类Student）接受请求参数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"testObjectProperties"</span>) <span class="comment">// 映射</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testObjectProperties</span><span class="params">(Student student)</span> </span>&#123; <span class="comment">//student属性必须和from表单中的属性name值一致（支持级联属性）</span></span><br><span class="line">System.out.println(student);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"success"</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"handler/testObjectProperties"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">id:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">name:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">homeAddress:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"address.homeAddress"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">schoolAddress:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"address.schoolAddress"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"submit"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="在SpringMVC中使用原生态的Servlet-API"><a href="#在SpringMVC中使用原生态的Servlet-API" class="headerlink" title="在SpringMVC中使用原生态的Servlet API"></a>在SpringMVC中使用原生态的Servlet API</h2><p>HttpServletRequest ：直接将 servlet-api中的类、接口等 写在springMVC所映射的方法参数中即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"testServletAPI"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testServletAPI</span><span class="params">(HttpServletRequest  request,HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">System.out.println(request);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"success"</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="1-处理模型数据"><a href="#1-处理模型数据" class="headerlink" title="1.处理模型数据"></a>1.处理模型数据</h1><p>如果跳转时需要带数据：V、M,则可以使用以下方式：<br>ModelAndView、ModelMap  、Map(java.tuil.map)、Model   -<strong>数据放在了request作用域</strong> </p><p>@SessionAttributes、@ModelAttribute</p><p>示例：<br>public String testModel(Model model|    Map&lt;String,Object&gt; m) {</p><p>m.put(x,”..”); 就会将x对象 放入request域中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"testModelAndView"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">testModelAndView</span><span class="params">()</span> </span>&#123; <span class="comment">// ModelAndView:既有数据，又有视图</span></span><br><span class="line">    ModelAndView mv = <span class="keyword">new</span> ModelAndView(<span class="string">"success"</span>);</span><br><span class="line">    Student student = <span class="keyword">new</span> Student();</span><br><span class="line">    student.setId(<span class="number">3</span>);</span><br><span class="line">    student.setName(<span class="string">"zs"</span>);</span><br><span class="line">    mv.addObject(<span class="string">"student"</span>, student); <span class="comment">// 相当于request.setAtrribute();</span></span><br><span class="line">    <span class="keyword">return</span> mv;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"testModelMap"</span>) <span class="comment">// 映射</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testModelMap</span><span class="params">(ModelMap mm)</span> </span>&#123;</span><br><span class="line">    Student student1 = <span class="keyword">new</span> Student();</span><br><span class="line">    student1.setId(<span class="number">3</span>);</span><br><span class="line">    student1.setName(<span class="string">"zs"</span>);</span><br><span class="line">    mm.put(<span class="string">"student1"</span>, student1); <span class="comment">// request域</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>; <span class="comment">// view</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如何将上述数据放入session中？@SessionAttributes(..)<strong>在类上声明</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SessionAttributes</span>(value = &#123;<span class="string">"student3"</span>,<span class="string">"student2"</span>&#125;) <span class="comment">//如果在request域中存放studen3,student2对象，则同时放在session域中</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SessionAttributes</span>(types =&#123;Student.class,Address.class&#125;) <span class="comment">//如果在request域中存放student,address类的对象，则同时放在session域中</span></span><br></pre></td></tr></table></figure><p>@ModelAttribute<br>i.经常在 更新时使用<br>ii.在不改变原有代码的基础之上，插入一个新方法。</p><p>通过<strong>@ModelAttribute修饰的方法 ，会在每次请求前先执行；</strong><br>并且该方法的参数map.put()可以将 对象 放入 即将查询的参数中；<br>必须满足的约定：<br>map.put(k,v) 其中的k 必须是即将查询的方法参数 的首字母小写<br>testModelAttribute(Student xxx)  ，即student；<br>如果不一致，需要通过@ModelAttribute声明。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ModelAttribute</span><span class="comment">//在任何一次请求前，都会先执行@ModelAttribute修饰的方法</span></span><br><span class="line"><span class="comment">// 在请求该类的每个方法前均会被调用的设计是基于一个思想：一个控制器一个功能</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryStudentById</span><span class="params">(Map&lt;String,Object&gt; map)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//模拟调用三层查询数据库的操作</span></span><br><span class="line">    Student student = <span class="keyword">new</span> Student();</span><br><span class="line">    student.setId(<span class="number">31</span>);</span><br><span class="line">    student.setName(<span class="string">"zs"</span>);</span><br><span class="line">    student.setAge(<span class="number">23</span>);</span><br><span class="line">    map.put(<span class="string">"stu"</span>, student) ;<span class="comment">//约定：map的key 就是方法参数 类型的首字母小写</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//修改:Zs-ls</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"testModelAttribute"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testModelAttribute</span><span class="params">(@ModelAttribute(<span class="string">"stu"</span>)</span>Student student) </span>&#123;</span><br><span class="line">    student.setName(student.getName());<span class="comment">//将名字修改为ls</span></span><br><span class="line">    System.out.println(student.getId()+<span class="string">","</span>+student.getName()+<span class="string">","</span>+student.getAge());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个Servlet 对应一个功能：<br>增删改查  对应于 4个Servlet</p><p>更新：    Servlet  - SpringMVC的Controller</p><p>查询<br>@ModelAttribute<br>public void query()<br>{</p><p>}</p><p>修改<br>public String update()<br>{</p><p>}</p><p><strong>@ModelAttribute会在 该类的每个方法执行前 均被执行一次，因为使用时需要注意。</strong></p><h1 id="2-视图、视图解析器"><a href="#2-视图、视图解析器" class="headerlink" title="2.视图、视图解析器"></a>2.视图、视图解析器</h1><p>视图的顶级接口:View<br>视图解析器：ViewResolver</p><p>常见的视图和解析器：<br>InternalResourceView、InternalResourceViewResolver</p><p>public class JstlView extends InternalResourceView：</p><p>springMVC解析jsp时 会默认使用InternalResourceView，<br><strong>如果发现Jsp中包含了jstl语言相关的内容，则自动转为JstlView。</strong></p><p>JstlView 可以解析jstl\实现国际化操作</p><p>国际化： 针对不同地区、不同国家 ，进行不同的显示 </p><p>中国:（大陆、香港）     欢迎<br>美国：            welcome  </p><p>i18n_zh_CN.properties<br>resource.welcome=你好<br>resource.exit=退出</p><p>i18n.properties    </p><p>具体实现国际化步骤：<br>a.创建资源文件<br>基名_语言_地区.properties<br>基名_语言.properties</p><p><strong>常见的资源文件命名</strong></p><table><thead><tr><th>资源文件名</th><th>简介</th></tr></thead><tbody><tr><td>基名_en.properties</td><td>所有英文语言的资源</td></tr><tr><td>基名_en_US.properties</td><td>针对美国地区、英文语言的资源</td></tr><tr><td>基名_zh.properties</td><td>所有的中文语言的资源</td></tr><tr><td>基名_zh_CN.properties</td><td>针对中国大陆的、中文语言的资源</td></tr><tr><td>基名_zh_HK.properties</td><td>针对中国香港的、中文语言的资源</td></tr><tr><td>基名.properties</td><td>默认资源文件。如果请求相应语言的资源文件不存在，将使用此资源文件。例如，若是中国大陆地区用户，应该访问“基名_zh_CN.properties”，而如果不存在此文件，就会去访问默认的“基名.properties”。</td></tr></tbody></table><p>b.配置springmvc.xml，加载资源文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 加载国际化资源文件 1.将ResourceBundleMessageSource在程序加载时 加入springmvc： springmvc在启动时，会自动查找一个叫messageSource的bean，如果有则自动加载 </span></span><br><span class="line"><span class="comment">2.如果配置了ResourceBundleMessageSource，程序会在响应时介入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"messageSource"</span><span class="attr">class</span>=<span class="string">"org.springframework.context.support.ResourceBundleMessageSource"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basename"</span> <span class="attr">value</span>=<span class="string">"i18n"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>ResourceBundleMessageSource会在springmvc响应程序时 介入（解析国际化资源文件）</p><p>c.通过jstl使用国际化<br>    jstl.jar  standar.jar</p><p>springmvc在启动时，会自动查找一个id=”messageSource”的bean，如果有  则自动加载</p><h1 id="InternalResourceViewResolver其他功能："><a href="#InternalResourceViewResolver其他功能：" class="headerlink" title="InternalResourceViewResolver其他功能："></a>InternalResourceViewResolver其他功能：</h1><h2 id="1-lt-mvc-view-controller-…-gt"><a href="#1-lt-mvc-view-controller-…-gt" class="headerlink" title="1.&lt;mvc:view-controller …&gt;"></a>1.&lt;mvc:view-controller …&gt;</h2><p>index.jsp -&gt; Controller(@RequsetMapping(“a”)) -&gt;succes.jsp</p><p>要用SpringMVC实现：index.jsp -&gt; succes.jsp  ：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- view-name也会被视图解析器添加前缀和后缀 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">"testMvcViewController"</span> <span class="attr">view-name</span>=<span class="string">"success"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><strong>以上注解 ，会让所有的请求 转入<a href="mvc:.." target="_blank" rel="noopener">mvc:..</a>中匹配映射地址，而会忽略调@RequsetMapping()；</strong><br>如果想让 @RequsetMapping(“a”)  和<a href="mvc:.." target="_blank" rel="noopener">mvc:..</a>共存，则需要加入一个注解：&lt;<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```xml</span><br><span class="line">&lt;!--此配置是springmvc的基础配置，很多功能都需要该注解来调整  --&gt;</span><br><span class="line">&lt;mvc:annotation-driven&gt;&lt;/mvc:annotation-driven&gt;</span><br></pre></td></tr></table></figure></p><h2 id="2-指定请求方式"><a href="#2-指定请求方式" class="headerlink" title="2.指定请求方式"></a>2.指定请求方式</h2><p>指定跳转方式：return “forward:/views/success.jsp”;    </p><p><strong>forward(请求转发):   redirect（重定向）: ，需要注意 此种方式，不会被视图解析器加上前缀(/views)、后缀(.jsp)</strong></p><h2 id="3-处理静态资源：html-css-js-图片-视频"><a href="#3-处理静态资源：html-css-js-图片-视频" class="headerlink" title="3.处理静态资源：html css js  图片 视频"></a>3.处理静态资源：html css js  图片 视频</h2><p>可以与用户交互、因为时间/地点的不同 而结果不同的内容：动态（百度：天气  ）</p><p><strong>在SpringMVC中，如果直接访问静态资源：404 。</strong>原因：之前将所有的请求 通过通配符“/” 拦截，进而交给 SPringMVC的入口DispatcherServlet去处理：找该请求映射对应的 @requestMapping</p><p><a href="http://localhost:8888/SpringMVCProject/img.png" target="_blank" rel="noopener">http://localhost:8888/SpringMVCProject/img.png</a></p><p>@RequsetMapping(“img.png”)<br>return sucess</p><p>解决：如果是 需要mvc处理的，则交给@RequsetMapping(“img.png”)处理；如果不需要springmvc处理，则使用 tomcat默认的Servlet去处理。<br>tomcat默认的Servlet去处理：如果有 对应的请求拦截,则交给相应的Servlet去处理；<strong>如果没有对应的servlet，则直接访问。</strong><br>tomcat默认的Servlet在哪里？<strong>在tomcat配置文件\conf\web.xml中</strong></p><pre><code>&lt;servlet&gt;    &lt;servlet-name&gt;abc&lt;/servlet-name&gt;    &lt;servlet-class&gt;xxx.xxx.xx.ABCServlet&lt;/servlet-class&gt;&lt;/servlet&gt;&lt;servlet-mapping&gt;    &lt;servlet-name&gt;abc&lt;/servlet-name&gt;    &lt;url-pattern&gt;/abc&lt;/url-pattern&gt;&lt;/servlet-mapping&gt;</code></pre><p>解决静态资源方案：如果有springmvc对应的@requestMapping则交给spring处理；如果没有对应@requestMapping,则交给服务器tomcat默认的servlet去处理  ：实现方法，只需要增加2个注解即可 springmvc.xml： </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 该注解会让springmvc在接受请求没有对应映射时，将该请求交给服务器默认的servlet处理(直接访问) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--此配置是springmvc的基础配置，很多功能都需要该注解来调整  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结：要让springmvc访问静态资源，只需要加入以下2个注解：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 该注解会让springmvc在接受请求没有对应映射时，将该请求交给服务器默认的servlet处理(直接访问) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--此配置是springmvc的基础配置，很多功能都需要该注解来调整  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-类型转换"><a href="#4-类型转换" class="headerlink" title="4.类型转换"></a>4.类型转换</h2><p>a.Spring自带一些 常见的类型转换器：<br>public String  testDelete(@PathVariable(“id”) String id) ，即可以接受int类型数据id  也可以接受String类型的id</p><p>b.可以自定义类型转换器<br>i.编写 自定义类型转器的类 （实现Converter接口）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConverter</span>  <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>,<span class="title">Student</span>&gt;</span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">convert</span><span class="params">(String source)</span> </span>&#123;<span class="comment">//source:2-zs-23</span></span><br><span class="line">        <span class="comment">//source接受前端传来的String:2-zs-23</span></span><br><span class="line">        String[] studentStrArr = source.split(<span class="string">"-"</span>) ;</span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line">        student.setId(  Integer.parseInt(  studentStrArr[<span class="number">0</span>]) );</span><br><span class="line">      student.setName(studentStrArr[<span class="number">1</span>]);</span><br><span class="line">      student.setAge(Integer.parseInt(studentStrArr[<span class="number">2</span>] ));</span><br><span class="line">      <span class="keyword">return</span> student;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ii.配置：将MyConverter加入到springmvc中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1将 自定义转换器 纳入SpringIOC容器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span>  <span class="attr">id</span>=<span class="string">"myConverter"</span> <span class="attr">class</span>=<span class="string">"org.lanqiao.converter.MyConverter"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2将myConverter再纳入 SpringMVC提供的转换器Bean --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"conversionService"</span>  <span class="attr">class</span>=<span class="string">"org.springframework.context.support.ConversionServiceFactoryBean"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"converters"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"myConverter"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 3将conversionService注册到annotation-driven中 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--此配置是SpringMVC的基础配置，很功能都需要通过该注解来协调  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">conversion-service</span>=<span class="string">"conversionService"</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试转换器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"testConverter"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testConverter</span><span class="params">(@RequestParam(<span class="string">"studentInfo"</span>)</span>  Student student) </span>&#123;<span class="comment">// 前端：2-zs-23  System.out.println(student.getId()+","+student.getName()+","+student.getAge());</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中@RequestParam(“studentInfo”)是触发转换器的桥梁：<br>@RequestParam(“studentInfo”)接受的数据 是前端传递过来的：2-zs-23  ，但是 需要将该数据 复制给 修饰的目的对象Student；因此SPringMVC可以发现 接收的数据 和目标数据不一致，并且 这两种数据分别是 String、Student,正好符合public Student convert(String source)转换器。</p><h2 id="5-数据格式化"><a href="#5-数据格式化" class="headerlink" title="5.数据格式化"></a>5.数据格式化</h2><p>​    SimpleDateForamt sdf = new SimpleDateFormat(“yyyy-MM-dd  hh:mm:ss”);<br>SPringMVC提供了很多注解，方便我们数据格式化<br>实现步骤：<br>a.配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置数据格式化注解所依赖的bean</span></span><br><span class="line"><span class="comment">FormattingConversionServiceFactoryBean既能实现数据日期格式化，又能实现类型转换 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"conversionService"</span> <span class="attr">class</span>=<span class="string">"org.springframework.format.support.FormattingConversionServiceFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"converters"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"myConverter"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>b.通过注解使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DateTimeFormat</span>(pattern = <span class="string">"yyyy-MM-dd"</span>) <span class="comment">//接受前台传来的数据，转换为日期</span></span><br><span class="line"><span class="keyword">private</span> Date birthday;<span class="comment">//相应实体bean的属性</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"testDateTimeStringFormat"</span>)</span><br><span class="line"><span class="comment">//如果student的格式化错误，会将错误转入BindingResult中</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testDateTimeStringFormat</span><span class="params">(Student student,BindingResult result)</span> </span>&#123;</span><br><span class="line">    System.out.println(student);</span><br><span class="line">    <span class="keyword">if</span>(result.getErrorCount() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (FieldError error : result.getFieldErrors()) &#123;</span><br><span class="line">           System.out.println(error.getDefaultMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@NumberFormat(parttern=”###,#”)  </p><h1 id="1-错误消息："><a href="#1-错误消息：" class="headerlink" title="1.错误消息："></a>1.错误消息：</h1><p>public String testDateTimeFormat(Student student, BindingResult result ,Map&lt;String,Object&gt; map) {<br>需要验证的数据是 Student中的birthday, SPringMVC要求 如果校验失败  <strong>则将错误信息自动放入该对象之后紧挨着的    BindingResult中。</strong><br><strong>即Student student, BindingResult result之间 不能有其他参数。</strong></p><p>如果要将控制台的错误消息 传到jsp中显示，则可以将 错误消息对象放入request域中，然后 在jsp中 从request中获取。</p><h1 id="2-数据校验"><a href="#2-数据校验" class="headerlink" title="2.数据校验"></a>2.数据校验</h1><p>JSR303<br>Hibernate Validator </p><p><strong>JSR 303提供的标准注解如表所示。</strong></p><table><thead><tr><th>注解</th><th>简介</th></tr></thead><tbody><tr><td>@Null</td><td>被注释的元素必须为 null。</td></tr><tr><td>@NotNull</td><td>被注释的元素必须不为 null。</td></tr><tr><td>@AssertTrue</td><td>被注释的元素必须为 true。</td></tr><tr><td>@AssertFalse</td><td>被注释的元素必须为 false。</td></tr><tr><td>@Min(value)</td><td>被注释的元素必须是一个数字，其值必须大于或等于value。</td></tr><tr><td>@Max(value)</td><td>被注释的元素必须是一个数字，其值必须小于或等于value。</td></tr><tr><td>@DecimalMin(value)</td><td>被注释的元素必须是一个数字，其值必须大于或等于value。</td></tr><tr><td>@DecimalMax(value)</td><td>被注释的元素必须是一个数字，其值必须小于或等于value。</td></tr><tr><td>@Size(max,   min)</td><td>被注释的元素的取值范围必须是介于min和max之间。</td></tr><tr><td>@Digits   (integer, fraction)</td><td>被注释的元素必须是一个数字，其值必须在可接受的范围内。</td></tr><tr><td>@Past</td><td>被注释的元素必须是一个过去的日期。</td></tr><tr><td>@Future</td><td>被注释的元素必须是一个将来的日期。</td></tr><tr><td>@Pattern(value)</td><td>被注释的元素必须符合指定的正则表达式。</td></tr></tbody></table><p>表JSR 303注解</p><p>Hibernate Validator 是JSR 303的扩展。Hibernate Validator 提供了 JSR 303中所有内置的注解，以及自身扩展的4个注解，如表所示。</p><table><thead><tr><th>注解</th><th>简介</th></tr></thead><tbody><tr><td>@Email</td><td>被注释的元素值必须是合法的电子邮箱地址。</td></tr><tr><td>@Length</td><td>被注释的字符串的长度必须在指定的范围内。</td></tr><tr><td>@NotEmpty</td><td>被注释的字符串的必须非空。</td></tr><tr><td>@Range</td><td>被注释的元素必须在合适的范围内。</td></tr></tbody></table><p><strong>表  Hibernate Validator扩展注解</strong></p><p>使用Hibernate Validator步骤：</p><p>a.jar（注意各个jar之间可能存在版本不兼容）<br>hibernate-validator-5.0.0.CR2.jar     classmate-0.8.0.jar     jboss-logging-3.1.1.GA.jar<br>validation-api-1.1.0.CR1.jar     hibernate-validator-annotation-processor-5.0.0.CR2.jar</p><p>b配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> &gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时mvc:annotation-driven的作用：要实现Hibernate Validator/JSR303 校验（或者其他各种校验），必须实现SpringMVC提供的一个接口：ValidatorFactory</p><p>LocalValidatorFactoryBean是ValidatorFactory的一个实现类。<br>&lt;mvc:annotation-driven &gt;会在<strong>springmvc容器中 自动加载一个LocalValidatorFactoryBean类，因此可以直接实现数据校验。</strong></p><p>c.直接使用注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">​</span><br></pre></td></tr></table></figure><p>@Past//当前时间以前<br>private Date birthday ;<br>​<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>​    </p><p>在校验的Controller中 ，给<strong>校验的对象前增加 @Valid</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testDateTimeFormat</span><span class="params">(@Valid Student student, BindingResult result ,Map&lt;String,Object&gt; map)</span> </span>&#123;</span><br><span class="line">    &#123;...&#125;</span><br></pre></td></tr></table></figure><h1 id="3-Ajax请求SpringMVC，并且JSON格式的数据"><a href="#3-Ajax请求SpringMVC，并且JSON格式的数据" class="headerlink" title="3.Ajax请求SpringMVC，并且JSON格式的数据"></a>3.Ajax请求SpringMVC，并且JSON格式的数据</h1><p>a.jar<br>jackson-annotations-2.8.9.jar<br>jackson-core-2.8.9.jar<br>jackson-databind-2.8.9.jar</p><p>b。<br>@ResponseBod修饰的方法，会将该方法的返回值 以一个json数组的形式返回给前台</p><p>​            </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span><span class="comment">//告诉SpringMVC，此时的返回 不是一个 View页面，而是一个 ajax调用的返回值（Json数组）</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"testJson"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">testJson</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//Controller-Service-dao</span></span><br><span class="line"><span class="comment">//StudentService studentService = new StudentServiceImp();</span></span><br><span class="line"><span class="comment">//List&lt;Student&gt; students =  studentService.qeuryAllStudent();</span></span><br><span class="line"><span class="comment">//模拟调用service的查询操作</span></span><br><span class="line">...</span><br><span class="line">List&lt;Student&gt; students = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">students.add(stu1) ;</span><br><span class="line">students.add(stu2) ;</span><br><span class="line">students.add(stu3) ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> students;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前台：服务端将返回值结果 以json数组的形式 传给了result。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#testJson"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//通过ajax请求springmvc</span></span><br><span class="line">    $.post(</span><br><span class="line">        <span class="string">"handler/testJson"</span>,<span class="comment">//服务器地址</span></span><br><span class="line">        <span class="comment">//&#123;"name":"zs","age":23&#125;</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;<span class="comment">//服务端处理完毕后的回调函数 List&lt;Student&gt; students， 加上@ResponseBody后， students实质是一个json数组的格式</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;result.length ;i++)&#123;</span><br><span class="line">                alert(result[i].id +<span class="string">"-"</span>+result[i].name +<span class="string">"-"</span>+result[i].age);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br></pre></td></tr></table></figure><h1 id="1-SpringMVC实现文件上传："><a href="#1-SpringMVC实现文件上传：" class="headerlink" title="1.SpringMVC实现文件上传："></a>1.SpringMVC实现文件上传：</h1><p>和Servlet方式的本质一样，都是通过commons-fileupload.jar和commons-io.jar<br>SpringMVC可以简化文件上传的代码，但是必须满足条件：实现MultipartResolver接口 ；而该接口的实现类SpringMVC也已经提供了CommonsMultipartResolver</p><p>具体步骤：（直接使用CommonsMultipartResolver实现上传）<br>a.jar包<br>commons-fileupload.jar、commons-io.jar<br>b.配置CommonsMultipartResolver<br>将其加入SpringIOC容器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置CommonsMultipartResolver,用于实现文件上传</span></span><br><span class="line"><span class="comment">  springIoc容器在初始化时，会自动Id="multipartResolver"的bean，并自动加入容器中</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultEncoding"</span> <span class="attr">value</span>=<span class="string">"utf-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 上传单个文件的最大值，单位Byte;如果-1，表示无限制 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span>  <span class="attr">value</span>=<span class="string">"102400"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>c.处理方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//文件上传处理方法</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"testUpload"</span>) <span class="comment">//abc.png</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testUpload</span><span class="params">(@RequestParam(<span class="string">"desc"</span>)</span> String desc  , @<span class="title">RequestParam</span><span class="params">(<span class="string">"file"</span>)</span> MultipartFile file  ) <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"文件描述信息："</span>+desc);</span><br><span class="line">    <span class="comment">//jsp中上传的文件：file</span></span><br><span class="line">    InputStream input = file.getInputStream() ;<span class="comment">//IO</span></span><br><span class="line">    String fileName = file.getOriginalFilename() ;</span><br><span class="line">    OutputStream out = <span class="keyword">new</span> FileOutputStream(<span class="string">"d:\\"</span>+fileName) ;</span><br><span class="line">    <span class="keyword">byte</span>[] bs = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">int</span> len = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(( len = input.read(bs)) !=-<span class="number">1</span> ) &#123;</span><br><span class="line">        out.write(bs, <span class="number">0</span>, len);</span><br><span class="line">    &#125;</span><br><span class="line">    out.close();</span><br><span class="line">    input.close();</span><br><span class="line">    <span class="comment">//将file上传到服务器中的 某一个硬盘文件中</span></span><br><span class="line">    System.out.println(<span class="string">"上传成功！"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- enctype="mulipart/form-data"告诉浏览器我是要上传文件不是普通的请求 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"handler/testUpload"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"mulipart/form-data"</span>&gt;</span></span><br><span class="line">    describe:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"desc"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    file:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"upload"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>框架：  将原来自己写的1000行代码，变成：框架帮你写900行，剩下100行自己写</p><p>控制器：handler  servlet   controller   action  </p><h1 id="2拦截器"><a href="#2拦截器" class="headerlink" title="2拦截器"></a>2拦截器</h1><pre><code>拦截器的原理和过滤器相同。</code></pre><p>SpringMVC：要想实现拦截器，必须实现一个接口HandlerInterceptor</p><p><strong>ctrl+shift+r ：自己编写的代码.java  .jsp .html</strong><br><strong>ctrl+shift+t ：jar中的代码</strong></p><p>a.编写拦截器implements HandlerInterceptor<br>b.配置：将自己写的拦截器 配置到springmvc中（spring）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 将自己写的拦截器 配置到springmvc中（spring）,默认拦截全部请求 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"pers.nicolas.interceptor.MyInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 将自己写的拦截器 配置到springmvc中（spring）,默认拦截全部请求 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span> &gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置具体的拦截路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--指定拦截的路径，ant风格  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--指定不拦截的路径，ant风格  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">"/handler/testInterceptor"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"pers.nicolas.interceptor.MyInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><p>拦截器1拦截请求- 拦截器2拦截请求 - 请求方法 - 拦截器2处理相应-拦截器1处理相应-    拦截器2的afterCompletion()拦截-拦截器1的afterCompletion()拦截</p><p>如果有多个拦截器，则每个拦截器的preHandle postHandle afterCompletion都会在相应时机各被触发一次.</p><h1 id="3-异常处理"><a href="#3-异常处理" class="headerlink" title="3.异常处理"></a>3.异常处理</h1><p>SpringMVC：  <strong>HandlerExceptionResolver接口，</strong></p><p><strong>该接口的每个实现类 都是异常的一种处理方式：</strong></p><h2 id="a-ExceptionHandler注解"><a href="#a-ExceptionHandler注解" class="headerlink" title="a.@ExceptionHandler注解"></a>a.@ExceptionHandler注解</h2><p>ExceptionHandler,ExceptionResolver： 主要提供了@ExceptionHandler注解，并通过该注解处理异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//该方法 可以捕获本类中  抛出的ArithmeticException异常</span></span><br><span class="line"><span class="meta">@ExceptionHandler</span>(&#123;ArithmeticException.class,ArrayIndexOutOfBoundsException.class  &#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">handlerArithmeticException</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">System.out.println(e +<span class="string">"============"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"error"</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@ExceptionHandler标识的方法的参数 必须在异常类型(Throwable或其子类) ，不能包含其他类型的参数(Model可以，可以查看官方文档)</p><p><strong>异常处理路径：最短（接近的）优先</strong><br>如果有方法抛出一个ArithmeticException异常，而该类中 有2个对应的异常处理法你发：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler</span>(&#123;Exception.class  &#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handlerArithmeticException2</span><span class="params">(Exception e)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ExceptionHandler</span>(&#123;ArithmeticException.class  &#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handlerArithmeticException1</span><span class="params">(Exception e)</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>则优先级：  <strong>最短（接近的）优先。</strong></p><p><strong>@ExceptionHandler默认只能捕获 当前类中的异常方法。</strong><br>如果发生异常的方法  和处理异常的方法 <strong>不在同一个类中：@ControllerAdvice</strong></p><p>总结：如果一个方法用于处理异常，并且只处理当前类中的异常：@ExceptionHandler<br>      如果一个方法用于处理异常，并且处理所有类中的异常： 类前加@ControllerAdvice、 处理异常的方法前加@ExceptionHandler</p><h2 id="b-ResponseStatus"><a href="#b-ResponseStatus" class="headerlink" title="b.@ResponseStatus"></a>b.@ResponseStatus</h2><p>ResponseStatusExceptionResolver：自定义异常显示页面 @ResponseStatus</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseStatus</span>(value=HttpStatus.FORBIDDEN,reason=<span class="string">"数组越界222!!!"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyArrayIndexOutofBoundsException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;<span class="comment">//自定义异常</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"testMyException"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testMyException</span><span class="params">(@RequestParam(<span class="string">"i"</span>)</span> Integer i) <span class="keyword">throws</span> MyArrayIndexOutofBoundsException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i == <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> MyArrayIndexOutofBoundsException();<span class="comment">//抛出异常</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"testMyException2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testMyException2</span><span class="params">(@RequestParam(<span class="string">"i"</span>)</span> Integer i) </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(i == <span class="number">3</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"redirect:testResponseStatus"</span> ;<span class="comment">//跳转到某一个 异常处理方法里</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"success"</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ResponseStatus</span>(value = HttpStatus.CONFLICT, reason = <span class="string">"test exception！"</span>)</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"testResponseStatus"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testResponseStatus</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="c-DefaultHandlerExceptionResolver"><a href="#c-DefaultHandlerExceptionResolver" class="headerlink" title="c.DefaultHandlerExceptionResolver"></a>c.DefaultHandlerExceptionResolver</h2><p>异常处理的实现类：DefaultHandlerExceptionResolver:SPringMVC在一些常见异常的基础上（300 500  404），新增了一些异常，例如：</p><ul><li>@see org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler<ul><li>@see #handleNoSuchRequestHandlingMethod</li><li>@see #handleHttpRequestMethodNotSupported  ：如果springmvc的处理方法限制为post方式，如果实际请求为get,则会触发此异常显示的页面</li><li>@see #handleHttpMediaTypeNotSupported</li><li>@see #handleMissingServletRequestParameter</li><li>@see #handleServletRequestBindingException</li><li>@see #handleTypeMismatch</li><li>@see #handleHttpMessageNotReadable</li><li>@see #handleHttpMessageNotWritable</li><li>@see #handleMethodArgumentNotValidException</li><li>@see #handleMissingServletRequestParameter</li><li>@see #handleMissingServletRequestPartException</li><li>@see #handleBindException</li></ul></li></ul><h2 id="d-SimpleMappingExceptionResolver"><a href="#d-SimpleMappingExceptionResolver" class="headerlink" title="d.SimpleMappingExceptionResolver"></a>d.SimpleMappingExceptionResolver</h2><p>：通过配置来实现异常的处理</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--SimpleMappingExceptionResolver:以配置的方式处理异常 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span>  <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.SimpleMappingExceptionResolver"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 如果发生异常，异常对象会被保存在  exceptionAttribute的value值中；并且会放入request域中 ；异常变量的默认值是 exception--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;property name="exceptionAttribute" value="exception"&gt;&lt;/property&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"exceptionMappings"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 相当于catch(ArithmeticException ex)&#123; 跳转：error &#125; --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"java.lang.ArithmeticException"</span>&gt;</span></span><br><span class="line">                error</span><br><span class="line">            <span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"java.lang.NullPointerException"</span>&gt;</span></span><br><span class="line">                error</span><br><span class="line">            <span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="SSM整合："><a href="#SSM整合：" class="headerlink" title="SSM整合："></a>SSM整合：</h1><p>Spring - SpringMVC -  MyBatis </p><p>1.<br>Spring -  MyBatis   :    需要整合：将MyBatis的SqlSessionFactory 交给Spring</p><p>2<br>Spring - SpringMVC  ：  就是将Spring - SpringMVC 各自配置一遍</p><p>思路：<br>    SqlSessionFactory -&gt; SqlSession -&gt;StudentMapper -&gt;CRUD<br>可以发现 ，MyBatis最终是通过SqlSessionFactory来操作数据库，<br>Spring整合MyBatis 其实就是 将MyBatis的SqlSessionFactory 交给Spring</p><p>SM整合步骤：<br>1.jar<br>mybatis-spring.jar    spring-tx.jar    spring-jdbc.jar        spring-expression.jar<br>spring-context-support.jar    spring-core.jar        spring-context.jar<br>spring-beans.jar    spring-aop.jar    spring-web.jar    commons-logging.jar<br>commons-dbcp.jar    ojdbc.jar    mybatis.jar    log4j.jar    commons-pool.jar</p><p>2.类-表</p><p>Student类 -student表</p><p>3.-（与Spring整合时，conf.xml可省）–MyBatis配置文件conf.xml（数据源、mapper.xml） –可省，将该文件中的配置 全部交由spring管理</p><p>spring配置文件 applicationContext.xml</p><p>4.通过mapper.xml将 类、表建立映射关系</p><p>5.<br>之前使用MyBatis:    conf.xml -&gt;SqlSessionFacotry</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- web项目中，spring介入项目 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- needed for ContextLoaderListener --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Bootstraps the root web application context before servlet initialization --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure><p>现在整合的时候，需要通过Spring管理SqlSessionFacotry ，因此 产生qlSessionFacotry 所需要的数据库信息 不在放入conf.xml  而需要放入spring配置文件中</p><p>配置Spring配置文件（applicationContext.xml）  （Web项目）：<br>web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure><p>6.使用Spring整合MyBatis ：将MyBatis的SqlSessionFactory 交给Spring</p><p><strong>注意xml文件路径有classpath:存在,和整合sm最大不同</strong> </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 加载db.properties文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"config"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"locations"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:db.properties<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据库信息(替代了mybatis中的配置文件conf.xml) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxActive"</span> <span class="attr">value</span>=<span class="string">"$&#123;maxActive&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdle"</span> <span class="attr">value</span>=<span class="string">"$&#123;maxIdle&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- cof.xml: 数据源、mapper.xml --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 在SpringIoc容器中 创建Mybatis的核心类SqlSessionFactory --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 加载mapper.xml配置文件 --&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 注意有classpath:存在,和整合sm最大不同 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">value</span>=<span class="string">"classpath:pers/nicolas/mapper/*.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 将mybatis的SqlSessionFactory交给spring --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">value</span>=<span class="string">"sqlSessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- xxxxMapper --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"pers.nicolas.mapper"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>7.继续整合SpringMVC：将springmvc加入项目即可<br>a.加入SpringMVC需要的jar<br>spring-webmvc.jar</p><p>b.给项目加入SpringMVC支持<br>web.xml: dispatcherServlet（alt+/）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- web项目整合springmvc --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- The front controller of this Spring Web application, responsible for handling all application requests --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springDispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext-controller.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Map all requests to the DispatcherServlet for handling --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springDispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>c.编写springmvc配置文件：<br>applicationContext-controller.xml：视图解析器、基础配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 将控制器所在的包加入springIOC容器  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"pers.nicolas.controller"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置视图解析器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/views/"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- springMVC基础配置、标配 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure><p>d.示例</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;&lt;h1 id=&quot;springmvc&quot;&gt;&lt;a href=&quot;#springmvc&quot; class=&quot;headerlink&quot; title=&quot;springmvc:&quot;&gt;&lt;/a&gt;springmvc:&lt;/h1&gt;&lt;p&gt;1.jar&lt;br&gt;spring-aop.jar&lt;br&gt;spring-bean.jar&lt;br&gt;spring-context.jar&lt;br&gt;spring-core.jar&lt;br&gt;spring-web.jar&lt;/p&gt;&lt;p&gt;spring-webmvc.jar&lt;br&gt;commons-logging.jar&lt;/p&gt;&lt;p&gt;报错NoClassDefFoundError：缺少jar&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://codeofli.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://codeofli.github.io/tags/java/"/>
    
      <category term="springMvc" scheme="https://codeofli.github.io/tags/springMvc/"/>
    
  </entry>
  
  <entry>
    <title>spring</title>
    <link href="https://codeofli.github.io/2019/10/java-note/spring/spring/"/>
    <id>https://codeofli.github.io/2019/10/java-note/spring/spring/</id>
    <published>2019-10-19T07:23:24.000Z</published>
    <updated>2019-11-13T12:20:17.181Z</updated>
    
    <content type="html"><![CDATA[<p>2002 Rod Johnon <expoer one-on-one j2eedevelopment and design><br>Spring  2003  ,IOC  Aop<br>Spring data,spring boot,spring cloud,spring framework ,spring social </expoer></p><p>[TOC]</p><h1 id="IOC-控制反转"><a href="#IOC-控制反转" class="headerlink" title="IOC :控制反转"></a>IOC :控制反转</h1><p>（DI：依赖注入）</p><h2 id="1-搭建Spring环境"><a href="#1-搭建Spring环境" class="headerlink" title="1.搭建Spring环境"></a>1.搭建Spring环境</h2><p>下载jar<br><a href="http://maven.springframework.org/release/org/springframework/spring/" target="_blank" rel="noopener">http://maven.springframework.org/release/org/springframework/spring/</a><br>spring-framework-4.3.9.RELEASE-dist.zip<br>开发spring至少需要使用的jar(5个+1个):<br>spring-aop.jar        开发AOP特性时需要的JAR<br>spring-beans.jar    处理Bean的jar            <bean><br>spring-context.jar    处理spring上下文的jar        <context><br>spring-core.jar        spring核心jar<br>spring-expression.jar    spring表达式<br>三方提供的日志jar<br>commons-logging.jar    日志</context></bean></p><a id="more"></a><h2 id="2-编写配置文件"><a href="#2-编写配置文件" class="headerlink" title="2.编写配置文件"></a>2.编写配置文件</h2><p>为了编写时有一些提示、自动生成一些配置信息：<br>方式一：增加sts插件<br>可以给eclipse增加 支持spring的插件：spring tool suite(<a href="https://spring.io/tools/sts/all" target="_blank" rel="noopener">https://spring.io/tools/sts/all</a>)<br>下载springsource-tool-suite-3.9.4.RELEASE-e4.7.3a-updatesite.zip,然后在Eclipse中安装：Help-Install new SoftWare.. - Add</p><p>方式二：<br>    直接下载sts工具（相当于一个集合了Spring tool suite的Eclipse）: <a href="https://spring.io/tools/sts/" target="_blank" rel="noopener">https://spring.io/tools/sts/</a></p><p>新建：bean configuration .. - applicationContext.xml</p><h2 id="3-开发Spring程序-IOC"><a href="#3-开发Spring程序-IOC" class="headerlink" title="3.开发Spring程序(IOC)"></a>3.开发Spring程序(IOC)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext conext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>) ;</span><br><span class="line"><span class="comment">//执行从springIOC容器中获取一个 id为student的对象</span></span><br><span class="line">Student student = (Student)conext.getBean(<span class="string">"student"</span>) ;</span><br></pre></td></tr></table></figure><p>可以发现，springioc容器 帮我们new了对象，并且给对象赋了值</p><p>SpringIOC发展史：<br>1.<br>Student student = new Student();<br>student.setXxx();</p><p>2.<br>简单工厂</p><p>3.ioc （超级工厂）</p><p>IOC（控制反转,Inversion of Control）也可以称之为DI（依赖注入,Dependency Injection）：<br>控制反转：将 创建对象、属性值 的方式 进行了翻转，从new、setXxx()  翻转为了 从springIOC容器getBean()<br>依赖注入：将属性值 注入给了属性，将属性 注入给了bean，将bean注入给了ioc容器；</p><p>​<br>总结：ioc/di ，无论要什么对象，都可以直接去springioc容器中获取，而不需要自己操作（new\setXxx()）</p><p>因此之后的ioc分为2步：1 先给springioc中存放对象并赋值   2 拿</p><p>DI:依赖注入 ，<br>Teacher  </p><p>Course  : cname  teacher</p><p>IOC容器赋值：如果是简单类型（8个基本+String），value；<br>    如果是对象类型，ref=”需要引用的id值”，因此实现了 对象与对象之间的依赖关系</p><p>conext.getBean(需要获取的bean的id值)</p><h3 id="依赖注入3种方式："><a href="#依赖注入3种方式：" class="headerlink" title="依赖注入3种方式："></a>依赖注入3种方式：</h3><h3 id="1-set注入：通过setXxx-赋值"><a href="#1-set注入：通过setXxx-赋值" class="headerlink" title="1.set注入：通过setXxx()赋值"></a>1.set注入：通过setXxx()赋值</h3><p>赋值，默认使用的是 set方法();<br><strong>依赖注入底层是通过反射实现的。</strong><br>&lt;property…&gt;</p><h3 id="2-构造器注入：通过构造方法赋值"><a href="#2-构造器注入：通过构造方法赋值" class="headerlink" title="2.构造器注入：通过构造方法赋值"></a>2.构造器注入：通过构造方法赋值</h3><p> <constructor-arg value="ls" type="String" index="0" name="name"></constructor-arg><br>需要注意：如果  <constructor-arg>的顺序 与构造方法参数的顺序不一致，则需要通过type或者index或name指定。</constructor-arg></p><h3 id="3-p命名空间注入"><a href="#3-p命名空间注入" class="headerlink" title="3.p命名空间注入"></a>3.p命名空间注入</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">引入p命名空间</span><br><span class="line">xmlns:p="http://www.springframework.org/schema/p"</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"course"</span> <span class="attr">class</span>=<span class="string">"org.lanqiao.entity.Course"</span> <span class="attr">p:courseHour</span>=<span class="string">"300"</span> <span class="attr">p:courseName</span>=<span class="string">"hadoop"</span> <span class="attr">p:teacher-ref</span>=<span class="string">"teacher"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>本质也是反射</p><p>简单类型：<br>    p:属性名=”属性值”<br>引用类型（除了String外）：<br>    p:属性名-ref=”引用的id”<br>注意多个 p赋值的时候 要有空格。</p><p>注意：<br><strong>无论是String还是Int/short/long，在赋值时都是 value=”值” ，当参数重载时默认为String优先</strong><br>因此建议 此种情况 需要配合 name\type进行区分</p><p>示例：<br>    注入各种集合数据类型: List  Set map properties</p><p>set、list、数组   各自都有自己的标签<set> <list> <array>，但是也可以混着用</array></list></set></p><p>###<strong>value与<value>注入方式的区别：</value></strong></p><table><thead><tr><th></th><th align="left">使用子元素<value>注入</value></th><th>而使用value属性注入</th></tr></thead><tbody><tr><td>参数值位置</td><td align="left">写在首尾标签（<value></value>）的中间(不加双引号)</td><td>写在value的属性值中（必须加双引号）</td></tr><tr><td>type属性</td><td align="left">有（可选）   可以通过type属性指定数据类型</td><td>无</td></tr><tr><td>参数值包含特殊字符（&lt;， &amp;）时的处理方法</td><td align="left">两种处理方法。  <strong>一、使用<!--[CDATA[]]-->标记</strong>  二、使用XML预定义的实体引用</td><td>一种处理方法。即使用XML预定义的实体引用</td></tr></tbody></table><p>其中，XML预定义的实体引用，如表所示。</p><table><thead><tr><th>实体引用</th><th>表示的符号</th></tr></thead><tbody><tr><td>&lt;</td><td>&lt;</td></tr><tr><td>&amp;</td><td>&amp;</td></tr><tr><td>&gt;</td><td>&gt;</td></tr></tbody></table><p>给对象类型赋值null ：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> &gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">null</span>/&gt;</span>       --&gt;注意 没有<span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p>赋空值 “”  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> &gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在ioc中定义bean的前提：该bean的类 必须提供了 无参构造</p><h3 id="4-自动装配（只适用于-ref类型-）："><a href="#4-自动装配（只适用于-ref类型-）：" class="headerlink" title="4.自动装配（只适用于 ref类型 ）："></a>4.<strong>自动装配（只适用于 ref类型 ）</strong>：</h3><p>​    约定优于配置</p><p>自动装配：<br>&lt;bean … class=”org.lanqiao.entity.Course”  autowire=”byName|byType|constructor|no” &gt;  byName本质是byId<br>byName:  自动寻找：其他bean的id值=该Course类的属性名<br>byType:  其他bean的类型(class)  是否与 该Course类的ref属性类型一致  （注意，此种方式 必须满足：当前Ioc容器中 只能有一个Bean满足条件  ）<br>constructor： 其他bean的类型(class)  是否与 该Course类的构造方法参数 的类型一致；此种方式的本质就是byType</p><p>可以在头文件中 一次性将该ioc容器的所有bean  统一设置成自动装配：<br>&lt;beans xmlns=”<a href="http://www.springframework.org/schema/beans&quot;" target="_blank" rel="noopener">http://www.springframework.org/schema/beans&quot;</a><br>…<br>default-autowire=”byName”&gt;</p><p>自动装配虽然可以减少代码量，但是会降低程序的可读性，使用时需要谨慎。</p><h2 id="使用注解定义bean："><a href="#使用注解定义bean：" class="headerlink" title="使用注解定义bean："></a>使用注解定义bean：</h2><p>通过注解的形式 将bean以及相应的属性值 放入ioc容器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"pers.nicolas.aop"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在启动的时候，会根据base-package在 该包中扫描所有类，查找这些类是否有注解@Component(“studentDao”),如果有，则将该类 加入spring Ioc容器。</p><p><strong>@Component细化：</strong></p><p><strong>dao层注解：@Repository</strong><br><strong>service层注解：@Service</strong><br><strong>控制器层注解：@Controller</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span>(<span class="string">"StudentService"</span>) <span class="comment">//注意添加scan扫描包</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentServiceImpl</span> <span class="keyword">implements</span> <span class="title">IStudentService</span></span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span> <span class="comment">//自动装配，byType</span></span><br><span class="line"><span class="meta">@Qualifier</span>(<span class="string">"stuDao"</span>) <span class="comment">// byIdName</span></span><br><span class="line">IStudentDao studentDao = <span class="keyword">new</span> StudentDaoImp();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStudentDao</span><span class="params">(IStudentDao studentDao)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.studentDao = studentDao;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="使用注解实现事务"><a href="#使用注解实现事务" class="headerlink" title="使用注解实现事务"></a>使用注解实现事务</h1><p>（声明式事务）</p><p>目标：通过事务 使以下方法 要么全成功、要么全失败<br>public void addStudent()<br>{<br>    //增加班级<br>    //增加学生<br>    //crdu<br>}</p><p>a. jar包<br>spring-tx-4.3.9.RELEASE<br>ojdbc.jar<br>commons-dbcp.jar  连接池使用到数据源<br>commons-pool.jar  连接池<br>spring-jdbc-4.3.9.RELEASE.jar<br>aopalliance.jar </p><p>b.配置<br>jdbc\mybatis\spring<br><strong>增加事务tx的命名空间</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置数据库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span></span></span><br><span class="line"><span class="tag"><span class="attr">value</span>=<span class="string">"oracle.jdbc.OracleDriver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span></span></span><br><span class="line"><span class="tag"><span class="attr">value</span>=<span class="string">"jdbc:oracle:thin:@localhost:1521:MLDN"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"scott"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"tigger"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxActive"</span> <span class="attr">value</span>=<span class="string">"10"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdle"</span> <span class="attr">value</span>=<span class="string">"6"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置事务管理器txManager --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"txManager"</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 增加对事务的支持 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span></span></span><br><span class="line"><span class="tag"><span class="attr">transaction-manager</span>=<span class="string">"txManager"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>c.使用</p><p>将需要 成为事务的方法 前增加注解：<br>@Transactional(readOnly=false,propagation=Propagation.REQUIRED)</p><h1 id="AOP：面向方面编程"><a href="#AOP：面向方面编程" class="headerlink" title="AOP：面向方面编程"></a>AOP：面向方面编程</h1><p>一个普通的类    -&gt;    有特定功能的类<br>    a.继承类  b.实现接口  c.注解  d.配置</p><p>public class MyFilter exntends/implements Xx<br>{</p><p>}</p><p>类 -&gt; “通知” ：实现接口</p><h2 id="前置通知实现步骤："><a href="#前置通知实现步骤：" class="headerlink" title="前置通知实现步骤："></a>前置通知实现步骤：</h2><p>ThrowsAdvice</p><p>a.jar<br>    aopaliance.jar<br>    aspectjweaver.jar</p><p>b.配置</p><p>c.编写<br>    aop：每当之前add()之前 自动执行一个方法log();</p><pre><code>addStudent();  业务方法（IStudentService.java中的  addStudent()）before();  自动执行的通知，即aop前置通知</code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 前置通知类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"LogBefore"</span> <span class="attr">class</span>=<span class="string">"pers.nicolas.aop.LogBefore"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 将方法和通知进行关联 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置切入点（在哪里执行通知） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span></span></span><br><span class="line"><span class="tag"><span class="attr">expression</span>=<span class="string">"execution(public void pers.nicolas.service.StudentServiceImpl.deleteStudentByNo(int)) or execution(public void pers.nicolas.service.StudentServiceImpl.addStudent(pers.nicolas.entity.Student))"</span></span></span><br><span class="line"><span class="tag"><span class="attr">id</span>=<span class="string">"pointcut"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- advisor相当于连接切入点和切面的线 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"LogBefore"</span></span></span><br><span class="line"><span class="tag"><span class="attr">pointcut-ref</span>=<span class="string">"pointcut"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="表达式expression的常见示例如表所示。"><a href="#表达式expression的常见示例如表所示。" class="headerlink" title="表达式expression的常见示例如表所示。"></a>表达式expression的常见示例如表所示。</h2><p>expression=*”execution(…)”* </p><table><thead><tr><th>举例</th><th>含义</th></tr></thead><tbody><tr><td>public   boolean addStudent(org.lanqiao.entity.Student))</td><td>所有返回类型为boolean、参数类型为org.lanqiao.entity.Student的addStudent()方法。</td></tr><tr><td>public   boolean org.lanqiao.service.IStudentService.   addStudent(org.lanqiao.entity.Student)</td><td>org.lanqiao.service.IStudentService类（或接口）中的addStudent()方法，并且返回类型是boolean、参数类型是org.lanqiao.entity.Student</td></tr><tr><td>public   * addStudent(org.lanqiao.entity.Student)</td><td>“*”代表任意返回类型</td></tr><tr><td>public   void *( org.lanqiao.entity.Student)</td><td>“*”代表任意方法名</td></tr><tr><td>public   void addStudent(..)</td><td>“..”代表任意参数列表</td></tr><tr><td>*   org.lanqiao.service.<em>.</em>(..)</td><td>org.lanqiao.service.IStudentService包中，包含的所有方法（不包含子包中的方法）</td></tr><tr><td>* org.lanqiao.service..<em>.</em>(..)</td><td>org.lanqiao.service.IStudentService包中，包含的所有方法（包含子包中的方法）</td></tr></tbody></table><p>execution(* com.atguigu.crud.service..*(..))</p><p>expression常见示例</p><p>org.lanqiao.service   </p><p>org.lanqiao.service.impl</p><p>public class Xxx<br>{<br>    @Test<br>    a(){}<br>}</p><p><strong>如果出现异常：类似java.lang.NoClassDefFoundError: org/apache/commons/pool/impl/GenericObjectPool</strong><br><strong>则说明缺少jar</strong></p><h2 id="后置通知："><a href="#后置通知：" class="headerlink" title="后置通知："></a>后置通知：</h2><p>AfterReturningAdvice</p><p>a.通知类  ，普通实现接口<br>b.业务类、业务方法<br>    StudentServiceImpl中的addStudent()<br>c.配置：<br>    将业务类、通知 纳入springIOC容器<br>    定义切入点（一端）、定义通知类（另一端），通过pointcut-ref将两端连接起来</p><h2 id="异常通知："><a href="#异常通知：" class="headerlink" title="异常通知："></a>异常通知：</h2><p>ThrowsAdvice</p><p>​    根据异常通知接口的定义可以发现，异常通知的实现类 必须编写以下方法：<br>​    public void afterThrowing([Method, args, target], ThrowableSubclass)：</p><pre><code>a.public void afterThrowing(Method, args, target, ThrowableSubclass)b.public void afterThrowing( ThrowableSubclass)</code></pre><h2 id="环绕通知："><a href="#环绕通知：" class="headerlink" title="环绕通知："></a>环绕通知：</h2><p>MethodInterceptor</p><p>在目标方法的前后、异常发生时、最终等各个地方都可以 进行的通知，最强大的一个通知；<br>    可以获取目标方法的 全部控制权（目标方法是否执行、执行之前、执行之后、参数、返回值等）</p><p>在使用环绕通知时，目标方法的一切信息 都可以通过invocation参数获取到<br><strong>环绕通知 底层是通过拦截器实现的。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(MethodInvocation invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">Object result = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"around advice[before advice]"</span>);</span><br><span class="line"><span class="comment">// invocation.proceed()之前后的代码：前后置通知</span></span><br><span class="line">result = invocation.proceed();<span class="comment">// 控制目标方法的执行 xxx(),result就是目标方法的返回值</span></span><br><span class="line"><span class="comment">// invocation.proceed()之后的代码：后置通知</span></span><br><span class="line">System.out.println(<span class="string">""</span>);</span><br><span class="line">System.out</span><br><span class="line">.println(<span class="string">"around advice[after advice]: traget object :"</span> + invocation.getThis() + <span class="string">", function name:="</span></span><br><span class="line">+ invocation.getMethod().getName() + <span class="string">",returnValue="</span> + result + <span class="string">",args="</span> + invocation.getArguments());</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// 异常通知</span></span><br><span class="line">System.out.println(<span class="string">"around advice[exception advice]"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、实现注解实现-通知-aop"><a href="#二、实现注解实现-通知-aop" class="headerlink" title="二、实现注解实现 通知 aop"></a>二、实现注解实现 通知 aop</h2><p>a.jar<br>    与 实现接口 的方式相同<br>b.配置<br>    将业务类、通知 纳入springIOC容器<br>    开启注解对AOP的支持<a href="aop:aspectj-autoproxy" target="_blank" rel="noopener">aop:aspectj-autoproxy</a><br>    业务类 addStudent -  通知 </p><p>c.编写</p><p>通知：<br>@Aspect  //声明该类 是一个 通知<br>public class LogBeforeAnnotation  {</p><p>}</p><p>注意：通过注解形式 将对象增加到 ioc容器时，需要设置 扫描器<br>&lt;context:component-scan base-package=”org.lanqiao.aop”&gt;</p><p>扫描器 会将 指定的包 中的  @Componet @Service  @Respository   @Controller修饰的类产生的对象 增加到IOC容器中<br>@Aspect不需要 加入扫描器，只需要开启即可：<a href="aop:aspectj-autoproxy" target="_blank" rel="noopener">aop:aspectj-autoproxy</a></p><p>通过注解形式 实现的aop，如果想获取 目标对象的一些参数，则需要使用一个对象：JoinPoint</p><p>注解形式的返回值：<br>a.声明返回值 的参数名：<br>    @AfterReturning( pointcut= “execution(public * addStudent(..))” ,returning=”returningValue” )<br>    public void myAfter(JoinPoint jp,Object returningValue) {//returningValue是返回值，但需要告诉spring<br>        System.out.println(“返回值：”+returningValue );<br>注解形式实现aop时，通知的方法的参数不能多、少</p><p>实现接口形式、注解形式 只捕获声明的特定类型的异常，而其他类型异常不捕获。<br>cath()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(<span class="string">"logAnnotaiton"</span>)</span><br><span class="line"><span class="meta">@Aspect</span> <span class="comment">// 声明此类是一个通知</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogAopAnnotation</span> </span>&#123;</span><br><span class="line"><span class="comment">//前置通知</span></span><br><span class="line"><span class="meta">@Before</span>(<span class="string">"execution(public * addStudent(..))"</span>) <span class="comment">// 属性：定义切点</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MyBefore</span><span class="params">(JoinPoint jp)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"&lt;[Annotation]前置 advice&gt;: target object:"</span> + jp.getTarget() + <span class="string">",methodName:"</span></span><br><span class="line">+ jp.getSignature().getName() + <span class="string">",arguments:"</span> + Arrays.toString(jp.getArgs()));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//后置通知</span></span><br><span class="line"><span class="meta">@AfterReturning</span>(pointcut = <span class="string">"execution(public * addStudent(..))"</span>,returning = <span class="string">"returningValue"</span>) <span class="comment">// 属性：定义切点,要得到返回值必须通过注解声明</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AfterReturning</span><span class="params">(JoinPoint jp,Object returningValue)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"&lt;[Annotation]后置advice&gt; target object:"</span> + jp.getTarget() + <span class="string">",methodName:"</span></span><br><span class="line">+ jp.getSignature().getName() + <span class="string">",arguments:"</span> + Arrays.toString(jp.getArgs())+<span class="string">",returnVlaue:"</span>+returningValue);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Exception Advice:如果只捕获指定异常，可以通过通过注解throwing指定</span></span><br><span class="line"><span class="meta">@AfterThrowing</span>(pointcut = <span class="string">"execution(public * addStudent(..))"</span>,throwing = <span class="string">"e"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MyException</span><span class="params">(JoinPoint jp,NullPointerException e)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"&lt;[Annotation]exception advice&gt; e:"</span>+e.getMessage());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//环绕通知,参数ProceedingJoinPoint</span></span><br><span class="line"><span class="meta">@Around</span>(<span class="string">"execution(public * addStudent(..))"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MyAroud</span><span class="params">(ProceedingJoinPoint jp)</span></span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"&lt;[Annotation【Around】]前置 advice&gt;"</span>);</span><br><span class="line"><span class="comment">//方法之前，前置通知</span></span><br><span class="line">jp.proceed();<span class="comment">//方法执行</span></span><br><span class="line"><span class="comment">//方法之后，后前置通知</span></span><br><span class="line">System.out.println(<span class="string">"&lt;[Annotation【Around】]后置 advice&gt;"</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(Throwable e) &#123;<span class="comment">//方法异常，异常通知</span></span><br><span class="line">System.out.println(<span class="string">"&lt;[Annotation【Around】]exception advice&gt;"</span>);</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;<span class="comment">//最终执行，最终通知</span></span><br><span class="line">System.out.println(<span class="string">"&lt;[Annotation【Around】]最终 advice&gt;"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//最终通知</span></span><br><span class="line"><span class="meta">@After</span>(<span class="string">"execution(public * addStudent(..))"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MyAfter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"&lt;[Annotation]最终advice&gt;"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、通过-配置将-类-gt-通知"><a href="#三、通过-配置将-类-gt-通知" class="headerlink" title="三、通过 配置将 类-&gt;通知"></a>三、通过 配置将 类-&gt;通知</h2><p>基于Schema配置<br>类似 于 实现接口的方式</p><p>接口方式通知：public class LogAfter implements AfterReturningAdvice<br>Schema方式通知：<br>    a.编写一个普通类  public class LogAfter {}<br>    b.将该类 通过配置，转为一个“通知”</p><p>如果要获取目标对象信息：<br>注解、schema：JoinPoint<br>接口：Method method, Object[] args, Object target</p><p>schema形式 和注解形式相似，不同之处： 注解形式 使用了注册@After，  schmema形式进行了多余的配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置切入点（在哪里执行通知） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">expression</span>=<span class="string">"execution(public void pers.nicolas.service.StudentServiceImpl.addStudent(pers.nicolas.entity.Student))"</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">id</span>=<span class="string">"pointcut_schema"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- schema方式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"LogSchema"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"before"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut_schema"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">"afterReturning"</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">returning</span>=<span class="string">"returnValue"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut_schema"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">"MyException"</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">throwing</span>=<span class="string">"e"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut_schema"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">"around"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">pointcut-ref</span>=<span class="string">"pointcut_schema"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="1-Spring开发Web项目-及-拆分Spring配置文件"><a href="#1-Spring开发Web项目-及-拆分Spring配置文件" class="headerlink" title="1.Spring开发Web项目 及 拆分Spring配置文件"></a>1.Spring开发Web项目 及 拆分Spring配置文件</h1><h2 id="a-Spring开发Web项目"><a href="#a-Spring开发Web项目" class="headerlink" title="a.Spring开发Web项目"></a>a.Spring开发Web项目</h2><p>   Web项目如何初始化SpringIOC容器 ：思路：当服务启动时（tomcat），通过监听器将SpringIOC容器初始化一次（该监听器 spring-web.jar已经提供）<br>   因此用spring开发web项目 至少需要7个jar： spring-java的6个jar + spring-<strong>web.jar，注意：web项目的jar包 是存入到WEB-INF/lib中</strong></p><p>web项目启动时 ，会自动加载web.xml，因此需要在web.xml中加载 监听器（ioc容器初始化）。</p><p>Web项目启动时，启动实例化Ioc容器：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 指定 Ioc容器（applicationContext.xml）的位置--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--  监听器的父类ContextLoader中有一个属性contextConfigLocation，该属性值 保存着 容器配置文件applicationContext.xml的位置 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 配置spring-web.jar提供的监听器，此监听器 可以在服务器启动时 初始化Ioc容器。</span></span><br><span class="line"><span class="comment"> 初始化Ioc容器（applicationContext.xml） ，</span></span><br><span class="line"><span class="comment"> 1.告诉监听器 此容器的位置：context-param</span></span><br><span class="line"><span class="comment"> 2.默认约定的位置:WEB-INF/applicationContext.xml</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="b-拆分Spring配置文件"><a href="#b-拆分Spring配置文件" class="headerlink" title="b.拆分Spring配置文件"></a>b.拆分Spring配置文件</h2><p>​    java项目：<br>​        applicationContext1.xml<br>​        applicationContext2.xml<br>​        applicationContext3.xml</p><p>ApplicationContext conext = new ClassPathXmlApplicationContext(“applicationContext3.xml”) ;</p><p>Web项目：<br>    根据什么拆分？<br>    i.三层结构<br>        UI(html/css/jsp  、Servlet)  applicationController.xml<br>        Service :applicationService.xml<br>        Dao:applicationDao.xml<br>        公共 数据库:applicationDB.xml</p><p>ii.功能结构<br>    学生相关配置 applicationContextStudent.xml   <bean id class="X...Student"><br>    班级相关配置 applicationContextClass.xml </bean></p><p>合并：如何将多个配置文件 加载<br>    （1）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  监听器的父类ContextLoader中有一个属性contextConfigLocation，该属性值 保存着 容器配置文件applicationContext.xml的位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span></span><br><span class="line">classpath:applicationContext.xml,</span><br><span class="line">classpath:applicationContext-Dao.xml,</span><br><span class="line">classpath:applicationContext-Service.xml,</span><br><span class="line">classpath:applicationContext-Controller.xml</span><br><span class="line"><span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    （2）推荐</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  监听器的父类ContextLoader中有一个属性contextConfigLocation，该属性值 保存着 容器配置文件applicationContext.xml的位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span></span><br><span class="line">classpath:applicationContext.xml,</span><br><span class="line">classpath:applicationContext-*.xml</span><br><span class="line"><span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（3）只在web.xml中加载主配置文件，</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span></span><br><span class="line">  classpath:applicationContext.xml</span><br><span class="line">  <span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​        然后在主配置问加中，加载其他配置文件:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"applicationContext-*.xml"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>Web项目：</p><p><img src="/2019/10/java-note/spring/spring/E:%5Cpictures%5CLanguage%5Cspring%5CspringIoc%E5%AE%B9%E5%99%A8%E5%92%8Cservlet%E5%AE%B9%E5%99%A8.png" alt="1561880276559"></p><h1 id="2-Spring整合MyBatis"><a href="#2-Spring整合MyBatis" class="headerlink" title="2.Spring整合MyBatis"></a>2.Spring整合MyBatis</h1><p>Spring - MyBatis </p><p>思路：<br>    SqlSessionFactory -&gt; SqlSession -&gt;StudentMapper -&gt;CRUD<br>可以发现 ，MyBatis最终是通过SqlSessionFactory来操作数据库，<br>Spring整合MyBatis 其实就是 将MyBatis的SqlSessionFactory 交给Spring</p><p>SM整合步骤：<br>1.jar<br>mybatis-spring.jar    spring-tx.jar    spring-jdbc.jar        spring-expression.jar<br>spring-context-support.jar    spring-core.jar        spring-context.jar<br>spring-beans.jar    spring-aop.jar    spring-web.jar    commons-logging.jar<br>commons-dbcp.jar    ojdbc.jar    mybatis.jar    log4j.jar    commons-pool.jar</p><p>2.类-表</p><p>3.MyBatis配置文件conf.xml</p><p>4.通过mapper.xml将 类、表建立映射关系</p><p>5.之前使用MyBatis:    conf.xml -&gt;SqlSessionFacotry </p><p>现在整合的时候，需要通过Spring管理SqlSessionFacotry ，因此 产生qlSessionFacotry 所需要的数据库信息 不在放入conf.xml  而需要放入spring配置文件中</p><p>配置Spring配置文件（applicationContext.xml）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 加载db.properties文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"config"</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"locations"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:db.properties<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据库信息(替代了mybatis中的配置文件conf.xml) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxActive"</span> <span class="attr">value</span>=<span class="string">"$&#123;maxActive&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdle"</span> <span class="attr">value</span>=<span class="string">"$&#123;maxIdle&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 在SpringIoc容器中 创建mybatis的核心类SqlSessionFactory --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 加载mybatis配置文件，如果只有映射，不需要写conf.xml文件--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;property name="configLocation" value="classpath:conf.xml"&gt;&lt;/property&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 加载mapper.xml配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"pers/nicolas/mapper/*.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 第3种方式批量生成mapper代理对象</span></span><br><span class="line"><span class="comment">批量产生的mapper对象在SpringIOC容器中的id值默认就是接口mapper名(首字母小写）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mappers"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"pers.nicolas.mapper"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>6.使用Spring-MyBatis整合产物开发程序<br>    目标：通过spring产生mybatis最终操作需要的 动态mapper对象(StudentMapper对象)<br>    Spring产生 动态mapper对象 有3种方法：</p><p>a.第一种方式<br>DAO层实现类  继承 SqlSessionDaoSupport类</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> SqlSessionDaoSupport类提供了一个属性 SqlSession</span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!--  第一种方式生成mapper代理对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"studentMapper"</span> <span class="attr">class</span>=<span class="string">"pers.nicolas.dao.impl.StudentDaoImpl"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--   将Spring配置的sqlSessionFactory交给Mapper（Dao) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sqlSessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>b.第二种方式<br>    就是省略掉 第一种方式的 实现类<br>    直接MyBatis提供的 Mapper实现类：org.mybatis.spring.mapper.MapperFactoryBean<br>    缺点：每个mapper都需要一个配置一次</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 第二种方式生成mapper代理对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"studentMapper"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperFactoryBean"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperInterface"</span> <span class="attr">value</span>=<span class="string">"pers.nicolas.mapper.StudentMapper"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sqlSessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>c.第三种方式</strong><br>    批量配置 实现类</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 第3种方式批量生成mapper代理对象</span></span><br><span class="line"><span class="comment">批量产生的mapper对象在SpringIOC容器中的id值默认就是接口mapper名(首字母小写）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mappers"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"pers.nicolas.mapper"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><pre><code># spring注解版</code></pre><h2 id="一个接口指定实现类"><a href="#一个接口指定实现类" class="headerlink" title="一个接口指定实现类"></a>一个接口指定实现类</h2><p>接口定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yoj.used;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInterface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">className</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span>(<span class="string">"impl1"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Implement1</span> <span class="keyword">implements</span> <span class="title">MyInterface</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">className</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Implement1.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span>(<span class="string">"impl2"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Implement2</span> <span class="keyword">implements</span> <span class="title">MyInterface</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">className</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Implement2.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>1.@AutoWired+@Qualifier(“impl2”)指定</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier</span>(<span class="string">"impl2"</span>)</span><br><span class="line">MyInterface myInterface;</span><br></pre></td></tr></table></figure><p><strong>2.使用@Resource注入，根据@Service指定的名称区分</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span>(name = <span class="string">"impl2"</span>)</span><br><span class="line">MyInterface myInterface;</span><br></pre></td></tr></table></figure><h1 id="my"><a href="#my" class="headerlink" title="my"></a>my</h1><h2 id="同一类中内部调用aop失效"><a href="#同一类中内部调用aop失效" class="headerlink" title="同一类中内部调用aop失效"></a>同一类中内部调用aop失效</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2002 Rod Johnon &lt;expoer one-on-one j2eedevelopment and design&gt;&lt;br&gt;Spring  2003  ,IOC  Aop&lt;br&gt;Spring data,spring boot,spring cloud,spring framework ,spring social &lt;/expoer&gt;&lt;/p&gt;&lt;p&gt;[TOC]&lt;/p&gt;&lt;h1 id=&quot;IOC-控制反转&quot;&gt;&lt;a href=&quot;#IOC-控制反转&quot; class=&quot;headerlink&quot; title=&quot;IOC :控制反转&quot;&gt;&lt;/a&gt;IOC :控制反转&lt;/h1&gt;&lt;p&gt;（DI：依赖注入）&lt;/p&gt;&lt;h2 id=&quot;1-搭建Spring环境&quot;&gt;&lt;a href=&quot;#1-搭建Spring环境&quot; class=&quot;headerlink&quot; title=&quot;1.搭建Spring环境&quot;&gt;&lt;/a&gt;1.搭建Spring环境&lt;/h2&gt;&lt;p&gt;下载jar&lt;br&gt;&lt;a href=&quot;http://maven.springframework.org/release/org/springframework/spring/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://maven.springframework.org/release/org/springframework/spring/&lt;/a&gt;&lt;br&gt;spring-framework-4.3.9.RELEASE-dist.zip&lt;br&gt;开发spring至少需要使用的jar(5个+1个):&lt;br&gt;spring-aop.jar        开发AOP特性时需要的JAR&lt;br&gt;spring-beans.jar    处理Bean的jar            &lt;bean&gt;&lt;br&gt;spring-context.jar    处理spring上下文的jar        &lt;context&gt;&lt;br&gt;spring-core.jar        spring核心jar&lt;br&gt;spring-expression.jar    spring表达式&lt;br&gt;三方提供的日志jar&lt;br&gt;commons-logging.jar    日志&lt;/context&gt;&lt;/bean&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://codeofli.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://codeofli.github.io/tags/java/"/>
    
      <category term="spring" scheme="https://codeofli.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>springBoot</title>
    <link href="https://codeofli.github.io/2019/10/java-note/springBoot/springBoot/"/>
    <id>https://codeofli.github.io/2019/10/java-note/springBoot/springBoot/</id>
    <published>2019-10-17T07:27:48.000Z</published>
    <updated>2019-11-13T12:20:19.839Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、Spring-Boot-入门"><a href="#一、Spring-Boot-入门" class="headerlink" title="一、Spring Boot 入门"></a><strong>一、</strong>Spring Boot 入门</h1><h2 id="1、Spring-Boot-简介"><a href="#1、Spring-Boot-简介" class="headerlink" title="1、Spring Boot 简介"></a>1、Spring Boot 简介</h2><blockquote><p>简化Spring应用开发的一个框架；<br>整个Spring技术栈的一个大整合；<br>J2EE开发的一站式解决方案；</p></blockquote><h2 id="2、微服务"><a href="#2、微服务" class="headerlink" title="2、微服务"></a>2、微服务</h2><p>2014，martin fowler</p><p>微服务：架构风格（服务微化）</p><p>一个应用应该是一组小型服务；可以通过HTTP的方式进行互通；</p><a id="more"></a><p>单体应用：ALL IN ONE</p><p>微服务：每一个功能元素最终都是一个可独立替换和独立升级的软件单元；</p><p><a href="https://martinfowler.com/articles/microservices.html#MicroservicesAndSoa" target="_blank" rel="noopener">详细参照微服务文档</a></p><p>##环境准备<br><a href="http://www.gulixueyuan.com/" target="_blank" rel="noopener">谷粒学院</a></p><p>环境约束</p><p>–jdk1.8：Spring Boot 推荐jdk1.7及以上；java version “1.8.0_112”</p><p>–maven3.x：maven 3.3以上版本；Apache Maven 3.3.9</p><p>–IntelliJIDEA2017：IntelliJ IDEA 2017.2.2 x64、STS</p><p>–SpringBoot 1.5.9.RELEASE：1.5.9；</p><p>统一环境；</p><h3 id="1、MAVEN设置；"><a href="#1、MAVEN设置；" class="headerlink" title="1、MAVEN设置；"></a>1、MAVEN设置；</h3><p>给maven 的settings.xml配置文件的profiles标签添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.8<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2、IDEA设置"><a href="#2、IDEA设置" class="headerlink" title="2、IDEA设置"></a>2、IDEA设置</h3><p>整合maven进来；</p><p><img src="/2019/10/java-note/springBoot/springBoot/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180129151045.png" alt="idea设置"></p><p><img src="/2019/10/java-note/springBoot/springBoot/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180129151112.png" alt="images/"></p><h2 id="4、Spring-Boot-HelloWorld"><a href="#4、Spring-Boot-HelloWorld" class="headerlink" title="4、Spring Boot HelloWorld"></a>4、Spring Boot HelloWorld</h2><p>一个功能：</p><p>浏览器发送hello请求，服务器接受请求并处理，响应Hello World字符串；</p><h3 id="1、创建一个maven工程；（jar）"><a href="#1、创建一个maven工程；（jar）" class="headerlink" title="1、创建一个maven工程；（jar）"></a>1、创建一个maven工程；（jar）</h3><h3 id="2、导入spring-boot相关的依赖"><a href="#2、导入spring-boot相关的依赖" class="headerlink" title="2、导入spring boot相关的依赖"></a>2、导入spring boot相关的依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3、编写一个主程序；启动Spring-Boot应用"><a href="#3、编写一个主程序；启动Spring-Boot应用" class="headerlink" title="3、编写一个主程序；启动Spring Boot应用"></a>3、编写一个主程序；启动Spring Boot应用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@SpringBootApplication</span> 来标注一个主程序类，说明这是一个Spring Boot应用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldMainApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Spring应用启动起来</span></span><br><span class="line">        SpringApplication.run(HelloWorldMainApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、编写相关的Controller、Service"><a href="#4、编写相关的Controller、Service" class="headerlink" title="4、编写相关的Controller、Service"></a>4、编写相关的Controller、Service</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello World!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、运行主程序测试"><a href="#5、运行主程序测试" class="headerlink" title="5、运行主程序测试"></a>5、运行主程序测试</h3><h3 id="6、简化部署"><a href="#6、简化部署" class="headerlink" title="6、简化部署"></a>6、简化部署</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这个插件，可以将应用打包成一个可执行的jar包；--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>将这个应用打成jar包，直接使用java -jar的命令进行执行；</p><h2 id="5、Hello-World探究"><a href="#5、Hello-World探究" class="headerlink" title="5、Hello World探究"></a>5、Hello World探究</h2><h3 id="1、POM文件"><a href="#1、POM文件" class="headerlink" title="1、POM文件"></a>1、POM文件</h3><h4 id="1、父项目"><a href="#1、父项目" class="headerlink" title="1、父项目"></a>1、父项目</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">他的父项目是</span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../../spring-boot-dependencies<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">他来真正管理Spring Boot应用里面的所有依赖版本；</span><br></pre></td></tr></table></figure><p>Spring Boot的版本仲裁中心；</p><p>以后我们导入依赖默认是不需要写版本；（没有在dependencies里面管理的依赖自然需要声明版本号）</p><h4 id="2、启动器"><a href="#2、启动器" class="headerlink" title="2、启动器"></a>2、启动器</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>spring-boot-starter</strong>-==web==：</p><p>​    spring-boot-starter：spring-boot场景启动器；帮我们导入了web模块正常运行所依赖的组件；</p><p>Spring Boot将所有的功能场景都抽取出来，做成一个个的starters（启动器），只需要在项目里面引入这些starter相关场景的所有依赖都会导入进来。要用什么功能就导入什么场景的启动器</p><h3 id="2、主程序类，主入口类"><a href="#2、主程序类，主入口类" class="headerlink" title="2、主程序类，主入口类"></a>2、主程序类，主入口类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@SpringBootApplication</span> 来标注一个主程序类，说明这是一个Spring Boot应用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldMainApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Spring应用启动起来</span></span><br><span class="line">        SpringApplication.run(HelloWorldMainApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@<strong>SpringBootApplication</strong>:    Spring Boot应用标注在某个类上说明这个类是SpringBoot的主配置类，SpringBoot就应该运行这个类的main方法来启动SpringBoot应用；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(excludeFilters = &#123;</span><br><span class="line">      <span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span><br><span class="line">      <span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;</span><br></pre></td></tr></table></figure><p>@<strong>SpringBootConfiguration</strong>:Spring Boot的配置类；</p><p>​        标注在某个类上，表示这是一个Spring Boot的配置类；</p><p>​        @<strong>Configuration</strong>:配置类上来标注这个注解；</p><p>​            配置类 —–  配置文件；配置类也是容器中的一个组件；@Component</p><p>@<strong>EnableAutoConfiguration</strong>：开启自动配置功能；</p><p>​        以前我们需要配置的东西，Spring Boot帮我们自动配置；@<strong>EnableAutoConfiguration</strong>告诉SpringBoot开启自动配置功能；这样自动配置才能生效；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import</span>(EnableAutoConfigurationImportSelector.class)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;</span><br></pre></td></tr></table></figure><p>​          @<strong>AutoConfigurationPackage</strong>：自动配置包</p><p>​        @<strong>Import</strong>(AutoConfigurationPackages.Registrar.class)：</p><p>​        Spring的底层注解@Import，给容器中导入一个组件；导入的组件由AutoConfigurationPackages.Registrar.class；</p><p>==将主配置类（@SpringBootApplication标注的类）的所在包及下面所有子包里面的所有组件扫描到Spring容器；==</p><p>​    @<strong>Import</strong>(EnableAutoConfigurationImportSelector.class)；</p><p>​        给容器中导入组件？</p><p>​        <strong>EnableAutoConfigurationImportSelector</strong>：导入哪些组件的选择器；</p><p>​        将所有需要导入的组件以全类名的方式返回；这些组件就会被添加到容器中；</p><p>​        会给容器中导入非常多的自动配置类（xxxAutoConfiguration）；就是给容器中导入这个场景需要的所有组件，并配置好这些组件；        <img src="/2019/10/java-note/springBoot/springBoot/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180129224104.png" alt="自动配置类"></p><p>有了自动配置类，免去了我们手动编写配置注入功能组件等的工作；</p><p>​        SpringFactoriesLoader.loadFactoryNames(EnableAutoConfiguration.class,classLoader)；</p><p>==<strong>Spring Boot在启动的时候从类路径下的META-INF/spring.factories中获取EnableAutoConfiguration指定的值，将这些值作为自动配置类导入到容器中，自动配置类就生效</strong>，帮我们进行自动配置工作；==以前我们需要自己配置的东西，自动配置类都帮我们；</p><p>J2EE的整体整合解决方案和自动配置都在spring-boot-autoconfigure-1.5.9.RELEASE.jar；</p><p>​        </p><p>==Spring注解版（谷粒学院）==</p><h2 id="6、使用Spring-Initializer快速创建Spring-Boot项目"><a href="#6、使用Spring-Initializer快速创建Spring-Boot项目" class="headerlink" title="6、使用Spring Initializer快速创建Spring Boot项目"></a>6、使用Spring Initializer快速创建Spring Boot项目</h2><h3 id="1、IDEA：使用-Spring-Initializer快速创建项目"><a href="#1、IDEA：使用-Spring-Initializer快速创建项目" class="headerlink" title="1、IDEA：使用 Spring Initializer快速创建项目"></a>1、IDEA：使用 Spring Initializer快速创建项目</h3><p>IDE都支持使用Spring的项目创建向导快速创建一个Spring Boot项目；</p><p>选择我们需要的模块；向导会联网创建Spring Boot项目；</p><p>默认生成的Spring Boot项目；</p><ul><li>主程序已经生成好了，我们只需要我们自己的逻辑</li><li>resources文件夹中目录结构<ul><li>static：保存所有的静态资源； js css  images；</li><li>templates：保存所有的模板页面；（Spring Boot默认jar包使用嵌入式的Tomcat，默认不支持JSP页面）；可以使用模板引擎（freemarker、thymeleaf）；</li><li>application.properties：Spring Boot应用的配置文件；可以修改一些默认设置；</li></ul></li></ul><h3 id="2、STS使用-Spring-Starter-Project快速创建项目"><a href="#2、STS使用-Spring-Starter-Project快速创建项目" class="headerlink" title="2、STS使用 Spring Starter Project快速创建项目"></a>2、STS使用 Spring Starter Project快速创建项目</h3><hr><h1 id="二、配置文件"><a href="#二、配置文件" class="headerlink" title="二、配置文件"></a>二、配置文件</h1><h2 id="1、配置文件"><a href="#1、配置文件" class="headerlink" title="1、配置文件"></a>1、配置文件</h2><p>SpringBoot使用一个全局的配置文件，配置文件名是固定的；</p><p>•application.properties</p><p>•application.yml</p><p>配置文件的作用：修改SpringBoot自动配置的默认值；SpringBoot在底层都给我们自动配置好；</p><p>YAML（YAML Ain’t Markup Language）</p><p>​    YAML  A Markup Language：是一个标记语言</p><p>​    YAML   isn’t Markup Language：不是一个标记语言；</p><p>标记语言：</p><p>​    以前的配置文件；大多都使用的是  <strong>xxxx.xml</strong>文件；</p><p>​    YAML：<strong>以数据为中心</strong>，比json、xml等更适合做配置文件；</p><p>​    YAML：配置例子</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8081</span></span><br></pre></td></tr></table></figure><p>​    XML：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">port</span>&gt;</span>8081<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、YAML语法："><a href="#2、YAML语法：" class="headerlink" title="2、YAML语法："></a>2、YAML语法：</h2><h3 id="1、基本语法"><a href="#1、基本语法" class="headerlink" title="1、基本语法"></a>1、基本语法</h3><p>k:(空格)v：表示一对键值对（空格必须有）；</p><p>以<strong>空格</strong>的缩进来控制层级关系；只要是左对齐的一列数据，都是同一个层级的</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">    path:</span> <span class="string">/hello</span></span><br></pre></td></tr></table></figure><p>属性和值也是大小写敏感；</p><h3 id="2、值的写法"><a href="#2、值的写法" class="headerlink" title="2、值的写法"></a>2、值的写法</h3><h4 id="字面量：普通的值（数字，字符串，布尔）"><a href="#字面量：普通的值（数字，字符串，布尔）" class="headerlink" title="字面量：普通的值（数字，字符串，布尔）"></a>字面量：普通的值（数字，字符串，布尔）</h4><p>​    k: v：字面直接来写；</p><p>​        字符串默认不用加上单引号或者双引号；</p><p>​        “”：双引号；不会转义字符串里面的特殊字符；特殊字符会作为本身想表示的意思</p><p>​                name:   “zhangsan \n lisi”：输出；zhangsan 换行  lisi</p><p>​        ‘’：单引号；会转义特殊字符，特殊字符最终只是一个普通的字符串数据</p><p>​                name:   ‘zhangsan \n lisi’：输出；zhangsan \n  lisi</p><h4 id="对象、Map（属性和值）（键值对）："><a href="#对象、Map（属性和值）（键值对）：" class="headerlink" title="对象、Map（属性和值）（键值对）："></a>对象、Map（属性和值）（键值对）：</h4><p>​    k: v：在下一行来写对象的属性和值的关系；注意缩进</p><p>​        对象还是k: v的方式</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">friends:</span></span><br><span class="line"><span class="attr">lastName:</span> <span class="string">zhangsan</span></span><br><span class="line"><span class="attr">age:</span> <span class="number">20</span></span><br></pre></td></tr></table></figure><p>行内写法：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">friends:</span> <span class="string">&#123;lastName:</span> <span class="string">zhangsan,age:</span> <span class="number">18</span><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="数组（List、Set）："><a href="#数组（List、Set）：" class="headerlink" title="数组（List、Set）："></a>数组（List、Set）：</h4><p>用- 值表示数组中的一个元素</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pets:</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">cat</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">dog</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">pig</span></span><br></pre></td></tr></table></figure><p>行内写法</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pets:</span> <span class="string">[cat,dog,pig]</span></span><br></pre></td></tr></table></figure><h2 id="3、配置文件值注入"><a href="#3、配置文件值注入" class="headerlink" title="3、配置文件值注入"></a>3、配置文件值注入</h2><p>注意：即使指定了对象加载的配置文件，但是如果<strong>主配置文件中存在该对象并能成功解析</strong>，那么<strong>直接使用先找到的对象</strong>，application.properties&gt;application.yml</p><p>配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line"><span class="comment">#    lastName: hello</span></span><br><span class="line"><span class="attr">    age:</span> <span class="number">18</span></span><br><span class="line"><span class="attr">    boss:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    birth:</span> <span class="number">2017</span><span class="string">/12/12</span></span><br><span class="line"><span class="attr">    maps:</span> <span class="string">&#123;k1:</span> <span class="string">v1,k2:</span> <span class="number">12</span><span class="string">&#125;</span></span><br><span class="line"><span class="attr">    lists:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">lisi</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">zhaoliu</span></span><br><span class="line"><span class="attr">    dog:</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">小狗</span></span><br><span class="line"><span class="attr">      age:</span> <span class="number">12</span></span><br><span class="line"><span class="attr">    last-name:</span> <span class="string">zhangsan</span></span><br></pre></td></tr></table></figure><p>javaBean：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将配置文件中配置的每一个属性的值，映射到这个组件中</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ConfigurationProperties</span>：告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定；</span></span><br><span class="line"><span class="comment"> *      prefix = "person"：配置文件中哪个下面的所有属性进行一一映射</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 只有这个组件是容器中的组件，才能容器提供的<span class="doctag">@ConfigurationProperties</span>功能；</span></span><br><span class="line"><span class="comment"> *<span class="doctag">@ConfigurationProperties</span>(prefix = "person")默认从全局配置文件中获取值；</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Boolean boss;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; lists;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">······</span><br></pre></td></tr></table></figure><p>我们可以导入配置文件处理器，以后编写配置就有提示了</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入配置文件处理器，配置文件进行绑定就会有提示--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1、properties配置文件在idea中默认utf-8可能会乱码"><a href="#1、properties配置文件在idea中默认utf-8可能会乱码" class="headerlink" title="1、properties配置文件在idea中默认utf-8可能会乱码"></a>1、properties配置文件在idea中默认utf-8可能会乱码</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#diea properties默认使用utf-8</span></span><br><span class="line"><span class="comment">#配置person的值</span></span><br><span class="line"><span class="meta">person.last-name</span>=<span class="string">张三$&#123;random.uuid&#125;</span></span><br><span class="line"><span class="meta">person.age</span>=<span class="string">$&#123;random.int&#125;</span></span><br><span class="line"><span class="meta">person.birth</span>=<span class="string">2017/12/15</span></span><br><span class="line"><span class="meta">person.boss</span>=<span class="string">false</span></span><br><span class="line"><span class="comment">#对象</span></span><br><span class="line"><span class="meta">person.maps.k1</span>=<span class="string">v1 </span></span><br><span class="line"><span class="meta">person.maps.k2</span>=<span class="string">14</span></span><br><span class="line"><span class="comment">#list</span></span><br><span class="line"><span class="meta">person.lists</span>=<span class="string">a,b,c</span></span><br><span class="line"><span class="meta">person.dog.name</span>=<span class="string">$&#123;person.hello:hello&#125;_dog</span></span><br><span class="line"><span class="meta">person.dog.age</span>=<span class="string">15</span></span><br></pre></td></tr></table></figure><p>调整</p><p><img src="/2019/10/java-note/springBoot/springBoot/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180130161620.png" alt="idea配置乱码"></p><h4 id="2、-Value获取值和-ConfigurationProperties获取值比较"><a href="#2、-Value获取值和-ConfigurationProperties获取值比较" class="headerlink" title="2、@Value获取值和@ConfigurationProperties获取值比较"></a>2、@Value获取值和@ConfigurationProperties获取值比较</h4><table><thead><tr><th></th><th>@ConfigurationProperties</th><th>@Value</th></tr></thead><tbody><tr><td>功能</td><td>批量注入配置文件中的属性</td><td>一个个指定</td></tr><tr><td>松散绑定（松散语法）</td><td>支持</td><td>不支持</td></tr><tr><td>SpEL</td><td>不支持</td><td>支持</td></tr><tr><td>JSR303数据校验</td><td>支持</td><td>不支持</td></tr><tr><td>复杂类型封装</td><td>支持</td><td>不支持</td></tr></tbody></table><p>配置文件是yml还是properties他们都能获取到值；</p><p>如果说，我们只是在某个业务逻辑中需要<strong>获取一下配置文件中的某项值</strong>，使用@Value；</p><p>如果说，我们<strong>专门编写了一个javaBean来和配置文件进行映射</strong>，我们就直接使用@ConfigurationProperties；</p><h4 id="3、配置文件注入值数据校验"><a href="#3、配置文件注入值数据校验" class="headerlink" title="3、配置文件注入值数据校验"></a>3、配置文件注入值数据校验</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;bean class="Person"&gt;</span></span><br><span class="line"><span class="comment">     *      &lt;property name="lastName" value="字面量/$&#123;key&#125;从环境变量、配置文件中获取值/#&#123;SpEL&#125;"&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">     * &lt;bean/&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//lastName必须是邮箱格式</span></span><br><span class="line">    <span class="meta">@Email</span></span><br><span class="line">    <span class="comment">//@Value("$&#123;person.last-name&#125;")</span></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="comment">//@Value("#&#123;11*2&#125;")</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="comment">//@Value("true")</span></span><br><span class="line">    <span class="keyword">private</span> Boolean boss;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; lists;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br></pre></td></tr></table></figure><h4 id="4、-PropertySource-amp-ImportResource-amp-Bean"><a href="#4、-PropertySource-amp-ImportResource-amp-Bean" class="headerlink" title="4、@PropertySource&amp;@ImportResource&amp;@Bean"></a>4、@PropertySource&amp;@ImportResource&amp;@Bean</h4><p>@<strong>PropertySource</strong>：加载指定的配置文件；</p><p>注意：即使指定了对象加载的配置文件，但是如果<strong>主配置文件中存在该对象并能成功解析</strong>，那么直接使用先找到的对象，application.properties&gt;application.yml</p><p><strong>使用@PropertySource也需要@ConfigurationProperties(prefix = “person”)注解</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将配置文件中配置的每一个属性的值，映射到这个组件中</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ConfigurationProperties</span>：告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定；</span></span><br><span class="line"><span class="comment"> *      prefix = "person"：配置文件中哪个下面的所有属性进行一一映射</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 只有这个组件是容器中的组件，才能容器提供的<span class="doctag">@ConfigurationProperties</span>功能；</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@ConfigurationProperties</span>(prefix = "person")默认从全局配置文件中获取值；</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PropertySource</span>(value = &#123;<span class="string">"classpath:person.properties"</span>&#125;)</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="comment">//@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;bean class="Person"&gt;</span></span><br><span class="line"><span class="comment">     *      &lt;property name="lastName" value="字面量/$&#123;key&#125;从环境变量、配置文件中获取值/#&#123;SpEL&#125;"&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">     * &lt;bean/&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//lastName必须是邮箱格式</span></span><br><span class="line">   <span class="comment">// @Email</span></span><br><span class="line">    <span class="comment">//@Value("$&#123;person.last-name&#125;")</span></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="comment">//@Value("#&#123;11*2&#125;")</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="comment">//@Value("true")</span></span><br><span class="line">    <span class="keyword">private</span> Boolean boss;</span><br></pre></td></tr></table></figure><p>@<strong>ImportResource</strong>：导入Spring的配置文件，让配置文件里面的内容生效；</p><p>Spring Boot里面没有Spring的配置文件，我们自己编写的配置文件，也不能自动识别；</p><p>想让Spring的配置文件生效，加载进来；@<strong>ImportResource</strong>标注在一个配置类上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ImportResource</span>(locations = &#123;<span class="string">"classpath:beans.xml"</span>&#125;)<span class="comment">//导入Spring的配置文件让其生效</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBoot02ConfigApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringBoot02ConfigApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不来编写Spring的配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"helloService"</span> <span class="attr">class</span>=<span class="string">"com.atguigu.springboot.service.HelloService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="SpringBoot推荐给容器中添加组件的方式；"><a href="#SpringBoot推荐给容器中添加组件的方式；" class="headerlink" title="SpringBoot推荐给容器中添加组件的方式；"></a>SpringBoot推荐给容器中添加组件的方式；</h4><p>推荐使用全注解的方式</p><p>1、配置类<strong>@Configuration</strong>——&gt;Spring配置文件</p><p>2、使用<strong>@Bean</strong>给容器中添加组件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Configuration</span>：指明当前类是一个配置类；就是来替代之前的Spring配置文件</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 在配置文件中用&lt;bean&gt;&lt;bean/&gt;标签添加组件</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAppConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将方法的返回值添加到容器中；容器中这个组件默认的id就是方法名</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HelloService <span class="title">helloService02</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"配置类@Bean给容器中添加组件了..."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HelloService();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>##4、配置文件占位符</p><h3 id="1、随机数"><a href="#1、随机数" class="headerlink" title="1、随机数"></a>1、随机数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$&#123;random.value&#125;、$&#123;random.<span class="keyword">int</span>&#125;、$&#123;random.<span class="keyword">long</span>&#125;</span><br><span class="line">$&#123;random.<span class="keyword">int</span>(<span class="number">10</span>)&#125;、$&#123;random.<span class="keyword">int</span>[<span class="number">1024</span>,<span class="number">65536</span>]&#125;</span><br></pre></td></tr></table></figure><h3 id="2、占位符获取之前配置的值，如果没有可以是用-指定默认值"><a href="#2、占位符获取之前配置的值，如果没有可以是用-指定默认值" class="headerlink" title="2、占位符获取之前配置的值，如果没有可以是用:指定默认值"></a>2、占位符获取之前配置的值，如果没有可以是用:指定默认值</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">person.last-name</span>=<span class="string">张三$&#123;random.uuid&#125;</span></span><br><span class="line"><span class="meta">person.age</span>=<span class="string">$&#123;random.int&#125;</span></span><br><span class="line"><span class="meta">person.birth</span>=<span class="string">2017/12/15</span></span><br><span class="line"><span class="meta">person.boss</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">person.maps.k1</span>=<span class="string">v1</span></span><br><span class="line"><span class="meta">person.maps.k2</span>=<span class="string">14</span></span><br><span class="line"><span class="meta">person.lists</span>=<span class="string">a,b,c</span></span><br><span class="line"><span class="comment">#hello默认值</span></span><br><span class="line"><span class="meta">person.dog.name</span>=<span class="string">$&#123;person.hello:hello&#125;_dog</span></span><br><span class="line"><span class="meta">person.dog.age</span>=<span class="string">15</span></span><br></pre></td></tr></table></figure><h2 id="5、Profile"><a href="#5、Profile" class="headerlink" title="5、Profile"></a>5、Profile</h2><h3 id="1、多Profile文件"><a href="#1、多Profile文件" class="headerlink" title="1、多Profile文件"></a>1、多Profile文件</h3><p>我们在主配置文件编写的时候，文件名可以是   application-{profile}.properties/yml</p><p>默认使用application.properties的配置；</p><h3 id="2、yml支持多文档块方式"><a href="#2、yml支持多文档块方式" class="headerlink" title="2、yml支持多文档块方式"></a>2、yml支持多文档块方式</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span></span><br><span class="line"><span class="attr">    active:</span> <span class="string">prod</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8083</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8084</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">prod</span>  <span class="comment">#指定属于哪个环境</span></span><br></pre></td></tr></table></figure><h3 id="3、激活指定profile"><a href="#3、激活指定profile" class="headerlink" title="3、激活指定profile"></a>3、激活指定profile</h3><p>​    1、在配置文件中指定  spring.profiles.active=dev</p><p>​    2、命令行：</p><p>​        java -jar spring-boot-02-config-0.0.1-SNAPSHOT.jar –spring.profiles.active=dev；</p><p>​        可以直接在测试的时候，配置传入命令行参数</p><p>​    3、虚拟机参数；</p><p>​        -Dspring.profiles.active=dev</p><h2 id="6、配置文件加载位置"><a href="#6、配置文件加载位置" class="headerlink" title="6、配置文件加载位置"></a>6、配置文件加载位置</h2><p>springboot 启动会扫描以下位置的application.properties或者application.yml文件作为Spring boot的默认配置文件</p><p>–file:./config/</p><p>–file:./</p><p>–classpath:/config/</p><p>–classpath:/</p><p>优先级由高到底，高优先级的配置会覆盖低优先级的配置；</p><p>SpringBoot会从这四个位置全部加载主配置文件；<strong>互补配置</strong>；</p><p>==我们还可以通过spring.config.location来改变默认的配置文件位置==</p><p><strong>项目打包好以后，我们可以使用命令行参数的形式，启动项目的时候来指定配置文件的新位置；指定配置文件和默认加载的这些配置文件共同起作用形成互补配置；</strong></p><p>java -jar spring-boot-02-config-02-0.0.1-SNAPSHOT.jar –spring.config.location=G:/application.properties</p><h2 id="7、外部配置加载顺序"><a href="#7、外部配置加载顺序" class="headerlink" title="7、外部配置加载顺序"></a>7、外部配置加载顺序</h2><p><strong>==SpringBoot也可以从以下位置加载配置； 优先级从高到低；高优先级的配置覆盖低优先级的配置，所有的配置会形成互补配置==</strong></p><p><strong>1.命令行参数</strong></p><p>所有的配置都可以在命令行上进行指定</p><p>java -jar spring-boot-02-config-02-0.0.1-SNAPSHOT.jar –server.port=8087  –server.context-path=/abc</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#2.0以上版本</span></span><br><span class="line"><span class="attr">java</span> <span class="string">-jar spring-boot-02-config-02-0.0.1-SNAPSHOT.jar --server.port=8087  --server.servlet.context-path=/abc</span></span><br></pre></td></tr></table></figure><p>多个配置用空格分开； –配置项=值</p><p>2.来自java:comp/env的JNDI属性</p><p>3.Java系统属性（System.getProperties()）</p><p>4.操作系统环境变量</p><p>5.RandomValuePropertySource配置的random.*属性值</p><p>==<strong>由jar包外向jar包内进行寻找；</strong>==</p><p>==<strong>优先加载带profile</strong>==</p><p><strong>6.jar包外部的application-{profile}.properties或application.yml(带spring.profile)配置文件</strong></p><p><strong>7.jar包内部的application-{profile}.properties或application.yml(带spring.profile)配置文件</strong></p><p>==<strong>再来加载不带profile</strong>==</p><p><strong>8.jar包外部的application.properties或application.yml(不带spring.profile)配置文件</strong></p><p><strong>9.jar包内部的application.properties或application.yml(不带spring.profile)配置文件</strong></p><p>10.@Configuration注解类上的@PropertySource</p><p>11.通过SpringApplication.setDefaultProperties指定的默认属性</p><p>所有支持的配置加载来源；</p><p><a href="https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/htmlsingle/#boot-features-external-config" target="_blank" rel="noopener">参考官方文档</a></p><h2 id="8、自动配置原理"><a href="#8、自动配置原理" class="headerlink" title="8、自动配置原理"></a>8、自动配置原理</h2><p>配置文件到底能写什么？怎么写？自动配置原理；</p><p><a href="https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/htmlsingle/#common-application-properties" target="_blank" rel="noopener">配置文件能配置的属性参照</a></p><h3 id="1、自动配置原理："><a href="#1、自动配置原理：" class="headerlink" title="1、自动配置原理："></a>1、<strong>自动配置原理：</strong></h3><p>1）、SpringBoot启动的时候加载主配置类，开启了自动配置功能 ==@EnableAutoConfiguration==</p><p><strong>2）、@EnableAutoConfiguration 作用：</strong></p><ul><li>利用EnableAutoConfigurationImportSelector给容器中导入一些组件？</li></ul><ul><li><p>可以查看selectImports(){AutoConfigurationImportSelector类中}方法的内容；</p></li><li><p>List<string> configurations = getCandidateConfigurations(annotationMetadata,      attributes);获取候选的配置</string></p><ul><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SpringFactoriesLoader.loadFactoryNames()</span><br><span class="line">扫描所有jar包类路径下  META-INF/spring.factories</span><br><span class="line">把扫描到的这些文件的内容包装成properties对象</span><br><span class="line">从properties中获取到EnableAutoConfiguration.class类（类名）对应的值，然后把他们添加在容器中</span><br></pre></td></tr></table></figure></li></ul></li></ul><p><strong>==将 类路径下  META-INF/spring.factories 里面配置的所有EnableAutoConfiguration的值加入到了容器中；==</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Auto Configure</span></span><br><span class="line"><span class="meta">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span>=<span class="string">\</span></span><br><span class="line">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cloud.CloudAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.ldap.LdapDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.elasticsearch.jest.JestAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mobile.DeviceResolverAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mobile.DeviceDelegatingViewResolverAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mobile.SitePreferenceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.reactor.ReactorAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.SecurityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.SecurityFilterAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.FallbackWebSecurityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.session.SessionAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.social.SocialWebAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.social.FacebookAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.social.LinkedInAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.social.TwitterAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.HttpEncodingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.HttpMessageConvertersAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.MultipartAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.ServerPropertiesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.WebClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.WebSocketAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.WebSocketMessagingAutoConfiguration,\</span><br><span class="line"><span class="attr">org.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration</span></span><br></pre></td></tr></table></figure><p>每一个这样的  xxxAutoConfiguration类都是容器中的一个组件，都加入到容器中；用他们来做自动配置；</p><p>3）、每一个自动配置类进行自动配置功能；</p><p>4）、以<strong>HttpEncodingAutoConfiguration（Http编码自动配置）</strong>为例解释自动配置原理；</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">HttpProperties</span>.</span></span><span class="keyword">class</span> 新版本已更名</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>   <span class="comment">//表示这是一个配置类，以前编写的配置文件一样，也可以给容器中添加组件</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(HttpEncodingProperties.class)  <span class="comment">//启动指定类的ConfigurationProperties功能；将配置文件中对应的值和HttpEncodingProperties绑定起来；并把HttpEncodingProperties加入到ioc容器中</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span> <span class="comment">//Spring底层@Conditional注解（Spring注解版），根据不同的条件，如果满足指定的条件，整个配置类里面的配置就会生效；    判断当前应用是否是web应用，如果是，当前配置类生效</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(CharacterEncodingFilter.class)  <span class="comment">//判断当前项目有没有这个类CharacterEncodingFilter；SpringMVC中进行乱码解决的过滤器；</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"spring.http.encoding"</span>, value = <span class="string">"enabled"</span>, matchIfMissing = <span class="keyword">true</span>)  <span class="comment">//判断配置文件中是否存在某个配置  spring.http.encoding.enabled；如果不存在，判断也是成立的</span></span><br><span class="line"><span class="comment">//即使我们配置文件中不配置pring.http.encoding.enabled=true，也是默认生效的；</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpEncodingAutoConfiguration</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//他已经和SpringBoot的配置文件映射了</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> HttpEncodingProperties properties;</span><br><span class="line">  </span><br><span class="line">   <span class="comment">//只有一个有参构造器的情况下，参数的值就会从容器中拿</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">HttpEncodingAutoConfiguration</span><span class="params">(HttpEncodingProperties properties)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.properties = properties;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Bean</span>   <span class="comment">//给容器中添加一个组件，这个组件的某些值需要从properties中获取</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(CharacterEncodingFilter.class) <span class="comment">//判断容器没有这个组件？</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CharacterEncodingFilter <span class="title">characterEncodingFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">CharacterEncodingFilter filter = <span class="keyword">new</span> OrderedCharacterEncodingFilter();</span><br><span class="line">filter.setEncoding(<span class="keyword">this</span>.properties.getCharset().name());</span><br><span class="line">filter.setForceRequestEncoding(<span class="keyword">this</span>.properties.shouldForce(Type.REQUEST));</span><br><span class="line">filter.setForceResponseEncoding(<span class="keyword">this</span>.properties.shouldForce(Type.RESPONSE));</span><br><span class="line"><span class="keyword">return</span> filter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据当前不同的条件判断，决定这个配置类是否生效？</p><p>一但这个配置类生效；这个配置类就会给容器中添加各种组件；这些组件的属性是从对应的properties类中获取的，这些类里面的每一个属性又是和配置文件绑定的；</p><p>5）、所有在配置文件中能配置的属性都是在xxxxProperties类中封装者‘；配置文件能配置什么就可以参照某个功能对应的这个属性类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.http.encoding"</span>)  <span class="comment">//从配置文件中获取指定的值和bean的属性进行绑定</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpEncodingProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_CHARSET = Charset.forName(<span class="string">"UTF-8"</span>);</span><br></pre></td></tr></table></figure><p><strong>精髓：</strong></p><p>​    <strong>1）、SpringBoot启动会加载大量的自动配置类</strong></p><p>​    <strong>2）、我们看我们需要的功能有没有SpringBoot默认写好的自动配置类；</strong></p><p>​    <strong>3）、我们再来看这个自动配置类中到底配置了哪些组件；（只要我们要用的组件有，我们就不需要再来配置了）</strong></p><p>​    <strong>4）、给容器中自动配置类添加组件的时候，会从properties类中获取某些属性。我们就可以在配置文件中指定这些属性的值；</strong></p><p>xxxxAutoConfigurartion：自动配置类；</p><p>给容器中添加组件</p><p>xxxxProperties:封装配置文件中相关属性；</p><h3 id="2、细节"><a href="#2、细节" class="headerlink" title="2、细节"></a>2、细节</h3><h4 id="1、-Conditional派生注解（Spring注解版原生的-Conditional作用）"><a href="#1、-Conditional派生注解（Spring注解版原生的-Conditional作用）" class="headerlink" title="1、@Conditional派生注解（Spring注解版原生的@Conditional作用）"></a>1、@Conditional派生注解（Spring注解版原生的@Conditional作用）</h4><p>作用：必须是@Conditional指定的条件成立，才给容器中添加组件，配置配里面的所有内容才生效；</p><table><thead><tr><th>@Conditional扩展注解</th><th>作用（判断是否满足当前指定条件）</th></tr></thead><tbody><tr><td>@ConditionalOnJava</td><td>系统的java版本是否符合要求</td></tr><tr><td>@ConditionalOnBean</td><td>容器中存在指定Bean；</td></tr><tr><td>@ConditionalOnMissingBean</td><td>容器中不存在指定Bean；</td></tr><tr><td>@ConditionalOnExpression</td><td>满足SpEL表达式指定</td></tr><tr><td>@ConditionalOnClass</td><td>系统中有指定的类</td></tr><tr><td>@ConditionalOnMissingClass</td><td>系统中没有指定的类</td></tr><tr><td>@ConditionalOnSingleCandidate</td><td>容器中只有一个指定的Bean，或者这个Bean是首选Bean</td></tr><tr><td>@ConditionalOnProperty</td><td>系统中指定的属性是否有指定的值</td></tr><tr><td>@ConditionalOnResource</td><td>类路径下是否存在指定资源文件</td></tr><tr><td>@ConditionalOnWebApplication</td><td>当前是web环境</td></tr><tr><td>@ConditionalOnNotWebApplication</td><td>当前不是web环境</td></tr><tr><td>@ConditionalOnJndi</td><td>JNDI存在指定项</td></tr></tbody></table><p><strong>自动配置类必须在一定的条件下才能生效；</strong></p><p>我们怎么知道哪些自动配置类生效；</p><p><strong>==我们可以通过启用  debug=true属性；来让控制台打印自动配置报告==</strong>，这样我们就可以很方便的知道哪些自动配置类生效；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//springboot新版本</span></span><br><span class="line">============================</span><br><span class="line">CONDITIONS EVALUATION REPORT</span><br><span class="line">============================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">=========================</span><br><span class="line">AUTO-CONFIGURATION REPORT</span><br><span class="line">=========================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Positive matches:（自动配置类启用的）</span><br><span class="line">-----------------</span><br><span class="line"></span><br><span class="line">   DispatcherServletAutoConfiguration matched:</span><br><span class="line">      - <span class="meta">@ConditionalOnClass</span> found required <span class="class"><span class="keyword">class</span> '<span class="title">org</span>.<span class="title">springframework</span>.<span class="title">web</span>.<span class="title">servlet</span>.<span class="title">DispatcherServlet</span>'</span>; <span class="meta">@ConditionalOnMissingClass</span> <span class="function">did not find unwanted <span class="title">class</span> <span class="params">(OnClassCondition)</span></span></span><br><span class="line"><span class="function">      - @<span class="title">ConditionalOnWebApplication</span> <span class="params">(required)</span> found <span class="title">StandardServletEnvironment</span> <span class="params">(OnWebApplicationCondition)</span></span></span><br><span class="line"><span class="function">        </span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function">Negative matches:（没有启动，没有匹配成功的自动配置类）</span></span><br><span class="line"><span class="function">-----------------</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">   ActiveMQAutoConfiguration:</span></span><br><span class="line"><span class="function">      Did not match:</span></span><br><span class="line"><span class="function">         - @ConditionalOnClass did not find required classes 'javax.jms.ConnectionFactory', 'org.apache.activemq.ActiveMQConnectionFactory' <span class="params">(OnClassCondition)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">   AopAutoConfiguration:</span></span><br><span class="line"><span class="function">      Did not match:</span></span><br><span class="line"><span class="function">         - @ConditionalOnClass did not find required classes 'org.aspectj.lang.annotation.Aspect', 'org.aspectj.lang.reflect.Advice' <span class="params">(OnClassCondition)</span></span></span><br></pre></td></tr></table></figure><h2 id="9、常用配置属性"><a href="#9、常用配置属性" class="headerlink" title="9、常用配置属性"></a>9、常用配置属性</h2><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#视图解析器前后缀</span></span><br><span class="line"><span class="meta">spring.mvc.view.prefix</span>=<span class="string">/WEB-INF/</span></span><br><span class="line"><span class="meta">spring.mvc.view.suffix</span>=<span class="string">.jsp</span></span><br></pre></td></tr></table></figure><h2 id="使用-ConditionalOnProperty来控制Configuration是否生效"><a href="#使用-ConditionalOnProperty来控制Configuration是否生效" class="headerlink" title="使用@ConditionalOnProperty来控制Configuration是否生效"></a>使用@ConditionalOnProperty来控制Configuration是否生效</h2><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h3><blockquote><p><strong>Spring Boot</strong>通过<strong>@ConditionalOnProperty</strong>来控制<strong>Configuration</strong>是否生效</p></blockquote><h3 id="2-说明"><a href="#2-说明" class="headerlink" title="2. 说明"></a>2. 说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Target(&#123; ElementType.TYPE, ElementType.METHOD &#125;)</span><br><span class="line">@Documented</span><br><span class="line">@Conditional(OnPropertyCondition.class)</span><br><span class="line">public @interface ConditionalOnProperty &#123;</span><br><span class="line"></span><br><span class="line">    String[] value() default &#123;&#125;; //数组，获取对应property名称的值，与name不可同时使用  </span><br><span class="line">  </span><br><span class="line">    String prefix() default &quot;&quot;;//property名称的前缀，可有可无  </span><br><span class="line">  </span><br><span class="line">    String[] name() default &#123;&#125;;//数组，property完整名称或部分名称（可与prefix组合使用，组成完整的property名称），与value不可同时使用  </span><br><span class="line">  </span><br><span class="line">    String havingValue() default &quot;&quot;;//可与name组合使用，比较获取到的属性值与havingValue给定的值是否相同，相同才加载配置  </span><br><span class="line">  </span><br><span class="line">    boolean matchIfMissing() default false;//缺少该property时是否可以加载。如果为true，没有该property也会正常加载；反之报错  </span><br><span class="line">  </span><br><span class="line">    boolean relaxedNames() default true;//是否可以松散匹配，至今不知道怎么使用的  </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-使用方法"><a href="#3-使用方法" class="headerlink" title="3. 使用方法"></a>3. 使用方法</h3><blockquote><p>通过其两个属性<strong>name</strong>以及<strong>havingValue</strong>来实现的，其中<strong>name</strong>用来从<strong>application.properties</strong>中读取某个属性值。<br><strong>如果该值为空，则返回false</strong>;<br><strong>如果值不为空，则将该值与havingValue指定的值进行比较，如果一样则返回true;否则返回false。</strong><br><strong>如果返回值为false，则该configuration不生效；为true则生效。</strong></p></blockquote><h3 id="4-code"><a href="#4-code" class="headerlink" title="4. code"></a>4. code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//在application.properties配置"mf.assert"，对应的值为true</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(prefix=<span class="string">"mf"</span>,name = <span class="string">"assert"</span>, havingValue = <span class="string">"true"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AssertConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HelloServiceProperties helloServiceProperties;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HelloService <span class="title">helloService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        HelloService helloService = <span class="keyword">new</span> HelloService();</span><br><span class="line">        helloService.setMsg(helloServiceProperties.getMsg());</span><br><span class="line">        <span class="keyword">return</span> helloService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-收获"><a href="#5-收获" class="headerlink" title="5. 收获"></a>5. 收获</h3><p><strong>springboot注解丰富，我们可以利用好这些注解来实现我们自定义的starter配置，减少硬编码的校验，降低组件间的耦合性!!!</strong></p><h1 id="三、日志"><a href="#三、日志" class="headerlink" title="三、日志"></a>三、日志</h1><h2 id="1、日志框架"><a href="#1、日志框架" class="headerlink" title="1、日志框架"></a>1、日志框架</h2><p> 小张；开发一个大型系统；</p><p>​        1、System.out.println(“”)；将关键数据打印在控制台；去掉？写在一个文件？</p><p>​        2、框架来记录系统的一些运行时信息；日志框架 ；  zhanglogging.jar；</p><p>​        3、高大上的几个功能？异步模式？自动归档？xxxx？  zhanglogging-good.jar？</p><p>​        4、将以前框架卸下来？换上新的框架，重新修改之前相关的API；zhanglogging-prefect.jar；</p><p>​        5、JDBC—数据库驱动；</p><p>​            写了一个统一的接口层；日志门面（日志的一个抽象层）；logging-abstract.jar；</p><p>​            给项目中导入具体的日志实现就行了；我们之前的日志框架都是实现的抽象层；</p><p><strong>市面上的日志框架；</strong></p><p>JUL、JCL、Jboss-logging、logback、log4j、log4j2、slf4j….</p><table><thead><tr><th>日志门面  （日志的抽象层）</th><th>日志实现</th></tr></thead><tbody><tr><td><del>JCL（Jakarta  Commons Logging）</del>    SLF4j（Simple  Logging Facade for Java）    <strong><del>jboss-logging</del></strong></td><td>Log4j  JUL（java.util.logging）  Log4j2  <strong>Logback</strong></td></tr></tbody></table><p>左边选一个门面（抽象层）、右边来选一个实现；</p><p>日志门面：  SLF4J；</p><p>日志实现：Logback；</p><p>SpringBoot：底层是Spring框架，Spring框架默认是用JCL；‘</p><p>​    <strong>==SpringBoot选用 SLF4j和logback；==</strong></p><h2 id="2、SLF4j使用"><a href="#2、SLF4j使用" class="headerlink" title="2、SLF4j使用"></a>2、SLF4j使用</h2><h3 id="1、如何在系统中使用SLF4j-https-www-slf4j-org"><a href="#1、如何在系统中使用SLF4j-https-www-slf4j-org" class="headerlink" title="1、如何在系统中使用SLF4j   https://www.slf4j.org"></a>1、如何在系统中使用SLF4j   <a href="https://www.slf4j.org" target="_blank" rel="noopener">https://www.slf4j.org</a></h3><p>以后开发的时候，日志记录方法的调用，不应该来直接调用日志的实现类，而是调用日志抽象层里面的方法；</p><p>给系统里面导入slf4j的jar和  logback的实现jar</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Logger logger = LoggerFactory.getLogger(HelloWorld.class);</span><br><span class="line">    logger.info(<span class="string">"Hello World"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>图示；</p><p><img src="/2019/10/java-note/springBoot/springBoot/concrete-bindings.png" alt="images/concrete-bindings.png"></p><p>每一个日志的实现框架都有自己的配置文件。使用slf4j以后，<strong>配置文件还是做成日志实现框架自己本身的配置文件；</strong></p><h3 id="2、遗留问题"><a href="#2、遗留问题" class="headerlink" title="2、遗留问题"></a>2、遗留问题</h3><p>a（slf4j+logback）: Spring（commons-logging）、Hibernate（jboss-logging）、MyBatis、xxxx</p><p>统一日志记录，即使是别的框架和我一起统一使用slf4j进行输出？</p><p><img src="/2019/10/java-note/springBoot/springBoot/legacy.png" alt></p><p><strong>如何让系统中所有的日志都统一到slf4j；</strong></p><p>==1、将系统中其他日志框架先排除出去；==</p><p>==2、用中间包来替换原有的日志框架；==</p><p>==3、我们导入slf4j其他的实现==</p><h2 id="3、SpringBoot日志关系"><a href="#3、SpringBoot日志关系" class="headerlink" title="3、SpringBoot日志关系"></a>3、SpringBoot日志关系</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>SpringBoot使用它来做日志功能；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>底层依赖关系</p><p><img src="/2019/10/java-note/springBoot/springBoot/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180131220946.png" alt></p><p>总结：</p><p>​    1）、SpringBoot底层也是使用slf4j+logback的方式进行日志记录</p><p>​    2）、SpringBoot也把其他的日志都替换成了slf4j；</p><p>​    3）、中间替换包？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"rawtypes"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">LogFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> String UNSUPPORTED_OPERATION_IN_JCL_OVER_SLF4J = <span class="string">"http://www.slf4j.org/codes.html#unsupported_operation_in_jcl_over_slf4j"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> LogFactory logFactory = <span class="keyword">new</span> SLF4JLogFactory();</span><br></pre></td></tr></table></figure><p><img src="/2019/10/java-note/springBoot/springBoot/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180131221411.png" alt></p><p>​    4）、如果我们要引入其他框架？一定要把这个框架的默认日志依赖移除掉？</p><p>​            Spring框架用的是commons-logging；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>==SpringBoot能自动适配所有的日志，而且底层使用slf4j+logback的方式记录日志，引入其他框架的时候，只需要把这个框架依赖的日志框架排除掉即可；==</strong></p><h2 id="4、日志使用-配置）；"><a href="#4、日志使用-配置）；" class="headerlink" title="4、日志使用(配置）；"></a>4、日志使用(配置）；</h2><h3 id="1、默认配置"><a href="#1、默认配置" class="headerlink" title="1、默认配置"></a>1、默认配置</h3><p>SpringBoot默认帮我们配置好了日志；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//记录器</span></span><br><span class="line">Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//System.out.println();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//日志的级别；</span></span><br><span class="line"><span class="comment">//由低到高   trace&lt;debug&lt;info&lt;warn&lt;error</span></span><br><span class="line"><span class="comment">//可以调整输出的日志级别；日志就只会在这个级别以以后的高级别生效</span></span><br><span class="line">logger.trace(<span class="string">"这是trace日志..."</span>);</span><br><span class="line">logger.debug(<span class="string">"这是debug日志..."</span>);</span><br><span class="line"><span class="comment">//SpringBoot默认给我们使用的是info级别的，没有指定级别的就用SpringBoot默认规定的级别；root级别</span></span><br><span class="line">logger.info(<span class="string">"这是info日志..."</span>);</span><br><span class="line">logger.warn(<span class="string">"这是warn日志..."</span>);</span><br><span class="line">logger.error(<span class="string">"这是error日志..."</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>日志输出格式：    %d表示日期时间，    %thread表示线程名，    %-5level：级别从左显示5个字符宽度    %logger{50} 表示logger名字最长50个字符，否则按照句点分割。     %msg：日志消息，    %n是换行符--&gt;%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</code></pre><p>SpringBoot修改日志的默认配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">logging.level.com.atguigu</span>=<span class="string">trace</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#logging.path=</span></span><br><span class="line"><span class="comment"># 不指定路径在当前项目下生成springboot.log日志</span></span><br><span class="line"><span class="comment"># 可以指定完整的路径；</span></span><br><span class="line"><span class="comment">#logging.file=G:/springboot.log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在当前磁盘的根路径下创建spring文件夹和里面的log文件夹；使用 spring.log 作为默认文件</span></span><br><span class="line"><span class="meta">logging.path</span>=<span class="string">/spring/log</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  在控制台输出的日志的格式</span></span><br><span class="line"><span class="meta">logging.pattern.console</span>=<span class="string">%d&#123;yyyy-MM-dd&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n</span></span><br><span class="line"><span class="comment"># 指定文件中日志输出的格式</span></span><br><span class="line"><span class="meta">logging.pattern.file</span>=<span class="string">%d&#123;yyyy-MM-dd&#125; === [%thread] === %-5level === %logger&#123;50&#125; ==== %msg%n</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>logging.file</th><th>logging.path</th><th>Example</th><th>Description</th></tr></thead><tbody><tr><td>(none)</td><td>(none)</td><td></td><td>只在控制台输出</td></tr><tr><td>指定文件名</td><td>(none)</td><td>my.log</td><td>输出日志到my.log文件</td></tr><tr><td>(none)</td><td>指定目录</td><td>/var/log</td><td>输出到指定目录的 spring.log 文件中</td></tr></tbody></table><h3 id="2、指定配置"><a href="#2、指定配置" class="headerlink" title="2、指定配置"></a>2、指定配置</h3><p>给类路径下放上每个日志框架自己的配置文件即可；SpringBoot就不使用他默认配置的了</p><table><thead><tr><th>Logging System</th><th>Customization</th></tr></thead><tbody><tr><td>Logback</td><td><code>logback-spring.xml</code>, <code>logback-spring.groovy</code>, <code>logback.xml</code> or <code>logback.groovy</code></td></tr><tr><td>Log4j2</td><td><code>log4j2-spring.xml</code> or <code>log4j2.xml</code></td></tr><tr><td>JDK (Java Util Logging)</td><td><code>logging.properties</code></td></tr></tbody></table><p>logback.xml：直接就被日志框架识别了；</p><p><strong>logback-spring.xml</strong>：日志框架就不直接加载日志的配置项，由SpringBoot解析日志配置，可以使用SpringBoot的高级Profile功能</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"staging"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- configuration to be enabled when the "staging" profile is active --&gt;</span></span><br><span class="line">  可以指定某段配置只在某个环境下生效</span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"stdout"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        日志输出格式：</span></span><br><span class="line"><span class="comment">%d表示日期时间，</span></span><br><span class="line"><span class="comment">%thread表示线程名，</span></span><br><span class="line"><span class="comment">%-5level：级别从左显示5个字符宽度</span></span><br><span class="line"><span class="comment">%logger&#123;50&#125; 表示logger名字最长50个字符，否则按照句点分割。 </span></span><br><span class="line"><span class="comment">%msg：日志消息，</span></span><br><span class="line"><span class="comment">%n是换行符</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.PatternLayout"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"dev"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; ----&gt; [%thread] ---&gt; %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"!dev"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; ==== [%thread] ==== %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果使用logback.xml作为日志配置文件，还要使用profile功能，会有以下错误</p><p> <code>no applicable action for [springProfile]</code></p><h2 id="5、切换日志框架"><a href="#5、切换日志框架" class="headerlink" title="5、切换日志框架"></a>5、切换日志框架</h2><p>可以按照slf4j的日志适配图，进行相关的切换；</p><p>slf4j+log4j的方式；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>切换为log4j2</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h1 id="四、Web开发"><a href="#四、Web开发" class="headerlink" title="四、Web开发"></a>四、Web开发</h1><h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><p>使用SpringBoot；</p><p><strong>1）、创建SpringBoot应用，选中我们需要的模块；</strong></p><p><strong>2）、SpringBoot已经默认将这些场景配置好了，只需要在配置文件中指定少量配置就可以运行起来</strong></p><p><strong>3）、自己编写业务代码；</strong></p><p><strong>自动配置原理？</strong></p><p>这个场景SpringBoot帮我们配置了什么？能不能修改？能修改哪些配置？能不能扩展？xxx</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xxxxAutoConfiguration：帮我们给容器中自动配置组件；</span><br><span class="line"><span class="symbol">xxxxProperties:</span>配置类来封装配置文件的内容；</span><br></pre></td></tr></table></figure><h2 id="2、SpringBoot对静态资源的映射规则；"><a href="#2、SpringBoot对静态资源的映射规则；" class="headerlink" title="2、SpringBoot对静态资源的映射规则；"></a>2、SpringBoot对静态资源的映射规则；</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.resources"</span>, ignoreUnknownFields = <span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResourceProperties</span> <span class="keyword">implements</span> <span class="title">ResourceLoaderAware</span> </span>&#123;</span><br><span class="line">  <span class="comment">//可以设置和静态资源有关的参数，缓存时间等</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">WebMvcAuotConfiguration：</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class="line">logger.debug(<span class="string">"Default resource handling disabled"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">Integer cachePeriod = <span class="keyword">this</span>.resourceProperties.getCachePeriod();</span><br><span class="line"><span class="keyword">if</span> (!registry.hasMappingForPattern(<span class="string">"/webjars/**"</span>)) &#123;</span><br><span class="line">customizeResourceHandlerRegistration(</span><br><span class="line">registry.addResourceHandler(<span class="string">"/webjars/**"</span>)</span><br><span class="line">.addResourceLocations(</span><br><span class="line"><span class="string">"classpath:/META-INF/resources/webjars/"</span>)</span><br><span class="line">.setCachePeriod(cachePeriod));</span><br><span class="line">&#125;</span><br><span class="line">String staticPathPattern = <span class="keyword">this</span>.mvcProperties.getStaticPathPattern();</span><br><span class="line">         <span class="comment">//静态资源文件夹映射</span></span><br><span class="line"><span class="keyword">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;</span><br><span class="line">customizeResourceHandlerRegistration(</span><br><span class="line">registry.addResourceHandler(staticPathPattern)</span><br><span class="line">.addResourceLocations(</span><br><span class="line"><span class="keyword">this</span>.resourceProperties.getStaticLocations())</span><br><span class="line">.setCachePeriod(cachePeriod));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//配置欢迎页映射</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> WelcomePageHandlerMapping <span class="title">welcomePageHandlerMapping</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">ResourceProperties resourceProperties)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> WelcomePageHandlerMapping(resourceProperties.getWelcomePage(),</span><br><span class="line"><span class="keyword">this</span>.mvcProperties.getStaticPathPattern());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//配置喜欢的图标</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(value = <span class="string">"spring.mvc.favicon.enabled"</span>, matchIfMissing = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FaviconConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ResourceProperties resourceProperties;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FaviconConfiguration</span><span class="params">(ResourceProperties resourceProperties)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.resourceProperties = resourceProperties;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SimpleUrlHandlerMapping <span class="title">faviconHandlerMapping</span><span class="params">()</span> </span>&#123;</span><br><span class="line">SimpleUrlHandlerMapping mapping = <span class="keyword">new</span> SimpleUrlHandlerMapping();</span><br><span class="line">mapping.setOrder(Ordered.HIGHEST_PRECEDENCE + <span class="number">1</span>);</span><br><span class="line">             <span class="comment">//所有  **/favicon.ico </span></span><br><span class="line">mapping.setUrlMap(Collections.singletonMap(<span class="string">"**/favicon.ico"</span>,</span><br><span class="line">faviconRequestHandler()));</span><br><span class="line"><span class="keyword">return</span> mapping;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResourceHttpRequestHandler <span class="title">faviconRequestHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ResourceHttpRequestHandler requestHandler = <span class="keyword">new</span> ResourceHttpRequestHandler();</span><br><span class="line">requestHandler</span><br><span class="line">.setLocations(<span class="keyword">this</span>.resourceProperties.getFaviconLocations());</span><br><span class="line"><span class="keyword">return</span> requestHandler;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>==1）、所有 /webjars/** ，都去 classpath:/META-INF/resources/webjars/ 找资源；==</p><p>​    webjars：以jar包的方式引入静态资源；</p><p><a href="http://www.webjars.org/" target="_blank" rel="noopener">http://www.webjars.org/</a></p><p><img src="/2019/10/java-note/springBoot/springBoot/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180203181751.png" alt></p><p>localhost:8080/webjars/jquery/3.3.1/jquery.js</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入jquery-webjar--&gt;</span>在访问的时候只需要写webjars下面资源的名称即可</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jquery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>==2）、”/**” 访问当前项目的任何资源，都去（静态资源的文件夹）找映射==</p><p>java/resources都是内路径的根路径（classpath）</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"classpath:/META-INF/resources/"</span>, </span><br><span class="line"><span class="string">"classpath:/resources/"</span>,</span><br><span class="line"><span class="string">"classpath:/static/"</span>, </span><br><span class="line"><span class="string">"classpath:/public/"</span> </span><br><span class="line"><span class="string">"/"</span>：当前项目的根路径</span><br></pre></td></tr></table></figure><p>localhost:8080/abc ===  去静态资源文件夹里面找abc</p><p><a href="http://localhost:8080/asserts/js/Chart.min.js" target="_blank" rel="noopener">http://localhost:8080/asserts/js/Chart.min.js</a></p><p>==3）、欢迎页； 静态资源文件夹下的所有index.html页面；被”/**”映射；==</p><p>​    localhost:8080/   找index页面</p><p>==4）、所有的 **/favicon.ico  都是在静态资源文件下找；==</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义自己的静态资源文件夹</span></span><br><span class="line"><span class="meta">spring.resources.static-locations</span>=<span class="string">classpath:/hello/,classpath:/atguigu/</span></span><br></pre></td></tr></table></figure><h2 id="3、模板引擎"><a href="#3、模板引擎" class="headerlink" title="3、模板引擎"></a>3、模板引擎</h2><p>JSP、Velocity、Freemarker、Thymeleaf</p><p><img src="/2019/10/java-note/springBoot/springBoot/template-engine.png" alt></p><p>SpringBoot推荐的Thymeleaf；</p><p>语法更简单，功能更强大；</p><h3 id="1、引入thymeleaf；"><a href="#1、引入thymeleaf；" class="headerlink" title="1、引入thymeleaf；"></a>1、引入thymeleaf；</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          2.1.6</span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">切换thymeleaf版本</span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">thymeleaf.version</span>&gt;</span>3.0.9.RELEASE<span class="tag">&lt;/<span class="name">thymeleaf.version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 布局功能的支持程序  thymeleaf3主程序  layout2以上版本 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- thymeleaf2   layout1--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">thymeleaf-layout-dialect.version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">thymeleaf-layout-dialect.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2、Thymeleaf使用"><a href="#2、Thymeleaf使用" class="headerlink" title="2、Thymeleaf使用"></a>2、Thymeleaf使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.thymeleaf"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThymeleafProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_ENCODING = Charset.forName(<span class="string">"UTF-8"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> MimeType DEFAULT_CONTENT_TYPE = MimeType.valueOf(<span class="string">"text/html"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_PREFIX = <span class="string">"classpath:/templates/"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_SUFFIX = <span class="string">".html"</span>;</span><br><span class="line">  <span class="comment">//</span></span><br></pre></td></tr></table></figure><p>只要我们把HTML页面放在classpath:/templates/，thymeleaf就能自动渲染；</p><p>使用：</p><p>1、导入thymeleaf的名称空间</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、使用thymeleaf语法；</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>成功！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--th:text 将div里面的文本内容设置为 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">"$&#123;hello&#125;"</span>&gt;</span>这是显示欢迎信息<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3、语法规则"><a href="#3、语法规则" class="headerlink" title="3、语法规则"></a>3、语法规则</h3><p>1）、th:text；改变当前元素里面的文本内容；</p><p>​    th：任意html属性；来替换原生属性的值</p><p><img src="/2019/10/java-note/springBoot/springBoot/2018-02-04_123955.png" alt></p><p>2）、表达式？</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Simple</span> <span class="string">expressions:（表达式语法）</span></span><br><span class="line">    <span class="attr">Variable</span> <span class="string">Expressions: $&#123;...&#125;：获取变量值；OGNL；</span></span><br><span class="line">    <span class="attr">1）、获取对象的属性、调用方法</span></span><br><span class="line">    <span class="attr">2）、使用内置的基本对象：</span></span><br><span class="line"><span class="comment">    #ctx : the context object.</span></span><br><span class="line"><span class="comment">    #vars: the context variables.</span></span><br><span class="line"><span class="comment">                #locale : the context locale.</span></span><br><span class="line"><span class="comment">                #request : (only in Web Contexts) the HttpServletRequest object.</span></span><br><span class="line"><span class="comment">                #response : (only in Web Contexts) the HttpServletResponse object.</span></span><br><span class="line"><span class="comment">                #session : (only in Web Contexts) the HttpSession object.</span></span><br><span class="line"><span class="comment">                #servletContext : (only in Web Contexts) the ServletContext object.</span></span><br><span class="line">                </span><br><span class="line">                <span class="attr">$&#123;session.foo&#125;</span></span><br><span class="line">            <span class="attr">3）、内置的一些工具对象：</span></span><br><span class="line"><span class="comment">#execInfo : information about the template being processed.</span></span><br><span class="line"><span class="comment">#messages : methods for obtaining externalized messages inside variables expressions, in the same way as they would be obtained using #&#123;…&#125; syntax.</span></span><br><span class="line"><span class="comment">#uris : methods for escaping parts of URLs/URIs</span></span><br><span class="line"><span class="comment">#conversions : methods for executing the configured conversion service (if any).</span></span><br><span class="line"><span class="comment">#dates : methods for java.util.Date objects: formatting, component extraction, etc.</span></span><br><span class="line"><span class="comment">#calendars : analogous to #dates , but for java.util.Calendar objects.</span></span><br><span class="line"><span class="comment">#numbers : methods for formatting numeric objects.</span></span><br><span class="line"><span class="comment">#strings : methods for String objects: contains, startsWith, prepending/appending, etc.</span></span><br><span class="line"><span class="comment">#objects : methods for objects in general.</span></span><br><span class="line"><span class="comment">#bools : methods for boolean evaluation.</span></span><br><span class="line"><span class="comment">#arrays : methods for arrays.</span></span><br><span class="line"><span class="comment">#lists : methods for lists.</span></span><br><span class="line"><span class="comment">#sets : methods for sets.</span></span><br><span class="line"><span class="comment">#maps : methods for maps.</span></span><br><span class="line"><span class="comment">#aggregates : methods for creating aggregates on arrays or collections.</span></span><br><span class="line"><span class="comment">#ids : methods for dealing with id attributes that might be repeated (for example, as a result of an iteration).</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">Selection</span> <span class="string">Variable Expressions: *&#123;...&#125;：选择表达式：和$&#123;&#125;在功能上是一样；</span></span><br><span class="line">    <span class="meta">补充：配合</span> <span class="string">th:object="$&#123;session.user&#125;：</span></span><br><span class="line">   <span class="meta">&lt;div</span> <span class="string">th:object="$&#123;session.user&#125;"&gt;</span></span><br><span class="line">    <span class="meta">&lt;p&gt;Name</span>: <span class="string">&lt;span th:text="*&#123;firstName&#125;"&gt;Sebastian&lt;/span&gt;.&lt;/p&gt;</span></span><br><span class="line">    <span class="meta">&lt;p&gt;Surname</span>: <span class="string">&lt;span th:text="*&#123;lastName&#125;"&gt;Pepper&lt;/span&gt;.&lt;/p&gt;</span></span><br><span class="line">    <span class="meta">&lt;p&gt;Nationality</span>: <span class="string">&lt;span th:text="*&#123;nationality&#125;"&gt;Saturn&lt;/span&gt;.&lt;/p&gt;</span></span><br><span class="line">    <span class="attr">&lt;/div&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="attr">Message</span> <span class="string">Expressions: #&#123;...&#125;：获取国际化内容</span></span><br><span class="line">    <span class="attr">Link</span> <span class="string">URL Expressions: @&#123;...&#125;：定义URL；</span></span><br><span class="line">    <span class="meta">@&#123;/order/process(execId</span>=<span class="string">$&#123;execId&#125;,execType='FAST')&#125;</span></span><br><span class="line">    <span class="attr">Fragment</span> <span class="string">Expressions: ~&#123;...&#125;：片段引用表达式</span></span><br><span class="line">    <span class="meta">&lt;div</span> <span class="string">th:insert="~&#123;commons :: main&#125;"&gt;...&lt;/div&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="attr">Literals（字面量）</span></span><br><span class="line">      <span class="attr">Text</span> <span class="string">literals: 'one text' , 'Another one!' ,…</span></span><br><span class="line">      <span class="attr">Number</span> <span class="string">literals: 0 , 34 , 3.0 , 12.3 ,…</span></span><br><span class="line">      <span class="attr">Boolean</span> <span class="string">literals: true , false</span></span><br><span class="line">      <span class="attr">Null</span> <span class="string">literal: null</span></span><br><span class="line">      <span class="attr">Literal</span> <span class="string">tokens: one , sometext , main ,…</span></span><br><span class="line"><span class="attr">Text</span> <span class="string">operations:（文本操作）</span></span><br><span class="line">    <span class="attr">String</span> <span class="string">concatenation: +</span></span><br><span class="line">    <span class="attr">Literal</span> <span class="string">substitutions: |The name is $&#123;name&#125;|</span></span><br><span class="line"><span class="attr">Arithmetic</span> <span class="string">operations:（数学运算）</span></span><br><span class="line">    <span class="attr">Binary</span> <span class="string">operators: + , - , * , / , %</span></span><br><span class="line">    <span class="attr">Minus</span> <span class="string">sign (unary operator): -</span></span><br><span class="line"><span class="attr">Boolean</span> <span class="string">operations:（布尔运算）</span></span><br><span class="line">    <span class="attr">Binary</span> <span class="string">operators: and , or</span></span><br><span class="line">    <span class="attr">Boolean</span> <span class="string">negation (unary operator): ! , not</span></span><br><span class="line"><span class="attr">Comparisons</span> <span class="string">and equality:（比较运算）</span></span><br><span class="line">    <span class="attr">Comparators</span>: <span class="string">&gt; , &lt; , &gt;= , &lt;= ( gt , lt , ge , le )</span></span><br><span class="line">    <span class="attr">Equality</span> <span class="string">operators: == , != ( eq , ne )</span></span><br><span class="line"><span class="attr">Conditional</span> <span class="string">operators:条件运算（三元运算符）</span></span><br><span class="line">    <span class="meta">If-then</span>: <span class="string">(if) ? (then)</span></span><br><span class="line">    <span class="meta">If-then-else</span>: <span class="string">(if) ? (then) : (else)</span></span><br><span class="line">    <span class="attr">Default</span>: <span class="string">(value) ?: (defaultvalue)</span></span><br><span class="line"><span class="attr">Special</span> <span class="string">tokens:</span></span><br><span class="line">    <span class="meta">No-Operation</span>: <span class="string">_</span></span><br></pre></td></tr></table></figure><h2 id="4、SpringMVC自动配置"><a href="#4、SpringMVC自动配置" class="headerlink" title="4、SpringMVC自动配置"></a>4、SpringMVC自动配置</h2><p><a href="https://docs.spring.io/spring-boot/docs/1.5.10.RELEASE/reference/htmlsingle/#boot-features-developing-web-applications" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/1.5.10.RELEASE/reference/htmlsingle/#boot-features-developing-web-applications</a></p><h3 id="1-Spring-MVC-auto-configuration"><a href="#1-Spring-MVC-auto-configuration" class="headerlink" title="1. Spring MVC auto-configuration"></a>1. Spring MVC auto-configuration</h3><p>Spring Boot 自动配置好了SpringMVC</p><p>以下是SpringBoot对SpringMVC的默认配置:<strong>==（WebMvcAutoConfiguration）==</strong></p><ul><li><p>Inclusion of <code>ContentNegotiatingViewResolver</code> and <code>BeanNameViewResolver</code> beans.</p><ul><li>自动配置了ViewResolver（视图解析器：根据方法的返回值得到视图对象（View），视图对象决定如何渲染（转发？重定向？））</li><li>ContentNegotiatingViewResolver：组合所有的视图解析器的；</li><li>==如何定制：我们可以自己给容器中添加一个视图解析器；自动的将其组合进来；==</li></ul></li><li><p>Support for serving static resources, including support for WebJars (see below).静态资源文件夹路径,webjars</p></li><li><p>Static <code>index.html</code> support. 静态首页访问</p></li><li><p>Custom <code>Favicon</code> support (see below).  favicon.ico</p></li></ul><ul><li><p>自动注册了 of <code>Converter</code>, <code>GenericConverter</code>, <code>Formatter</code> beans.</p><ul><li>Converter：转换器；  public String hello(User user)：类型转换使用Converter</li><li><code>Formatter</code>  格式化器；  2017.12.17===Date；</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"spring.mvc"</span>, name = <span class="string">"date-format"</span>)<span class="comment">//在文件中配置日期格式化的规则</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Formatter&lt;Date&gt; <span class="title">dateFormatter</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> DateFormatter(<span class="keyword">this</span>.mvcProperties.getDateFormat());<span class="comment">//日期格式化组件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    ==自己添加的格式化器转换器，我们只需要放在容器中即可==</p><ul><li><p>Support for <code>HttpMessageConverters</code> (see below).</p><ul><li><p>HttpMessageConverter：SpringMVC用来转换Http请求和响应的；User—Json；</p></li><li><p><code>HttpMessageConverters</code> 是从容器中确定；获取所有的HttpMessageConverter；</p><p>==自己给容器中添加HttpMessageConverter，只需要将自己的组件注册容器中（@Bean,@Component）==</p></li></ul></li></ul><ul><li><p>Automatic registration of <code>MessageCodesResolver</code> (see below).定义错误代码生成规则</p></li><li><p>Automatic use of a <code>ConfigurableWebBindingInitializer</code> bean (see below).</p><p>==我们可以配置一个ConfigurableWebBindingInitializer来替换默认的；（添加到容器）==</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">初始化WebDataBinder；</span><br><span class="line">请求数据<span class="comment">=====JavaBean；</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>org.springframework.boot.autoconfigure.web：web的所有自动场景；</strong></p><p>If you want to keep Spring Boot MVC features, and you just want to add additional <a href="https://docs.spring.io/spring/docs/4.3.14.RELEASE/spring-framework-reference/htmlsingle#mvc" target="_blank" rel="noopener">MVC configuration</a> (interceptors, formatters, view controllers etc.) you can add your own <code>@Configuration</code> class of type <code>WebMvcConfigurerAdapter</code>, but <strong>without</strong> <code>@EnableWebMvc</code>. If you wish to provide custom instances of <code>RequestMappingHandlerMapping</code>, <code>RequestMappingHandlerAdapter</code> or <code>ExceptionHandlerExceptionResolver</code> you can declare a <code>WebMvcRegistrationsAdapter</code> instance providing such components.</p><p>If you want to take complete control of Spring MVC, you can add your own <code>@Configuration</code> annotated with <code>@EnableWebMvc</code>.</p><h3 id="2、扩展SpringMVC"><a href="#2、扩展SpringMVC" class="headerlink" title="2、扩展SpringMVC"></a>2、扩展SpringMVC</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">"/hello"</span> <span class="attr">view-name</span>=<span class="string">"success"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/hello"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>==编写一个配置类（@Configuration），是WebMvcConfigurerAdapter（@deprecate）类型；不能标注@EnableWebMvc==</strong>;</p><p>实现接口WebMvcConfigurer为2支持</p><p>既保留了所有的自动配置，也能用我们扩展的配置；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用WebMvcConfigurerAdapter可以来扩展SpringMVC的功能</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMvcConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// super.addViewControllers(registry);</span></span><br><span class="line">        <span class="comment">//浏览器发送 /atguigu 请求来到 success</span></span><br><span class="line">        registry.addViewController(<span class="string">"/atguigu"</span>).setViewName(<span class="string">"success"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原理：</p><p>​    1）、WebMvcAutoConfiguration是SpringMVC的自动配置类</p><p>​    2）、在做其他自动配置时会导入；@Import(<strong>EnableWebMvcConfiguration</strong>.class)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">   <span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EnableWebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title">DelegatingWebMvcConfiguration</span> </span>&#123;</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">final</span> WebMvcConfigurerComposite configurers = <span class="keyword">new</span> WebMvcConfigurerComposite();</span><br><span class="line"></span><br><span class="line"> <span class="comment">//从容器中获取所有的WebMvcConfigurer</span></span><br><span class="line">     <span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConfigurers</span><span class="params">(List&lt;WebMvcConfigurer&gt; configurers)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">if</span> (!CollectionUtils.isEmpty(configurers)) &#123;</span><br><span class="line">             <span class="keyword">this</span>.configurers.addWebMvcConfigurers(configurers);</span><br><span class="line">           <span class="comment">//一个参考实现；将所有的WebMvcConfigurer相关配置都来一起调用；  </span></span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">            <span class="comment">// public void addViewControllers(ViewControllerRegistry registry) &#123;</span></span><br><span class="line">             <span class="comment">//    for (WebMvcConfigurer delegate : this.delegates) &#123;</span></span><br><span class="line">              <span class="comment">//       delegate.addViewControllers(registry);</span></span><br><span class="line">              <span class="comment">//   &#125;</span></span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    3）、容器中所有的WebMvcConfigurer都会一起起作用；</p><p>​    4）、我们的配置类也会被调用；</p><p>​    效果：SpringMVC的自动配置和我们的扩展配置都会起作用；</p><h3 id="3、全面接管SpringMVC；"><a href="#3、全面接管SpringMVC；" class="headerlink" title="3、全面接管SpringMVC；"></a>3、全面接管SpringMVC；</h3><p>SpringBoot对SpringMVC的自动配置不需要了，所有都是我们自己配置；所有的SpringMVC的自动配置都失效了</p><p><strong>我们需要在配置类中添加@EnableWebMvc即可；</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用WebMvcConfigurerAdapter可以来扩展SpringMVC的功能</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMvcConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// super.addViewControllers(registry);</span></span><br><span class="line">        <span class="comment">//浏览器发送 /atguigu 请求来到 success</span></span><br><span class="line">        registry.addViewController(<span class="string">"/atguigu"</span>).setViewName(<span class="string">"success"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原理：</p><p>为什么@EnableWebMvc自动配置就失效了；</p><p>1）@EnableWebMvc的核心</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import</span>(DelegatingWebMvcConfiguration.class)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableWebMvc &#123;</span><br></pre></td></tr></table></figure><p>2）、</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelegatingWebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>&#123;</span><br></pre></td></tr></table></figure><p>3）、</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(&#123; Servlet.class, DispatcherServlet.class,</span><br><span class="line">WebMvcConfigurerAdapter.class &#125;)</span><br><span class="line"><span class="comment">//容器中没有这个组件的时候，这个自动配置类才生效</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(WebMvcConfigurationSupport.class)</span><br><span class="line"><span class="meta">@AutoConfigureOrder</span>(Ordered.HIGHEST_PRECEDENCE + <span class="number">10</span>)</span><br><span class="line"><span class="meta">@AutoConfigureAfter</span>(&#123; DispatcherServletAutoConfiguration.class,</span><br><span class="line">ValidationAutoConfiguration.class &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcAutoConfiguration</span> </span>&#123;</span><br></pre></td></tr></table></figure><p>4）、@EnableWebMvc将WebMvcConfigurationSupport组件导入进来；</p><p>5）、导入的WebMvcConfigurationSupport只是SpringMVC最基本的功能；</p><h2 id="5、如何修改SpringBoot的默认配置"><a href="#5、如何修改SpringBoot的默认配置" class="headerlink" title="5、如何修改SpringBoot的默认配置"></a>5、如何修改SpringBoot的默认配置</h2><p>模式：</p><p>​    1）、SpringBoot在自动配置很多组件的时候，先看容器中有没有用户自己配置的（@Bean、@Component）如果有就用用户配置的，如果没有，才自动配置；如果有些组件可以有多个（ViewResolver）将用户配置的和自己默认的组合起来；</p><p>​    2）、在SpringBoot中会有非常多的xxxConfigurer帮助我们进行扩展配置</p><p>​    3）、在SpringBoot中会有很多的xxxCustomizer帮助我们进行定制配置</p><h2 id="6、RestfulCRUD"><a href="#6、RestfulCRUD" class="headerlink" title="6、RestfulCRUD"></a>6、RestfulCRUD</h2><h3 id="1）、默认访问首页"><a href="#1）、默认访问首页" class="headerlink" title="1）、默认访问首页"></a>1）、默认访问首页</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//使用WebMvcConfigurerAdapter可以来扩展SpringMVC的功能</span></span><br><span class="line"><span class="comment">//@EnableWebMvc   不要接管SpringMVC</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMvcConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// super.addViewControllers(registry);</span></span><br><span class="line">        <span class="comment">//浏览器发送 /atguigu 请求来到 success</span></span><br><span class="line">        registry.addViewController(<span class="string">"/atguigu"</span>).setViewName(<span class="string">"success"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//所有的WebMvcConfigurerAdapter组件都会一起起作用</span></span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">//将组件注册在容器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WebMvcConfigurerAdapter <span class="title">webMvcConfigurerAdapter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        WebMvcConfigurerAdapter adapter = <span class="keyword">new</span> WebMvcConfigurerAdapter() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">                registry.addViewController(<span class="string">"/"</span>).setViewName(<span class="string">"login"</span>);</span><br><span class="line">                registry.addViewController(<span class="string">"/index.html"</span>).setViewName(<span class="string">"login"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> adapter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2）、国际化"><a href="#2）、国际化" class="headerlink" title="2）、国际化"></a>2）、国际化</h3><p><strong>1）、编写国际化配置文件；</strong></p><p>2）、使用ResourceBundleMessageSource管理国际化资源文件</p><p>3）、在页面使用fmt:message取出国际化内容</p><p>步骤：</p><p>1）、编写国际化配置文件，抽取页面需要显示的国际化消息</p><p><img src="/2019/10/java-note/springBoot/springBoot/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180211130721.png" alt></p><p>2）、SpringBoot自动配置好了管理国际化资源文件的组件；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.messages"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageSourceAutoConfiguration</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Comma-separated list of basenames (essentially a fully-qualified classpath</span></span><br><span class="line"><span class="comment"> * location), each following the ResourceBundle convention with relaxed support for</span></span><br><span class="line"><span class="comment"> * slash based locations. If it doesn't contain a package qualifier (such as</span></span><br><span class="line"><span class="comment"> * "org.mypackage"), it will be resolved from the classpath root.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String basename = <span class="string">"messages"</span>;  </span><br><span class="line">    <span class="comment">//我们的配置文件可以直接放在类路径下叫messages.properties；</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MessageSource <span class="title">messageSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ResourceBundleMessageSource messageSource = <span class="keyword">new</span> ResourceBundleMessageSource();</span><br><span class="line"><span class="keyword">if</span> (StringUtils.hasText(<span class="keyword">this</span>.basename)) &#123;</span><br><span class="line">            <span class="comment">//设置国际化资源文件的基础名（去掉语言国家代码的）</span></span><br><span class="line">messageSource.setBasenames(StringUtils.commaDelimitedListToStringArray(</span><br><span class="line">StringUtils.trimAllWhitespace(<span class="keyword">this</span>.basename)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.encoding != <span class="keyword">null</span>) &#123;</span><br><span class="line">messageSource.setDefaultEncoding(<span class="keyword">this</span>.encoding.name());</span><br><span class="line">&#125;</span><br><span class="line">messageSource.setFallbackToSystemLocale(<span class="keyword">this</span>.fallbackToSystemLocale);</span><br><span class="line">messageSource.setCacheSeconds(<span class="keyword">this</span>.cacheSeconds);</span><br><span class="line">messageSource.setAlwaysUseMessageFormat(<span class="keyword">this</span>.alwaysUseMessageFormat);</span><br><span class="line"><span class="keyword">return</span> messageSource;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3）、去页面获取国际化的值；</p><p><img src="/2019/10/java-note/springBoot/springBoot/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180211134506.png" alt></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>  <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1, shrink-to-fit=no"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"author"</span> <span class="attr">content</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Signin Template for Bootstrap<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Bootstrap core CSS --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"asserts/css/bootstrap.min.css"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/webjars/bootstrap/4.0.0/css/bootstrap.css&#125;"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Custom styles for this template --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"asserts/css/signin.css"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/asserts/css/signin.css&#125;"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">"text-center"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"form-signin"</span> <span class="attr">action</span>=<span class="string">"dashboard.html"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"mb-4"</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/asserts/img/bootstrap-solid.svg&#125;"</span> <span class="attr">src</span>=<span class="string">"asserts/img/bootstrap-solid.svg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">width</span>=<span class="string">"72"</span> <span class="attr">height</span>=<span class="string">"72"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"h3 mb-3 font-weight-normal"</span> <span class="attr">th:text</span>=<span class="string">"#&#123;login.tip&#125;"</span>&gt;</span>Please sign in<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"sr-only"</span> <span class="attr">th:text</span>=<span class="string">"#&#123;login.username&#125;"</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"Username"</span> <span class="attr">th:placeholder</span>=<span class="string">"#&#123;login.username&#125;"</span> <span class="attr">required</span>=<span class="string">""</span> <span class="attr">autofocus</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"sr-only"</span> <span class="attr">th:text</span>=<span class="string">"#&#123;login.password&#125;"</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"Password"</span> <span class="attr">th:placeholder</span>=<span class="string">"#&#123;login.password&#125;"</span> <span class="attr">required</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"checkbox mb-3"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"remember-me"</span>/&gt;</span> [[#&#123;login.remember&#125;]]</span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-lg btn-primary btn-block"</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">th:text</span>=<span class="string">"#&#123;login.btn&#125;"</span>&gt;</span>Sign in<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"mt-5 mb-3 text-muted"</span>&gt;</span>© 2017-2018<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-sm"</span>&gt;</span>中文<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-sm"</span>&gt;</span>English<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果：根据浏览器语言设置的信息切换了国际化；</p><p>原理：</p><p>​    国际化Locale（区域信息对象）；LocaleResolver（获取区域信息对象）；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"spring.mvc"</span>, name = <span class="string">"locale"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.mvcProperties</span><br><span class="line">.getLocaleResolver() == WebMvcProperties.LocaleResolver.FIXED) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> FixedLocaleResolver(<span class="keyword">this</span>.mvcProperties.getLocale());</span><br><span class="line">&#125;</span><br><span class="line">AcceptHeaderLocaleResolver localeResolver = <span class="keyword">new</span> AcceptHeaderLocaleResolver();</span><br><span class="line">localeResolver.setDefaultLocale(<span class="keyword">this</span>.mvcProperties.getLocale());</span><br><span class="line"><span class="keyword">return</span> localeResolver;</span><br><span class="line">&#125;</span><br><span class="line">默认的就是根据请求头带来的区域信息获取Locale进行国际化</span><br></pre></td></tr></table></figure><p>4）、点击链接切换国际化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 可以在连接上携带区域信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLocaleResolver</span> <span class="keyword">implements</span> <span class="title">LocaleResolver</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Locale <span class="title">resolveLocale</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        String l = request.getParameter(<span class="string">"l"</span>);</span><br><span class="line">        Locale locale = Locale.getDefault();</span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.isEmpty(l))&#123;</span><br><span class="line">            String[] split = l.split(<span class="string">"_"</span>);</span><br><span class="line">            locale = <span class="keyword">new</span> Locale(split[<span class="number">0</span>],split[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> locale;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLocale</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Locale locale)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyLocaleResolver();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3）、登陆"><a href="#3）、登陆" class="headerlink" title="3）、登陆"></a>3）、登陆</h3><p>开发期间模板引擎页面修改以后，要实时生效</p><p>1）、禁用模板引擎的缓存</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 禁用缓存</span></span><br><span class="line"><span class="attr">spring.thymeleaf.cache</span>=<span class="literal">false</span></span><br></pre></td></tr></table></figure><p>2）、页面修改完成以后ctrl+f9：重新编译；</p><p>登陆错误消息的显示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"color: red"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;msg&#125;"</span> <span class="attr">th:if</span>=<span class="string">"$&#123;not #strings.isEmpty(msg)&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4）、拦截器进行登陆检查"><a href="#4）、拦截器进行登陆检查" class="headerlink" title="4）、拦截器进行登陆检查"></a>4）、拦截器进行登陆检查</h3><p>拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 登陆检查，</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginHandlerInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="comment">//目标方法执行之前</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Object user = request.getSession().getAttribute(<span class="string">"loginUser"</span>);</span><br><span class="line">        <span class="keyword">if</span>(user == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//未登陆，返回登陆页面</span></span><br><span class="line">            request.setAttribute(<span class="string">"msg"</span>,<span class="string">"没有权限请先登陆"</span>);</span><br><span class="line">            request.getRequestDispatcher(<span class="string">"/index.html"</span>).forward(request,response);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//已登陆，放行请求</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注册拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//所有的WebMvcConfigurerAdapter组件都会一起起作用</span></span><br><span class="line">  <span class="meta">@Bean</span> <span class="comment">//将组件注册在容器</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> WebMvcConfigurerAdapter <span class="title">webMvcConfigurerAdapter</span><span class="params">()</span></span>&#123;</span><br><span class="line">      WebMvcConfigurerAdapter adapter = <span class="keyword">new</span> WebMvcConfigurerAdapter() &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">              registry.addViewController(<span class="string">"/"</span>).setViewName(<span class="string">"login"</span>);</span><br><span class="line">              registry.addViewController(<span class="string">"/index.html"</span>).setViewName(<span class="string">"login"</span>);</span><br><span class="line">              registry.addViewController(<span class="string">"/main.html"</span>).setViewName(<span class="string">"dashboard"</span>);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="comment">//注册拦截器</span></span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">              <span class="comment">//super.addInterceptors(registry);</span></span><br><span class="line">              <span class="comment">//静态资源；  *.css , *.js</span></span><br><span class="line">              <span class="comment">//SpringBoot已经做好了静态资源映射</span></span><br><span class="line">              registry.addInterceptor(<span class="keyword">new</span> LoginHandlerInterceptor()).addPathPatterns(<span class="string">"/**"</span>)</span><br><span class="line">                      .excludePathPatterns(<span class="string">"/index.html"</span>,<span class="string">"/"</span>,<span class="string">"/user/login"</span>);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">return</span> adapter;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>==2.0以上版本会拦截静态资源==</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//静态文件</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//静态文件</span></span><br><span class="line">    registry.addResourceHandler(<span class="string">"/**"</span>).addResourceLocations(<span class="string">"classpath:/static/"</span>);</span><br><span class="line">    <span class="comment">//webjar文件</span></span><br><span class="line">    registry.addResourceHandler(<span class="string">"/webjars/**"</span>).addResourceLocations(<span class="string">"/webjars/"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5）、CRUD-员工列表"><a href="#5）、CRUD-员工列表" class="headerlink" title="5）、CRUD-员工列表"></a>5）、CRUD-员工列表</h3><p>实验要求：</p><p>1）、RestfulCRUD：CRUD满足Rest风格；</p><p>URI：  /资源名称/资源标识       HTTP请求方式区分对资源CRUD操作</p><table><thead><tr><th></th><th>普通CRUD（uri来区分操作）</th><th>RestfulCRUD</th></tr></thead><tbody><tr><td>查询</td><td>getEmp</td><td>emp—GET</td></tr><tr><td>添加</td><td>addEmp?xxx</td><td>emp—POST</td></tr><tr><td>修改</td><td>updateEmp?id=xxx&amp;xxx=xx</td><td>emp/{id}—PUT</td></tr><tr><td>删除</td><td>deleteEmp?id=1</td><td>emp/{id}—DELETE</td></tr></tbody></table><p>2）、实验的请求架构;</p><table><thead><tr><th>实验功能</th><th>请求URI</th><th>请求方式</th></tr></thead><tbody><tr><td>查询所有员工</td><td>emps</td><td>GET</td></tr><tr><td>查询某个员工(来到修改页面)</td><td>emp/1</td><td>GET</td></tr><tr><td>来到添加页面</td><td>emp</td><td>GET</td></tr><tr><td>添加员工</td><td>emp</td><td>POST</td></tr><tr><td>来到修改页面（查出员工进行信息回显）</td><td>emp/1</td><td>GET</td></tr><tr><td>修改员工</td><td>emp</td><td>PUT</td></tr><tr><td>删除员工</td><td>emp/1</td><td>DELETE</td></tr></tbody></table><p>thymeleaf默认为classpath:/templates/xxx.html</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// thymeleaf默认就会拼串</span></span><br><span class="line"><span class="comment">// classpath:/templates/xxxx.html</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"emp/list"</span>;</span><br></pre></td></tr></table></figure><p>3）、员工列表：</p><h4 id="thymeleaf公共页面元素抽取"><a href="#thymeleaf公共页面元素抽取" class="headerlink" title="thymeleaf公共页面元素抽取"></a>thymeleaf公共页面元素抽取</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">1、抽取公共片段</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:fragment</span>=<span class="string">"copy"</span>&gt;</span></span><br><span class="line">&amp;copy; 2011 The Good Thymes Virtual Grocery</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">2、引入公共片段</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">"~&#123;footer :: copy&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">~&#123;templatename::selector&#125;：模板名::选择器</span><br><span class="line">~&#123;templatename::fragmentname&#125;:模板名::片段名</span><br><span class="line"></span><br><span class="line">3、默认效果：</span><br><span class="line">insert的公共片段在div标签中</span><br><span class="line">如果使用th:insert等属性进行引入，可以不用写~&#123;&#125;：</span><br><span class="line">行内写法可以加上：[[~&#123;&#125;]];[(~&#123;&#125;)]；</span><br></pre></td></tr></table></figure><p>三种引入公共片段的th属性：</p><p><strong>th:insert</strong>：将公共片段整个插入到声明引入的元素中</p><p><strong>th:replace</strong>：将声明引入的元素替换为公共片段</p><p><strong>th:include</strong>：将被引入的片段的内容包含进这个标签中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">th:fragment</span>=<span class="string">"copy"</span>&gt;</span></span><br><span class="line">&amp;copy; 2011 The Good Thymes Virtual Grocery</span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"></span><br><span class="line">引入方式</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">"footer :: copy"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">"footer :: copy"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:include</span>=<span class="string">"footer :: copy"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">效果</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    &amp;copy; 2011 The Good Thymes Virtual Grocery</span><br><span class="line">    <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">&amp;copy; 2011 The Good Thymes Virtual Grocery</span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">&amp;copy; 2011 The Good Thymes Virtual Grocery</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引入片段的时候传入参数： </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"col-md-2 d-none d-md-block bg-light sidebar"</span> <span class="attr">id</span>=<span class="string">"sidebar"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sidebar-sticky"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav flex-column"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"nav-item"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"nav-link active"</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">th:class</span>=<span class="string">"$&#123;activeUri=='main.html'?'nav-link active':'nav-link'&#125;"</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/main.html&#125;"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/2000/svg"</span> <span class="attr">width</span>=<span class="string">"24"</span> <span class="attr">height</span>=<span class="string">"24"</span> <span class="attr">viewBox</span>=<span class="string">"0 0 24 24"</span> <span class="attr">fill</span>=<span class="string">"none"</span> <span class="attr">stroke</span>=<span class="string">"currentColor"</span> <span class="attr">stroke-width</span>=<span class="string">"2"</span> <span class="attr">stroke-linecap</span>=<span class="string">"round"</span> <span class="attr">stroke-linejoin</span>=<span class="string">"round"</span> <span class="attr">class</span>=<span class="string">"feather feather-home"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">"M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">polyline</span> <span class="attr">points</span>=<span class="string">"9 22 9 12 15 12 15 22"</span>&gt;</span><span class="tag">&lt;/<span class="name">polyline</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">                    Dashboard <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>(current)<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--引入侧边栏;传入参数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">"commons/bar::#sidebar(activeUri='emps')"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6）、CRUD-员工添加"><a href="#6）、CRUD-员工添加" class="headerlink" title="6）、CRUD-员工添加"></a>6）、CRUD-员工添加</h3><p>添加页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>LastName<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"zhangsan"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"zhangsan@atguigu.com"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Gender<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-check form-check-inline"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-check-input"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span>  <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"form-check-label"</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-check form-check-inline"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-check-input"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span>  <span class="attr">value</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"form-check-label"</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>department<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">"form-control"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>4<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>5<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Birth<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"zhangsan"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>// redirect: 表示重定向到一个地址  /代表当前项目路径// forward: 表示转发到一个地址</p><p>thymeleaf的视图解析器代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThymeleafViewResolver</span>  <span class="keyword">extends</span> <span class="title">AbstractCachingViewResolver</span> </span></span><br><span class="line"><span class="class">       <span class="keyword">implements</span> <span class="title">Ordered</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> View <span class="title">createView</span><span class="params">(<span class="keyword">final</span> String viewName, <span class="keyword">final</span> Locale locale)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// First possible call to check "viewNames": before processing redirects and forwards</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.alwaysProcessRedirectAndForward &amp;&amp; !canHandle(viewName, locale)) &#123;</span><br><span class="line">            vrlogger.trace(<span class="string">"[THYMELEAF] View \"&#123;&#125;\" cannot be handled by ThymeleafViewResolver. Passing on to the next resolver in the chain."</span>, viewName);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Process redirects (HTTP redirects)</span></span><br><span class="line">        <span class="keyword">if</span> (viewName.startsWith(REDIRECT_URL_PREFIX)) &#123;</span><br><span class="line">            vrlogger.trace(<span class="string">"[THYMELEAF] View \"&#123;&#125;\" is a redirect, and will not be handled directly by ThymeleafViewResolver."</span>, viewName);</span><br><span class="line">            <span class="keyword">final</span> String redirectUrl = viewName.substring(REDIRECT_URL_PREFIX.length(), viewName.length());</span><br><span class="line">            <span class="keyword">final</span> RedirectView view = <span class="keyword">new</span> RedirectView(redirectUrl, isRedirectContextRelative(), isRedirectHttp10Compatible());</span><br><span class="line">            <span class="keyword">return</span> (View) getApplicationContext().getAutowireCapableBeanFactory().initializeBean(view, viewName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Process forwards (to JSP resources)</span></span><br><span class="line">        <span class="keyword">if</span> (viewName.startsWith(FORWARD_URL_PREFIX)) &#123;</span><br><span class="line">            <span class="comment">// The "forward:" prefix will actually create a Servlet/JSP view, and that's precisely its aim per the Spring</span></span><br><span class="line">            <span class="comment">// documentation. See http://docs.spring.io/spring-framework/docs/4.2.4.RELEASE/spring-framework-reference/html/mvc.html#mvc-redirecting-forward-prefix</span></span><br><span class="line">            vrlogger.trace(<span class="string">"[THYMELEAF] View \"&#123;&#125;\" is a forward, and will not be handled directly by ThymeleafViewResolver."</span>, viewName);</span><br><span class="line">            <span class="keyword">final</span> String forwardUrl = viewName.substring(FORWARD_URL_PREFIX.length(), viewName.length());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> InternalResourceView(forwardUrl);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Second possible call to check "viewNames": after processing redirects and forwards</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.alwaysProcessRedirectAndForward &amp;&amp; !canHandle(viewName, locale)) &#123;</span><br><span class="line">            vrlogger.trace(<span class="string">"[THYMELEAF] View \"&#123;&#125;\" cannot be handled by ThymeleafViewResolver. Passing on to the next resolver in the chain."</span>, viewName);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        vrlogger.trace(<span class="string">"[THYMELEAF] View &#123;&#125; will be handled by ThymeleafViewResolver and a "</span> +</span><br><span class="line">                        <span class="string">"&#123;&#125; instance will be created for it"</span>, viewName, getViewClass().getSimpleName());</span><br><span class="line">        <span class="keyword">return</span> loadView(viewName, locale);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>springboot在WebMvcAutoConfiguration.java中默认配置的格式是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Date format to use. For instance, `dd/MM/yyyy`.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String dateFormat;</span><br></pre></td></tr></table></figure><p>提交的数据格式不对：生日：日期；</p><p>2017-12-12；2017/12/12；2017.12.12；</p><p>日期的格式化；SpringMVC将页面提交的值需要转换为指定的类型;</p><p>2017-12-12—Date； 类型转换，格式化;</p><p>默认日期是按照/的方式；</p><h3 id="7）、CRUD-员工修改"><a href="#7）、CRUD-员工修改" class="headerlink" title="7）、CRUD-员工修改"></a>7）、CRUD-员工修改</h3><p>修改添加二合一表单</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--需要区分是员工修改还是添加；--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">"@&#123;/emp&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--发送put请求修改员工数据--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">1、SpringMVC中配置HiddenHttpMethodFilter;（SpringBoot自动配置好的）</span></span><br><span class="line"><span class="comment">2、页面创建一个post表单</span></span><br><span class="line"><span class="comment">3、创建一个input项，name="_method";值就是我们指定的请求方式</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"_method"</span> <span class="attr">value</span>=<span class="string">"put"</span> <span class="attr">th:if</span>=<span class="string">"$&#123;emp!=null&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">th:if</span>=<span class="string">"$&#123;emp!=null&#125;"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;emp.id&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>LastName<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"lastName"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"zhangsan"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;emp!=null&#125;?$&#123;emp.lastName&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"zhangsan@atguigu.com"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;emp!=null&#125;?$&#123;emp.email&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Gender<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-check form-check-inline"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-check-input"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"1"</span> <span class="attr">th:checked</span>=<span class="string">"$&#123;emp!=null&#125;?$&#123;emp.gender==1&#125;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"form-check-label"</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-check form-check-inline"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-check-input"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"0"</span> <span class="attr">th:checked</span>=<span class="string">"$&#123;emp!=null&#125;?$&#123;emp.gender==0&#125;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"form-check-label"</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>department<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--提交的是部门的id--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">name</span>=<span class="string">"department.id"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">th:selected</span>=<span class="string">"$&#123;emp!=null&#125;?$&#123;dept.id == emp.department.id&#125;"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;dept.id&#125;"</span> <span class="attr">th:each</span>=<span class="string">"dept:$&#123;depts&#125;"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;dept.departmentName&#125;"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Birth<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"birth"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"zhangsan"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;emp!=null&#125;?$&#123;#dates.format(emp.birth, 'yyyy-MM-dd HH:mm')&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;emp!=null&#125;?'修改':'添加'"</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="8）、CRUD-员工删除"><a href="#8）、CRUD-员工删除" class="headerlink" title="8）、CRUD-员工删除"></a>8）、CRUD-员工删除</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"emp:$&#123;emps&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;emp.id&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>[[$&#123;emp.lastName&#125;]]<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;emp.email&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;emp.gender&#125;==0?'女':'男'"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;emp.department.departmentName&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#dates.format(emp.birth, 'yyyy-MM-dd HH:mm')&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-sm btn-primary"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/emp/&#125;+$&#123;emp.id&#125;"</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">th:attr</span>=<span class="string">"del_uri=@&#123;/emp/&#125;+$&#123;emp.id&#125;"</span> <span class="attr">class</span>=<span class="string">"btn btn-sm btn-danger deleteBtn"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">".deleteBtn"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//删除当前员工的</span></span></span><br><span class="line"><span class="javascript">        $(<span class="string">"#deleteEmpForm"</span>).attr(<span class="string">"action"</span>,$(<span class="keyword">this</span>).attr(<span class="string">"del_uri"</span>)).submit();</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="7、错误处理机制"><a href="#7、错误处理机制" class="headerlink" title="7、错误处理机制"></a>7、错误处理机制</h2><h3 id="1）、SpringBoot默认的错误处理机制"><a href="#1）、SpringBoot默认的错误处理机制" class="headerlink" title="1）、SpringBoot默认的错误处理机制"></a>1）、SpringBoot默认的错误处理机制</h3><p>默认效果：</p><p>​        1）、浏览器，返回一个默认的错误页面</p><p><img src="/2019/10/java-note/springBoot/springBoot/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180226173408.png" alt></p><p>  浏览器发送请求的请求头：</p><p><img src="/2019/10/java-note/springBoot/springBoot/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180226180347.png" alt></p><p>​        2）、如果是其他客户端，默认响应一个json数据</p><p><img src="/2019/10/java-note/springBoot/springBoot/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180226173527.png" alt></p><p>​        <img src="/2019/10/java-note/springBoot/springBoot/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180226180504.png" alt></p><p>原理：</p><p>​    可以参照ErrorMvcAutoConfiguration；错误处理的自动配置；</p><pre><code>给容器中添加了以下组件</code></pre><p>​    1、DefaultErrorAttributes：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">帮我们在页面共享信息；</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getErrorAttributes</span><span class="params">(RequestAttributes requestAttributes,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">boolean</span> includeStackTrace)</span> </span>&#123;</span><br><span class="line">Map&lt;String, Object&gt; errorAttributes = <span class="keyword">new</span> LinkedHashMap&lt;String, Object&gt;();</span><br><span class="line">errorAttributes.put(<span class="string">"timestamp"</span>, <span class="keyword">new</span> Date());</span><br><span class="line">addStatus(errorAttributes, requestAttributes);</span><br><span class="line">addErrorDetails(errorAttributes, requestAttributes, includeStackTrace);</span><br><span class="line">addPath(errorAttributes, requestAttributes);</span><br><span class="line"><span class="keyword">return</span> errorAttributes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    2、BasicErrorController：处理默认/error请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"$&#123;server.error.path:$&#123;error.path:/error&#125;&#125;"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicErrorController</span> <span class="keyword">extends</span> <span class="title">AbstractErrorController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping</span>(produces = <span class="string">"text/html"</span>)<span class="comment">//产生html类型的数据；浏览器发送的请求来到这个方法处理</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">errorHtml</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">HttpStatus status = getStatus(request);</span><br><span class="line">Map&lt;String, Object&gt; model = Collections.unmodifiableMap(getErrorAttributes(</span><br><span class="line">request, isIncludeStackTrace(request, MediaType.TEXT_HTML)));</span><br><span class="line">response.setStatus(status.value());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//去哪个页面作为错误页面；包含页面地址和页面内容</span></span><br><span class="line">ModelAndView modelAndView = resolveErrorView(request, response, status, model);</span><br><span class="line"><span class="keyword">return</span> (modelAndView == <span class="keyword">null</span> ? <span class="keyword">new</span> ModelAndView(<span class="string">"error"</span>, model) : modelAndView);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span></span><br><span class="line"><span class="meta">@ResponseBody</span>    <span class="comment">//产生json数据，其他客户端来到这个方法处理；</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt; error(HttpServletRequest request) &#123;</span><br><span class="line">Map&lt;String, Object&gt; body = getErrorAttributes(request,</span><br><span class="line">isIncludeStackTrace(request, MediaType.ALL));</span><br><span class="line">HttpStatus status = getStatus(request);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt;(body, status);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    3、ErrorPageCustomizer：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;error.path:/error&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String path = <span class="string">"/error"</span>;  系统出现错误以后来到error请求进行处理；（web.xml注册的错误页面规则）</span><br></pre></td></tr></table></figure><p>​    4、DefaultErrorViewResolver：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveErrorView</span><span class="params">(HttpServletRequest request, HttpStatus status,</span></span></span><br><span class="line"><span class="function"><span class="params">Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">ModelAndView modelAndView = resolve(String.valueOf(status), model);</span><br><span class="line"><span class="keyword">if</span> (modelAndView == <span class="keyword">null</span> &amp;&amp; SERIES_VIEWS.containsKey(status.series())) &#123;</span><br><span class="line">modelAndView = resolve(SERIES_VIEWS.get(status.series()), model);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> ModelAndView <span class="title">resolve</span><span class="params">(String viewName, Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//默认SpringBoot可以去找到一个页面？  error/404</span></span><br><span class="line">String errorViewName = <span class="string">"error/"</span> + viewName;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//模板引擎可以解析这个页面地址就用模板引擎解析</span></span><br><span class="line">TemplateAvailabilityProvider provider = <span class="keyword">this</span>.templateAvailabilityProviders</span><br><span class="line">.getProvider(errorViewName, <span class="keyword">this</span>.applicationContext);</span><br><span class="line"><span class="keyword">if</span> (provider != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//模板引擎可用的情况下返回到errorViewName指定的视图地址</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(errorViewName, model);</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">//模板引擎不可用，就在静态资源文件夹下找errorViewName对应的页面   error/404.html</span></span><br><span class="line"><span class="keyword">return</span> resolveResource(errorViewName, model);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    步骤：</p><p>​        一但系统出现4xx或者5xx之类的错误；ErrorPageCustomizer就会生效（定制错误的响应规则）；就会来到/error请求；就会被<strong>BasicErrorController</strong>处理；</p><p>​        1）响应页面；去哪个页面是由<strong>DefaultErrorViewResolver</strong>解析得到的；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">resolveErrorView</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">      HttpServletResponse response, HttpStatus status, Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//所有的ErrorViewResolver得到ModelAndView</span></span><br><span class="line">   <span class="keyword">for</span> (ErrorViewResolver resolver : <span class="keyword">this</span>.errorViewResolvers) &#123;</span><br><span class="line">      ModelAndView modelAndView = resolver.resolveErrorView(request, status, model);</span><br><span class="line">      <span class="keyword">if</span> (modelAndView != <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> modelAndView;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2）、如果定制错误响应："><a href="#2）、如果定制错误响应：" class="headerlink" title="2）、如果定制错误响应："></a>2）、如果定制错误响应：</h3><h4 id="1）、如何定制错误的页面；"><a href="#1）、如何定制错误的页面；" class="headerlink" title="1）、如何定制错误的页面；"></a><strong>1）、如何定制错误的页面；</strong></h4><p>​            <strong>1）、有模板引擎的情况下；error/状态码;</strong> 【将错误页面命名为  错误状态码.html 放在模板引擎文件夹里面的 error文件夹下】，发生此状态码的错误就会来到  对应的页面；</p><p>​            我们可以使用4xx和5xx作为错误页面的文件名来匹配这种类型的所有错误，<strong>精确优先</strong>（优先寻找精确的状态码.html）；        </p><p>​            页面能获取的信息；</p><p>​                timestamp：时间戳</p><p>​                status：状态码</p><p>​                error：错误提示</p><p>​                exception：异常对象</p><p>​                message：异常消息</p><p>​                errors：JSR303数据校验的错误都在这里</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">* Default implementation of &#123;<span class="meta">@link</span> ErrorAttributes&#125;. Provides the following attributes</span><br><span class="line"> * when possible:</span><br><span class="line"> * &lt;ul&gt;</span><br><span class="line"> * &lt;li&gt;timestamp - The time that the errors were extracted&lt;/li&gt;</span><br><span class="line"> * &lt;li&gt;status - The status code&lt;/li&gt;</span><br><span class="line"> * &lt;li&gt;error - The error reason&lt;/li&gt;</span><br><span class="line"> * &lt;li&gt;exception - <span class="function">The class name of the root <span class="title">exception</span> <span class="params">(<span class="keyword">if</span> configured)</span>&lt;/li&gt;</span></span><br><span class="line"><span class="function"> * &lt;li&gt;message - The exception message&lt;/li&gt;</span></span><br><span class="line"><span class="function"> * &lt;li&gt;errors - Any </span>&#123;<span class="meta">@link</span> ObjectError&#125;s from a &#123;<span class="meta">@link</span> BindingResult&#125; exception</span><br><span class="line"> * &lt;li&gt;trace - The exception stack trace&lt;/li&gt;</span><br><span class="line"> * &lt;li&gt;path - The URL path when the exception was raised&lt;/li&gt;</span><br><span class="line"> * &lt;/ul&gt;</span><br></pre></td></tr></table></figure><p>​            2）、没有模板引擎（模板引擎找不到这个错误页面），静态资源文件夹下找；</p><p>​            3）、以上都没有错误页面，就是默认来到SpringBoot默认的错误提示页面；</p><h4 id="2）、如何定制错误的json数据；"><a href="#2）、如何定制错误的json数据；" class="headerlink" title="2）、如何定制错误的json数据；"></a>2）、如何定制错误的json数据；</h4><p>​        1）、自定义异常处理&amp;返回定制json数据；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(UserNotExistException.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">handleException</span><span class="params">(Exception e)</span></span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"code"</span>,<span class="string">"user.notexist"</span>);</span><br><span class="line">        map.put(<span class="string">"message"</span>,e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1、浏览器客户端返回的都是json</span></span><br><span class="line"><span class="comment">//没有自适应效果...</span></span><br></pre></td></tr></table></figure><p>​        2）、转发到/error进行自适应响应效果处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BasicErrorController中获取状态码的方法</span><br><span class="line"><span class="function"><span class="keyword">protected</span> HttpStatus <span class="title">getStatus</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">Integer statusCode = (Integer) request.getAttribute(<span class="string">"javax.servlet.error.status_code"</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler</span>(UserNotExistException.class)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">handleException</span><span class="params">(Exception e, HttpServletRequest request)</span></span>&#123;</span><br><span class="line">       Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">       <span class="comment">//传入我们自己的错误状态码  4xx 5xx，否则就不会进入定制错误页面的解析流程</span></span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * Integer statusCode = (Integer) request</span></span><br><span class="line"><span class="comment">        .getAttribute("javax.servlet.error.status_code");</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       request.setAttribute(<span class="string">"javax.servlet.error.status_code"</span>,<span class="number">500</span>);</span><br><span class="line">       map.put(<span class="string">"code"</span>,<span class="string">"user.notexist"</span>);</span><br><span class="line">       map.put(<span class="string">"message"</span>,e.getMessage());</span><br><span class="line">       <span class="comment">//转发到/error</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">"forward:/error"</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="3）、将我们的定制数据携带出去；"><a href="#3）、将我们的定制数据携带出去；" class="headerlink" title="3）、将我们的定制数据携带出去；"></a>3）、将我们的定制数据携带出去；</h4><p>出现错误以后，会来到/error请求，会被BasicErrorController处理，响应出去可以获取的数据是由getErrorAttributes得到的（是AbstractErrorController（ErrorController）规定的方法）；</p><p>​    1、完全来编写一个ErrorController的实现类【或者是编写AbstractErrorController的子类】，放在容器中；</p><p>​    2、（html）页面上能用的数据，或者是json返回能用的数据都是通过errorAttributes.getErrorAttributes得到；</p><p>​            容器中DefaultErrorAttributes.getErrorAttributes()；默认进行数据处理的；</p><p>自定义ErrorAttributes</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给容器中加入我们自己定义的ErrorAttributes</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyErrorAttributes</span> <span class="keyword">extends</span> <span class="title">DefaultErrorAttributes</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getErrorAttributes</span><span class="params">(RequestAttributes requestAttributes, <span class="keyword">boolean</span> includeStackTrace)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">super</span>.getErrorAttributes(requestAttributes, includeStackTrace);</span><br><span class="line">        map.put(<span class="string">"company"</span>,<span class="string">"atguigu"</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终的效果：响应是自适应的，可以通过定制ErrorAttributes改变需要返回的内容，</p><p><img src="/2019/10/java-note/springBoot/springBoot/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180228135513.png" alt></p><h2 id="8、配置嵌入式Servlet容器"><a href="#8、配置嵌入式Servlet容器" class="headerlink" title="8、配置嵌入式Servlet容器"></a>8、配置嵌入式Servlet容器</h2><p>SpringBoot默认使用Tomcat作为嵌入式的Servlet容器；</p><p><img src="/2019/10/java-note/springBoot/springBoot/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180301142915.png" alt></p><p>问题？</p><h3 id="1）、如何定制和修改Servlet容器的相关配置；"><a href="#1）、如何定制和修改Servlet容器的相关配置；" class="headerlink" title="1）、如何定制和修改Servlet容器的相关配置；"></a>1）、如何定制和修改Servlet容器的相关配置；</h3><p>1、修改和server有关的配置（ServerProperties【也是EmbeddedServletContainerCustomizer】）；</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8081</span></span><br><span class="line"><span class="meta">server.context-path</span>=<span class="string">/crud</span></span><br><span class="line"></span><br><span class="line"><span class="meta">server.tomcat.uri-encoding</span>=<span class="string">UTF-8</span></span><br><span class="line"></span><br><span class="line"><span class="attr">//通用的Servlet容器设置</span></span><br><span class="line"><span class="attr">server.xxx</span></span><br><span class="line"><span class="attr">//Tomcat的设置</span></span><br><span class="line"><span class="attr">server.tomcat.xxx</span></span><br></pre></td></tr></table></figure><p>2、编写一个<strong>EmbeddedServletContainerCustomizer</strong>：嵌入式的Servlet容器的定制器；来修改Servlet容器的配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span>  <span class="comment">//一定要将这个定制器加入到容器中</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> EmbeddedServletContainerCustomizer <span class="title">embeddedServletContainerCustomizer</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> EmbeddedServletContainerCustomizer() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定制嵌入式的Servlet容器相关的规则</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(ConfigurableEmbeddedServletContainer container)</span> </span>&#123;</span><br><span class="line">            container.setPort(<span class="number">8083</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.0以上版本===============</span></span><br><span class="line"> <span class="meta">@Bean</span> <span class="comment">//一定要将这个定制器加入到容器中</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> WebServerFactoryCustomizer&lt;ConfigurableServletWebServerFactory&gt; <span class="title">aa</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> WebServerFactoryCustomizer&lt;ConfigurableServletWebServerFactory&gt;() &#123;<span class="comment">//定制嵌入式的Servlet容器相关的规则</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(ConfigurableServletWebServerFactory server)</span> </span>&#123;</span><br><span class="line">            server.setPort(<span class="number">9000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2）、注册Servlet三大组件【Servlet、Filter、Listener】"><a href="#2）、注册Servlet三大组件【Servlet、Filter、Listener】" class="headerlink" title="2）、注册Servlet三大组件【Servlet、Filter、Listener】"></a>2）、注册Servlet三大组件【Servlet、Filter、Listener】</h3><p>由于SpringBoot默认是以jar包的方式启动嵌入式的Servlet容器来启动SpringBoot的web应用，没有web.xml文件。</p><p>注册三大组件用以下方式</p><p>ServletRegistrationBean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注册三大组件</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">myServlet</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ServletRegistrationBean registrationBean = <span class="keyword">new</span> ServletRegistrationBean(<span class="keyword">new</span> MyServlet(),<span class="string">"/myServlet"</span>);</span><br><span class="line">    <span class="keyword">return</span> registrationBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>FilterRegistrationBean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">myFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">    FilterRegistrationBean registrationBean = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">    registrationBean.setFilter(<span class="keyword">new</span> MyFilter());</span><br><span class="line">    registrationBean.setUrlPatterns(Arrays.asList(<span class="string">"/hello"</span>,<span class="string">"/myServlet"</span>));</span><br><span class="line">    <span class="keyword">return</span> registrationBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ServletListenerRegistrationBean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletListenerRegistrationBean <span class="title">myListener</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ServletListenerRegistrationBean&lt;MyListener&gt; registrationBean = <span class="keyword">new</span> ServletListenerRegistrationBean&lt;&gt;(<span class="keyword">new</span> MyListener());</span><br><span class="line">    <span class="keyword">return</span> registrationBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SpringBoot帮我们自动SpringMVC的时候，自动的注册SpringMVC的前端控制器；DIspatcherServlet；</p><p>DispatcherServletAutoConfiguration中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span>(name = DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME)</span><br><span class="line"><span class="meta">@ConditionalOnBean</span>(value = DispatcherServlet.class, name = DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">dispatcherServletRegistration</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      DispatcherServlet dispatcherServlet)</span> </span>&#123;</span><br><span class="line">   ServletRegistrationBean registration = <span class="keyword">new</span> ServletRegistrationBean(</span><br><span class="line">         dispatcherServlet, <span class="keyword">this</span>.serverProperties.getServletMapping());</span><br><span class="line">    <span class="comment">//默认拦截： /  所有请求；包静态资源，但是不拦截jsp请求；   /*会拦截jsp</span></span><br><span class="line">    <span class="comment">//可以通过server.servletPath来修改SpringMVC前端控制器默认拦截的请求路径</span></span><br><span class="line">    </span><br><span class="line">   registration.setName(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME);</span><br><span class="line">   registration.setLoadOnStartup(</span><br><span class="line">         <span class="keyword">this</span>.webMvcProperties.getServlet().getLoadOnStartup());</span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">this</span>.multipartConfig != <span class="keyword">null</span>) &#123;</span><br><span class="line">      registration.setMultipartConfig(<span class="keyword">this</span>.multipartConfig);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> registration;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2）、SpringBoot能不能支持其他的Servlet容器；</p><h3 id="3）、替换为其他嵌入式Servlet容器"><a href="#3）、替换为其他嵌入式Servlet容器" class="headerlink" title="3）、替换为其他嵌入式Servlet容器"></a>3）、替换为其他嵌入式Servlet容器</h3><p><img src="/2019/10/java-note/springBoot/springBoot/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180302114401.png" alt></p><p>2.0版本</p><p>![](E:\pictures\Language\spring boot\images\configurable继承.png)</p><p>默认支持：</p><p>Tomcat（默认使用）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   引入web模块默认就是使用嵌入式的Tomcat作为Servlet容器；</span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Jetty</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入web模块 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--引入其他的Servlet容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Undertow</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入web模块 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--引入其他的Servlet容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-undertow<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4）、嵌入式Servlet容器自动配置原理；"><a href="#4）、嵌入式Servlet容器自动配置原理；" class="headerlink" title="4）、嵌入式Servlet容器自动配置原理；"></a>4）、嵌入式Servlet容器自动配置原理；</h3><p><strong>2.0springboot的autoConfigure类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(ServerProperties.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmbeddedWebServerFactoryCustomizerAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Nested configuration if Tomcat is being used.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(&#123; Tomcat.class, UpgradeProtocol.class &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TomcatWebServerFactoryCustomizerConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> TomcatWebServerFactoryCustomizer <span class="title">tomcatWebServerFactoryCustomizer</span><span class="params">(Environment environment,</span></span></span><br><span class="line"><span class="function"><span class="params">ServerProperties serverProperties)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> TomcatWebServerFactoryCustomizer(environment, serverProperties);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@AutoConfigureOrder</span>(Ordered.HIGHEST_PRECEDENCE)</span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(ServletRequest.class)</span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span>(type = Type.SERVLET)</span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(ServerProperties.class)</span><br><span class="line"><span class="meta">@Import</span>(&#123; ServletWebServerFactoryAutoConfiguration.BeanPostProcessorsRegistrar.class,</span><br><span class="line">ServletWebServerFactoryConfiguration.EmbeddedTomcat.class,</span><br><span class="line">ServletWebServerFactoryConfiguration.EmbeddedJetty.class,</span><br><span class="line">ServletWebServerFactoryConfiguration.EmbeddedUndertow.class &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletWebServerFactoryAutoConfiguration</span> </span>&#123;</span><br></pre></td></tr></table></figure><p>EmbeddedServletContainerAutoConfiguration：嵌入式的Servlet容器自动配置？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoConfigureOrder</span>(Ordered.HIGHEST_PRECEDENCE)</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span></span><br><span class="line"><span class="meta">@Import</span>(BeanPostProcessorsRegistrar.class)</span><br><span class="line"><span class="comment">//导入BeanPostProcessorsRegistrar：Spring注解版；给容器中导入一些组件</span></span><br><span class="line"><span class="comment">//导入了EmbeddedServletContainerCustomizerBeanPostProcessor：</span></span><br><span class="line"><span class="comment">//后置处理器：bean初始化前后（创建完对象，还没赋值赋值）执行初始化工作</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmbeddedServletContainerAutoConfiguration</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(&#123; Servlet.class, Tomcat.class &#125;)<span class="comment">//判断当前是否引入了Tomcat依赖；</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT)<span class="comment">//判断当前容器没有用户自己定义EmbeddedServletContainerFactory：嵌入式的Servlet容器工厂；作用：创建嵌入式的Servlet容器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EmbeddedTomcat</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> TomcatEmbeddedServletContainerFactory <span class="title">tomcatEmbeddedServletContainerFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> TomcatEmbeddedServletContainerFactory();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Nested configuration if Jetty is being used.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(&#123; Servlet.class, Server.class, Loader.class,</span><br><span class="line">WebAppContext.class &#125;)</span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EmbeddedJetty</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> JettyEmbeddedServletContainerFactory <span class="title">jettyEmbeddedServletContainerFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> JettyEmbeddedServletContainerFactory();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Nested configuration if Undertow is being used.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(&#123; Servlet.class, Undertow.class, SslClientAuthMode.class &#125;)</span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EmbeddedUndertow</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> UndertowEmbeddedServletContainerFactory <span class="title">undertowEmbeddedServletContainerFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> UndertowEmbeddedServletContainerFactory();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1）、EmbeddedServletContainerFactory（嵌入式Servlet容器工厂）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmbeddedServletContainerFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//获取嵌入式的Servlet容器</span></span><br><span class="line">   <span class="function">EmbeddedServletContainer <span class="title">getEmbeddedServletContainer</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">         ServletContextInitializer... initializers)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2019/10/java-note/springBoot/springBoot/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180302144835.png" alt></p><p>2）、EmbeddedServletContainer：（嵌入式的Servlet容器）</p><p><img src="/2019/10/java-note/springBoot/springBoot/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180302144910.png" alt></p><p>3）、以<strong>TomcatEmbeddedServletContainerFactory</strong>为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> EmbeddedServletContainer <span class="title">getEmbeddedServletContainer</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      ServletContextInitializer... initializers)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建一个Tomcat</span></span><br><span class="line">   Tomcat tomcat = <span class="keyword">new</span> Tomcat();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//配置Tomcat的基本环节</span></span><br><span class="line">   File baseDir = (<span class="keyword">this</span>.baseDirectory != <span class="keyword">null</span> ? <span class="keyword">this</span>.baseDirectory</span><br><span class="line">         : createTempDir(<span class="string">"tomcat"</span>));</span><br><span class="line">   tomcat.setBaseDir(baseDir.getAbsolutePath());</span><br><span class="line">   Connector connector = <span class="keyword">new</span> Connector(<span class="keyword">this</span>.protocol);</span><br><span class="line">   tomcat.getService().addConnector(connector);</span><br><span class="line">   customizeConnector(connector);</span><br><span class="line">   tomcat.setConnector(connector);</span><br><span class="line">   tomcat.getHost().setAutoDeploy(<span class="keyword">false</span>);</span><br><span class="line">   configureEngine(tomcat.getEngine());</span><br><span class="line">   <span class="keyword">for</span> (Connector additionalConnector : <span class="keyword">this</span>.additionalTomcatConnectors) &#123;</span><br><span class="line">      tomcat.getService().addConnector(additionalConnector);</span><br><span class="line">   &#125;</span><br><span class="line">   prepareContext(tomcat.getHost(), initializers);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//将配置好的Tomcat传入进去，返回一个EmbeddedServletContainer；并且启动Tomcat服务器</span></span><br><span class="line">   <span class="keyword">return</span> getTomcatEmbeddedServletContainer(tomcat);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4）、我们对嵌入式容器的配置修改是怎么生效？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerProperties、EmbeddedServletContainerCustomizer</span><br></pre></td></tr></table></figure><p><strong>EmbeddedServletContainerCustomizer</strong>：定制器帮我们修改了Servlet容器的配置？</p><p>怎么修改的原理？</p><p>5）、容器中导入了<strong>EmbeddedServletContainerCustomizerBeanPostProcessor</strong></p><p><strong>WebServerFactoryCustomizerBeanPostProcessor</strong>（2.0版本）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化之前</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">    <span class="comment">//如果当前初始化的是一个ConfigurableEmbeddedServletContainer类型的组件</span></span><br><span class="line">   <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> ConfigurableEmbeddedServletContainer) &#123;</span><br><span class="line">       <span class="comment">//</span></span><br><span class="line">      postProcessBeforeInitialization((ConfigurableEmbeddedServletContainer) bean);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postProcessBeforeInitialization</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">ConfigurableEmbeddedServletContainer bean)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取所有的定制器，调用每一个定制器的customize方法来给Servlet容器进行属性赋值；</span></span><br><span class="line">    <span class="keyword">for</span> (EmbeddedServletContainerCustomizer customizer : getCustomizers()) &#123;</span><br><span class="line">        customizer.customize(bean);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Collection&lt;EmbeddedServletContainerCustomizer&gt; <span class="title">getCustomizers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.customizers == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Look up does not include the parent context</span></span><br><span class="line">        <span class="keyword">this</span>.customizers = <span class="keyword">new</span> ArrayList&lt;EmbeddedServletContainerCustomizer&gt;(</span><br><span class="line">            <span class="keyword">this</span>.beanFactory</span><br><span class="line">            <span class="comment">//从容器中获取所有这葛类型的组件：EmbeddedServletContainerCustomizer</span></span><br><span class="line">            <span class="comment">//定制Servlet容器，给容器中可以添加一个EmbeddedServletContainerCustomizer类型的组件</span></span><br><span class="line">            .getBeansOfType(EmbeddedServletContainerCustomizer.class,</span><br><span class="line">                            <span class="keyword">false</span>, <span class="keyword">false</span>)</span><br><span class="line">            .values());</span><br><span class="line">        Collections.sort(<span class="keyword">this</span>.customizers, AnnotationAwareOrderComparator.INSTANCE);</span><br><span class="line">        <span class="keyword">this</span>.customizers = Collections.unmodifiableList(<span class="keyword">this</span>.customizers);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.customizers;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ServerProperties也是定制器</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.0版本</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (bean <span class="keyword">instanceof</span> WebServerFactory) &#123;</span><br><span class="line">postProcessBeforeInitialization((WebServerFactory) bean);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Collection&lt;WebServerFactoryCustomizer&lt;?&gt;&gt; getCustomizers() &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.customizers == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// Look up does not include the parent context</span></span><br><span class="line"><span class="keyword">this</span>.customizers = <span class="keyword">new</span> ArrayList&lt;&gt;(getWebServerFactoryCustomizerBeans());</span><br><span class="line"><span class="keyword">this</span>.customizers.sort(AnnotationAwareOrderComparator.INSTANCE);</span><br><span class="line"><span class="keyword">this</span>.customizers = Collections.unmodifiableList(<span class="keyword">this</span>.customizers);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.customizers;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>步骤：</p><p>1）、SpringBoot根据导入的依赖情况，给容器中添加相应的EmbeddedServletContainerFactory【TomcatEmbeddedServletContainerFactory】</p><p>2）、容器中某个组件要创建对象就会惊动后置处理器；EmbeddedServletContainerCustomizerBeanPostProcessor；</p><p>只要是嵌入式的Servlet容器工厂，后置处理器就工作；</p><p>3）、后置处理器，从容器中获取所有的<strong>EmbeddedServletContainerCustomizer</strong>，调用定制器的定制方法</p><p>###5）、嵌入式Servlet容器启动原理；</p><p>什么时候创建嵌入式的Servlet容器工厂？什么时候获取嵌入式的Servlet容器并启动Tomcat；</p><p>获取嵌入式的Servlet容器工厂：</p><p>1）、SpringBoot应用启动运行run方法</p><p>2）、refreshContext(context);SpringBoot刷新IOC容器【创建IOC容器对象，并初始化容器，创建容器中的每一个组件】；如果是web应用创建<strong>AnnotationConfigEmbeddedWebApplicationContext</strong>，否则：<strong>AnnotationConfigApplicationContext</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringApplication</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> ConfigurableApplicationContext <span class="title">createApplicationContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Class&lt;?&gt; contextClass = <span class="keyword">this</span>.applicationContextClass;</span><br><span class="line"><span class="keyword">if</span> (contextClass == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">switch</span> (<span class="keyword">this</span>.webApplicationType) &#123;</span><br><span class="line"><span class="keyword">case</span> SERVLET:</span><br><span class="line">contextClass = Class.forName(DEFAULT_SERVLET_WEB_CONTEXT_CLASS);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> REACTIVE:</span><br><span class="line">contextClass = Class.forName(DEFAULT_REACTIVE_WEB_CONTEXT_CLASS);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">contextClass = Class.forName(DEFAULT_CONTEXT_CLASS);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line"><span class="string">"Unable create a default ApplicationContext, "</span> + <span class="string">"please specify an ApplicationContextClass"</span>,</span><br><span class="line">ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (ConfigurableApplicationContext) BeanUtils.instantiateClass(contextClass);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3）、refresh(context);<strong>刷新刚才创建好的ioc容器；</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException </span>&#123;</span><br><span class="line">   <span class="keyword">synchronized</span> (<span class="keyword">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line">      <span class="comment">// Prepare this context for refreshing.</span></span><br><span class="line">      prepareRefresh();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Tell the subclass to refresh the internal bean factory.</span></span><br><span class="line">      ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Prepare the bean factory for use in this context.</span></span><br><span class="line">      prepareBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="comment">// Allows post-processing of the bean factory in context subclasses.</span></span><br><span class="line">         postProcessBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Invoke factory processors registered as beans in the context.</span></span><br><span class="line">         invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Register bean processors that intercept bean creation.</span></span><br><span class="line">         registerBeanPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Initialize message source for this context.</span></span><br><span class="line">         initMessageSource();</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Initialize event multicaster for this context.</span></span><br><span class="line">         initApplicationEventMulticaster();</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Initialize other special beans in specific context subclasses.</span></span><br><span class="line">         onRefresh();</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Check for listener beans and register them.</span></span><br><span class="line">         registerListeners();</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Instantiate all remaining (non-lazy-init) singletons.</span></span><br><span class="line">         finishBeanFactoryInitialization(beanFactory);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Last step: publish corresponding event.</span></span><br><span class="line">         finishRefresh();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">         <span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class="line">            logger.warn(<span class="string">"Exception encountered during context initialization - "</span> +</span><br><span class="line">                  <span class="string">"cancelling refresh attempt: "</span> + ex);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Destroy already created singletons to avoid dangling resources.</span></span><br><span class="line">         destroyBeans();</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Reset 'active' flag.</span></span><br><span class="line">         cancelRefresh(ex);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Propagate exception to caller.</span></span><br><span class="line">         <span class="keyword">throw</span> ex;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">finally</span> &#123;</span><br><span class="line">         <span class="comment">// Reset common introspection caches in Spring's core, since we</span></span><br><span class="line">         <span class="comment">// might not ever need metadata for singleton beans anymore...</span></span><br><span class="line">         resetCommonCaches();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4）、  onRefresh(); web的ioc容器重写了onRefresh方法</p><p>5）、webioc容器会创建嵌入式的Servlet容器；<strong>createEmbeddedServletContainer</strong>();</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createWebServer</span><span class="params">()</span><span class="comment">//2.0版本</span></span></span><br></pre></td></tr></table></figure><p><strong>6）、获取嵌入式的Servlet容器工厂：</strong></p><p>EmbeddedServletContainerFactory containerFactory = getEmbeddedServletContainerFactory();</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServletWebServerFactory factory = getWebServerFactory();</span><br></pre></td></tr></table></figure><p>​    从ioc容器中获取EmbeddedServletContainerFactory 组件；<strong>TomcatEmbeddedServletContainerFactory</strong>(TomcatServletWebServerFactory)创建对象，后置处理器一看是这个对象，就获取所有的定制器来先定制Servlet容器的相关配置；</p><p>7）、<strong>使用容器工厂获取嵌入式的Servlet容器</strong>：this.embeddedServletContainer = containerFactory      .getEmbeddedServletContainer(getSelfInitializer());</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.webServer = factory.getWebServer(getSelfInitializer());</span><br></pre></td></tr></table></figure><p>8）、嵌入式的Servlet容器创建对象并启动Servlet容器；</p><p><strong>先启动嵌入式的Servlet容器，再将ioc容器中剩下没有创建出的对象获取出来；</strong></p><p><strong>==IOC容器启动创建嵌入式的Servlet容器==</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractApplicationContext</span> <span class="keyword">extends</span> <span class="title">DefaultResourceLoader</span></span></span><br><span class="line"><span class="class"><span class="keyword">implements</span> <span class="title">ConfigurableApplicationContext</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.onRefresh(); <span class="comment">//创建servlet容器</span></span><br><span class="line"><span class="keyword">this</span>.registerListeners();</span><br><span class="line"><span class="keyword">this</span>.finishBeanFactoryInitialization(beanFactory); <span class="comment">//创建我们自己定义的bean组件</span></span><br></pre></td></tr></table></figure><h2 id="9、使用外置的Servlet容器"><a href="#9、使用外置的Servlet容器" class="headerlink" title="9、使用外置的Servlet容器"></a>9、使用外置的Servlet容器</h2><p>嵌入式Servlet容器：应用打成可执行的jar</p><p>​        优点：简单、便携；</p><p>​        缺点：默认不支持JSP、优化定制比较复杂（使用定制器【ServerProperties、自定义EmbeddedServletContainerCustomizer】，自己编写嵌入式Servlet容器的创建工厂【EmbeddedServletContainerFactory】）；</p><p>外置的Servlet容器：外面安装Tomcat—应用war包的方式打包；</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>1）、必须创建一个war项目；（利用idea创建好目录结构）</p><p>2）、将嵌入式的Tomcat指定为provided；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3）、必须编写一个<strong>SpringBootServletInitializer</strong>的子类，并调用configure方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletInitializer</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder application)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//传入SpringBoot应用的主程序</span></span><br><span class="line">      <span class="keyword">return</span> application.sources(SpringBoot04WebJspApplication.class);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4）、启动服务器就可以使用；</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>jar包：执行SpringBoot主类的main方法，启动ioc容器，创建嵌入式的Servlet容器；</p><p>war包：启动服务器，<strong>服务器启动SpringBoot应用</strong>【SpringBootServletInitializer】，启动ioc容器；</p><p>servlet3.0（Spring注解版）：</p><p>8.2.4 Shared libraries / runtimes pluggability：</p><p>规则：</p><p>​    1）、服务器启动（web应用启动）会创建当前web应用里面每一个jar包里面ServletContainerInitializer实例：</p><p>​    2）、ServletContainerInitializer的实现放在jar包的META-INF/services文件夹下，有一个名为javax.servlet.ServletContainerInitializer的文件，内容就是ServletContainerInitializer的实现类的全类名</p><p>​    3）、还可以使用@HandlesTypes，在应用启动的时候加载我们感兴趣的类；</p><p>流程：</p><p>1）、启动Tomcat</p><p>2）、org\springframework\spring-web\4.3.14.RELEASE\spring-web-4.3.14.RELEASE.jar!\META-INF\services\javax.servlet.ServletContainerInitializer：</p><p>Spring的web模块里面有这个文件：<strong>org.springframework.web.SpringServletContainerInitializer</strong></p><p>![](E:\pictures\Language\spring boot\images\ServletContainerInitializer目录.png)</p><p>3）、SpringServletContainerInitializer将@HandlesTypes(WebApplicationInitializer.class)标注的所有这个类型的类都传入到onStartup方法的Set&lt;Class&lt;?&gt;&gt;；为这些WebApplicationInitializer类型的类创建实例；</p><p>4）、每一个WebApplicationInitializer都调用自己的onStartup；</p><p><img src="/2019/10/java-note/springBoot/springBoot/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180302221835.png" alt></p><p>5）、相当于我们的SpringBootServletInitializer的类会被创建对象，并执行onStartup方法</p><p>6）、SpringBootServletInitializer实例执行onStartup的时候会createRootApplicationContext；创建容器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> WebApplicationContext <span class="title">createRootApplicationContext</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      ServletContext servletContext)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1、创建SpringApplicationBuilder</span></span><br><span class="line">   SpringApplicationBuilder builder = createSpringApplicationBuilder();</span><br><span class="line">   StandardServletEnvironment environment = <span class="keyword">new</span> StandardServletEnvironment();</span><br><span class="line">   environment.initPropertySources(servletContext, <span class="keyword">null</span>);</span><br><span class="line">   builder.environment(environment);</span><br><span class="line">   builder.main(getClass());</span><br><span class="line">   ApplicationContext parent = getExistingRootWebApplicationContext(servletContext);</span><br><span class="line">   <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.logger.info(<span class="string">"Root context already created (using as parent)."</span>);</span><br><span class="line">      servletContext.setAttribute(</span><br><span class="line">            WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, <span class="keyword">null</span>);</span><br><span class="line">      builder.initializers(<span class="keyword">new</span> ParentContextApplicationContextInitializer(parent));</span><br><span class="line">   &#125;</span><br><span class="line">   builder.initializers(</span><br><span class="line">         <span class="keyword">new</span> ServletContextApplicationContextInitializer(servletContext));</span><br><span class="line">   builder.contextClass(AnnotationConfigEmbeddedWebApplicationContext.class);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//调用configure方法，子类重写了这个方法，将SpringBoot的主程序类传入了进来</span></span><br><span class="line">   builder = configure(builder);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//使用builder创建一个Spring应用</span></span><br><span class="line">   SpringApplication application = builder.build();</span><br><span class="line">   <span class="keyword">if</span> (application.getSources().isEmpty() &amp;&amp; AnnotationUtils</span><br><span class="line">         .findAnnotation(getClass(), Configuration.class) != <span class="keyword">null</span>) &#123;</span><br><span class="line">      application.getSources().add(getClass());</span><br><span class="line">   &#125;</span><br><span class="line">   Assert.state(!application.getSources().isEmpty(),</span><br><span class="line">         <span class="string">"No SpringApplication sources have been defined. Either override the "</span></span><br><span class="line">               + <span class="string">"configure method or add an @Configuration annotation"</span>);</span><br><span class="line">   <span class="comment">// Ensure error pages are registered</span></span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">this</span>.registerErrorPageFilter) &#123;</span><br><span class="line">      application.getSources().add(ErrorPageFilterConfiguration.class);</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="comment">//启动Spring应用</span></span><br><span class="line">   <span class="keyword">return</span> run(application);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自己的SpringBootServletInitializer的子类重写了configure方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletInitializer</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder application)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> application.sources(SpringBoot04WebJspApplication.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7）、Spring的应用就启动并且创建IOC容器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">   StopWatch stopWatch = <span class="keyword">new</span> StopWatch();</span><br><span class="line">   stopWatch.start();</span><br><span class="line">   ConfigurableApplicationContext context = <span class="keyword">null</span>;</span><br><span class="line">   FailureAnalyzers analyzers = <span class="keyword">null</span>;</span><br><span class="line">   configureHeadlessProperty();</span><br><span class="line">   SpringApplicationRunListeners listeners = getRunListeners(args);</span><br><span class="line">   listeners.starting();</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      ApplicationArguments applicationArguments = <span class="keyword">new</span> DefaultApplicationArguments(</span><br><span class="line">            args);</span><br><span class="line">      ConfigurableEnvironment environment = prepareEnvironment(listeners,</span><br><span class="line">            applicationArguments);</span><br><span class="line">      Banner printedBanner = printBanner(environment);</span><br><span class="line">      context = createApplicationContext();</span><br><span class="line">      analyzers = <span class="keyword">new</span> FailureAnalyzers(context);</span><br><span class="line">      prepareContext(context, environment, listeners, applicationArguments,</span><br><span class="line">            printedBanner);</span><br><span class="line">       </span><br><span class="line">       <span class="comment">//刷新IOC容器</span></span><br><span class="line">      refreshContext(context);</span><br><span class="line">      afterRefresh(context, applicationArguments);</span><br><span class="line">      listeners.finished(context, <span class="keyword">null</span>);</span><br><span class="line">      stopWatch.stop();</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.logStartupInfo) &#123;</span><br><span class="line">         <span class="keyword">new</span> StartupInfoLogger(<span class="keyword">this</span>.mainApplicationClass)</span><br><span class="line">               .logStarted(getApplicationLog(), stopWatch);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> context;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">      handleRunFailure(context, listeners, analyzers, ex);</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>==启动Servlet容器，再启动SpringBoot应用==</strong></p><h1 id="五、Docker"><a href="#五、Docker" class="headerlink" title="五、Docker"></a>五、Docker</h1><p>详见docker.md</p><h1 id="六-SpringBoot与数据访问"><a href="#六-SpringBoot与数据访问" class="headerlink" title="六.SpringBoot与数据访问"></a>六.SpringBoot与数据访问</h1><h2 id="1、JDBC"><a href="#1、JDBC" class="headerlink" title="1、JDBC"></a>1、JDBC</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    password:</span> <span class="number">123456</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://192.168.15.22:3306/jdbc</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://localhost:3306/yoj?serverTimezone=UTC</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="string">com.mysql.cj.jdbc.Drive</span></span><br><span class="line">    </span><br><span class="line">    <span class="string">Loading</span> <span class="string">class</span> <span class="string">`com.mysql.jdbc.Driver'.</span> <span class="string">This</span> <span class="string">is</span> <span class="string">deprecated.</span> <span class="string">The</span> <span class="string">new</span> <span class="string">driver</span> <span class="string">class</span> <span class="string">is</span> <span class="string">`com.mysql.cj.jdbc.Driver'.</span> <span class="string">The</span> <span class="string">driver</span> <span class="string">is</span> <span class="string">automatically</span> <span class="string">registered</span> <span class="string">via</span> <span class="string">the</span> <span class="string">SPI</span> <span class="string">and</span> <span class="string">manual</span> <span class="string">loading</span> <span class="string">of</span> <span class="string">the</span> <span class="string">driver</span> <span class="string">class</span> <span class="string">is</span> <span class="string">generally</span> <span class="string">unnecessary.</span></span><br></pre></td></tr></table></figure><p>效果：</p><p>​    默认是用org.apache.tomcat.jdbc.pool.DataSource作为数据源；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//class com.zaxxer.hikari.HikariDataSource 2.0版本默认使用</span></span><br></pre></td></tr></table></figure><p>​    数据源的相关配置都在DataSourceProperties里面；</p><p>自动配置原理：</p><p>org.springframework.boot.autoconfigure.jdbc：</p><p>1、参考DataSourceConfiguration，根据配置创建数据源，默认使用Tomcat连接池；可以使用spring.datasource.type指定自定义的数据源类型；</p><p>2、SpringBoot默认可以支持；</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org<span class="selector-class">.apache</span><span class="selector-class">.tomcat</span><span class="selector-class">.jdbc</span><span class="selector-class">.pool</span><span class="selector-class">.DataSource</span>、HikariDataSource、BasicDataSource、</span><br></pre></td></tr></table></figure><p>3、自定义数据源类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Generic DataSource configuration.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(DataSource.class)</span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(name = <span class="string">"spring.datasource.type"</span>)</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Generic</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">(DataSourceProperties properties)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//使用DataSourceBuilder创建数据源，利用反射创建响应type的数据源，并且绑定相关属性</span></span><br><span class="line">      <span class="keyword">return</span> properties.initializeDataSourceBuilder().build();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、<strong>DataSourceInitializer：ApplicationListener</strong>；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DataSourceInitializerInvoker <span class="number">2.0</span>版本还包括了这个类</span><br></pre></td></tr></table></figure><p>​    作用：</p><p>​        1）、runSchemaScripts();运行建表语句；</p><p>​        2）、runDataScripts();运行插入数据的sql语句；</p><p>默认只需要将文件命名为：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">schema-*.sql、data-*.sql</span></span><br><span class="line"><span class="attr">默认规则：schema.sql，schema-all.sql；</span></span><br><span class="line"><span class="meta">可以使用</span>   <span class="string"></span></span><br><span class="line"><span class="attr">schema</span>:<span class="string"></span></span><br><span class="line">      <span class="meta">-</span> <span class="string">classpath:department.sql</span></span><br><span class="line">      <span class="attr">指定位置</span></span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line"><span class="attr">spring</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">datasource</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">username</span>: <span class="string">root</span></span><br><span class="line">    <span class="attr">password</span>: <span class="string">123456</span></span><br><span class="line">    <span class="attr">url</span>: <span class="string">jdbc:mysql://192.168.31.39:3307/jdbc</span></span><br><span class="line">    <span class="meta">driver-class-name</span>: <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="comment">    #DDL</span></span><br><span class="line">    <span class="attr">schema</span>:<span class="string"></span></span><br><span class="line">      <span class="meta">-</span> <span class="string">classpath:department.sql</span></span><br><span class="line"><span class="comment">    #DML</span></span><br><span class="line">    <span class="attr">data</span>:<span class="string"></span></span><br><span class="line">      <span class="meta">-</span> <span class="string">classpath:insert-dept.sql</span></span><br><span class="line"><span class="comment">    #2.0需要开启</span></span><br><span class="line">    <span class="meta">initialization-mode</span>: <span class="string">always</span></span><br></pre></td></tr></table></figure><p>5、操作数据库：自动配置了JdbcTemplate操作数据库</p><h2 id="2、整合Druid数据源"><a href="#2、整合Druid数据源" class="headerlink" title="2、整合Druid数据源"></a>2、整合Druid数据源</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">导入druid数据源</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource"</span>)</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">druid</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span>  <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置Druid的监控</span></span><br><span class="line">    <span class="comment">//1、配置一个管理后台的Servlet</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">statViewServlet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ServletRegistrationBean bean = <span class="keyword">new</span> ServletRegistrationBean(<span class="keyword">new</span> StatViewServlet(), <span class="string">"/druid/*"</span>);</span><br><span class="line">        Map&lt;String,String&gt; initParams = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        initParams.put(<span class="string">"loginUsername"</span>,<span class="string">"admin"</span>);</span><br><span class="line">        initParams.put(<span class="string">"loginPassword"</span>,<span class="string">"123456"</span>);</span><br><span class="line">        initParams.put(<span class="string">"allow"</span>,<span class="string">""</span>);<span class="comment">//默认就是允许所有访问</span></span><br><span class="line">        initParams.put(<span class="string">"deny"</span>,<span class="string">"192.168.15.21"</span>);</span><br><span class="line"></span><br><span class="line">        bean.setInitParameters(initParams);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2、配置一个web监控的filter</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">webStatFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        FilterRegistrationBean bean = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">        bean.setFilter(<span class="keyword">new</span> WebStatFilter());</span><br><span class="line"></span><br><span class="line">        Map&lt;String,String&gt; initParams = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        initParams.put(<span class="string">"exclusions"</span>,<span class="string">"*.js,*.css,/druid/*"</span>);</span><br><span class="line"></span><br><span class="line">        bean.setInitParameters(initParams);</span><br><span class="line"></span><br><span class="line">        bean.setUrlPatterns(Arrays.asList(<span class="string">"/*"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>  bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、整合MyBatis"><a href="#3、整合MyBatis" class="headerlink" title="3、整合MyBatis"></a>3、整合MyBatis</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">#2.0注释</span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2019/10/java-note/springBoot/springBoot/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180305194443.png" alt></p><p>步骤：</p><p>​    1）、配置数据源相关属性（见上一节Druid）</p><p>​    2）、给数据库建表</p><p>​    3）、创建JavaBean</p><h3 id="4）、注解版"><a href="#4）、注解版" class="headerlink" title="4）、注解版"></a>4）、注解版</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指定这是一个操作数据库的mapper</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DepartmentMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from department where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Department <span class="title">getDeptById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete</span>(<span class="string">"delete from department where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteDeptById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"><span class="comment">//声明自增主键，这样就能拿到自增的主键值</span></span><br><span class="line">    <span class="meta">@Options</span>(useGeneratedKeys = <span class="keyword">true</span>,keyProperty = <span class="string">"id"</span>)</span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"insert into department(departmentName) values(#&#123;departmentName&#125;)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insertDept</span><span class="params">(Department department)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update</span>(<span class="string">"update department set departmentName=#&#123;departmentName&#125; where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateDept</span><span class="params">(Department department)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问题：</p><p>自定义MyBatis的配置规则；给容器中添加一个ConfigurationCustomizer；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@org</span>.springframework.context.annotation.Configuration</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ConfigurationCustomizer <span class="title">configurationCustomizer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConfigurationCustomizer()&#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(Configuration configuration)</span> </span>&#123;</span><br><span class="line">                configuration.setMapUnderscoreToCamelCase(<span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用MapperScan批量扫描所有的Mapper接口；</span></span><br><span class="line"><span class="meta">@MapperScan</span>(value = <span class="string">"com.atguigu.springboot.mapper"</span>)</span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBoot06DataMybatisApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(SpringBoot06DataMybatisApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5）、配置文件版"><a href="#5）、配置文件版" class="headerlink" title="5）、配置文件版"></a>5）、配置文件版</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line"><span class="attr">  config-location:</span> <span class="attr">classpath:mybatis/mybatis-config.xml</span> <span class="string">指定全局配置文件的位置</span></span><br><span class="line"><span class="attr">  mapper-locations:</span> <span class="attr">classpath:mybatis/mapper/*.xml</span>  <span class="string">指定sql映射文件的位置</span></span><br></pre></td></tr></table></figure><p>更多使用参照</p><p><a href="http://www.mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/" target="_blank" rel="noopener">http://www.mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/</a></p><h2 id="4、整合SpringData-JPA"><a href="#4、整合SpringData-JPA" class="headerlink" title="4、整合SpringData JPA"></a>4、整合SpringData JPA</h2><h3 id="1）、SpringData简介"><a href="#1）、SpringData简介" class="headerlink" title="1）、SpringData简介"></a>1）、SpringData简介</h3><p><img src="/2019/10/java-note/springBoot/springBoot/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180306105412.png" alt></p><h3 id="2）、整合SpringData-JPA"><a href="#2）、整合SpringData-JPA" class="headerlink" title="2）、整合SpringData JPA"></a>2）、整合SpringData JPA</h3><p>JPA:ORM（Object Relational Mapping）；</p><p>1）、编写一个实体类（bean）和数据表进行映射，并且配置好映射关系；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用JPA注解配置映射关系</span></span><br><span class="line"><span class="meta">@Entity</span> <span class="comment">//告诉JPA这是一个实体类（和数据表映射的类）</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"tbl_user"</span>) <span class="comment">//@Table来指定和哪个数据表对应;如果省略默认表名就是user；</span></span><br><span class="line"><span class="meta">@JsonIgnoreProperties</span>(&#123;<span class="string">"handler"</span>,<span class="string">"hibernateLazyInitializer"</span>&#125;)<span class="comment">//解决json报错</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span> <span class="comment">//这是一个主键</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)<span class="comment">//自增主键</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"last_name"</span>,length = <span class="number">50</span>) <span class="comment">//这是和数据表对应的一个列</span></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="meta">@Column</span> <span class="comment">//省略默认列名就是属性名</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br></pre></td></tr></table></figure><p>2）、编写一个Dao接口来操作实体类对应的数据表（Repository）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//继承JpaRepository来完成对数据库的操作</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>,<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3）、基本的配置JpaProperties</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span>  </span><br><span class="line"><span class="attr"> jpa:</span></span><br><span class="line"><span class="attr">    hibernate:</span></span><br><span class="line"><span class="comment">#     更新或者创建数据表结构</span></span><br><span class="line"><span class="attr">      ddl-auto:</span> <span class="string">update</span></span><br><span class="line"><span class="comment">#    控制台显示SQL</span></span><br><span class="line"><span class="attr">    show-sql:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h1 id="七、启动配置原理"><a href="#七、启动配置原理" class="headerlink" title="七、启动配置原理"></a>七、启动配置原理</h1><p>几个重要的事件回调机制</p><p>配置在META-INF/spring.factories</p><p><strong>ApplicationContextInitializer</strong></p><p><strong>SpringApplicationRunListener</strong></p><p>只需要放在ioc容器中</p><p><strong>ApplicationRunner</strong></p><p><strong>CommandLineRunner</strong></p><p>启动流程：</p><h2 id="1、创建SpringApplication对象"><a href="#1、创建SpringApplication对象" class="headerlink" title="1、创建SpringApplication对象"></a><strong>1、创建SpringApplication对象</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">initialize(sources);</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(Object[] sources)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//保存主配置类</span></span><br><span class="line">    <span class="keyword">if</span> (sources != <span class="keyword">null</span> &amp;&amp; sources.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.sources.addAll(Arrays.asList(sources));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断当前是否一个web应用</span></span><br><span class="line">    <span class="keyword">this</span>.webEnvironment = deduceWebEnvironment();</span><br><span class="line">    <span class="comment">//从类路径下找到META-INF/spring.factories配置的所有ApplicationContextInitializer；然后保存起来</span></span><br><span class="line">    setInitializers((Collection) getSpringFactoriesInstances(</span><br><span class="line">        ApplicationContextInitializer.class));</span><br><span class="line">    <span class="comment">//从类路径下找到ETA-INF/spring.factories配置的所有ApplicationListener</span></span><br><span class="line">    setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));</span><br><span class="line">    <span class="comment">//从多个配置类中找到有main方法的主配置类</span></span><br><span class="line">    <span class="keyword">this</span>.mainApplicationClass = deduceMainApplicationClass();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2019/10/java-note/springBoot/springBoot/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180306145727.png" alt></p><p><img src="/2019/10/java-note/springBoot/springBoot/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180306145855.png" alt></p><h2 id="2、运行run方法"><a href="#2、运行run方法" class="headerlink" title="2、运行run方法"></a>2、运行run方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">   StopWatch stopWatch = <span class="keyword">new</span> StopWatch();</span><br><span class="line">   stopWatch.start();</span><br><span class="line">   ConfigurableApplicationContext context = <span class="keyword">null</span>;</span><br><span class="line">   FailureAnalyzers analyzers = <span class="keyword">null</span>;</span><br><span class="line">   configureHeadlessProperty();</span><br><span class="line">    </span><br><span class="line">   <span class="comment">//获取SpringApplicationRunListeners；从类路径下META-INF/spring.factories</span></span><br><span class="line">   SpringApplicationRunListeners listeners = getRunListeners(args);</span><br><span class="line">    <span class="comment">//回调所有的获取SpringApplicationRunListener.starting()方法</span></span><br><span class="line">   listeners.starting();</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">       <span class="comment">//封装命令行参数</span></span><br><span class="line">      ApplicationArguments applicationArguments = <span class="keyword">new</span> DefaultApplicationArguments(</span><br><span class="line">            args);</span><br><span class="line">      <span class="comment">//准备环境</span></span><br><span class="line">      ConfigurableEnvironment environment = prepareEnvironment(listeners,</span><br><span class="line">            applicationArguments);</span><br><span class="line">       <span class="comment">//创建环境完成后回调SpringApplicationRunListener.environmentPrepared()；表示环境准备完成</span></span><br><span class="line">      </span><br><span class="line">       </span><br><span class="line">       <span class="comment">//打印控制台图标</span></span><br><span class="line">      Banner printedBanner = printBanner(environment);</span><br><span class="line">       </span><br><span class="line">       <span class="comment">//创建ApplicationContext；决定创建web的ioc还是普通的ioc</span></span><br><span class="line">      context = createApplicationContext();</span><br><span class="line">       </span><br><span class="line">      analyzers = <span class="keyword">new</span> FailureAnalyzers(context);</span><br><span class="line">       <span class="comment">//准备上下文环境;将environment保存到ioc中；而且applyInitializers()；</span></span><br><span class="line">       <span class="comment">//applyInitializers()：回调之前保存的所有的ApplicationContextInitializer的initialize方法</span></span><br><span class="line">       <span class="comment">//回调所有的SpringApplicationRunListener的contextPrepared()；</span></span><br><span class="line">       <span class="comment">//</span></span><br><span class="line">      prepareContext(context, environment, listeners, applicationArguments,</span><br><span class="line">            printedBanner);</span><br><span class="line">       <span class="comment">//prepareContext运行完成以后回调所有的SpringApplicationRunListener的contextLoaded（）；</span></span><br><span class="line">       </span><br><span class="line">       <span class="comment">//s刷新容器；ioc容器初始化（如果是web应用还会创建嵌入式的Tomcat）；Spring注解版</span></span><br><span class="line">       <span class="comment">//扫描，创建，加载所有组件的地方；（配置类，组件，自动配置）</span></span><br><span class="line">      refreshContext(context);</span><br><span class="line">       <span class="comment">//从ioc容器中获取所有的ApplicationRunner和CommandLineRunner进行回调</span></span><br><span class="line">       <span class="comment">//ApplicationRunner先回调，CommandLineRunner再回调</span></span><br><span class="line">      afterRefresh(context, applicationArguments);</span><br><span class="line">       <span class="comment">//所有的SpringApplicationRunListener回调finished方法</span></span><br><span class="line">      listeners.finished(context, <span class="keyword">null</span>);</span><br><span class="line">      stopWatch.stop();</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.logStartupInfo) &#123;</span><br><span class="line">         <span class="keyword">new</span> StartupInfoLogger(<span class="keyword">this</span>.mainApplicationClass)</span><br><span class="line">               .logStarted(getApplicationLog(), stopWatch);</span><br><span class="line">      &#125;</span><br><span class="line">       <span class="comment">//整个SpringBoot应用启动完成以后返回启动的ioc容器；</span></span><br><span class="line">      <span class="keyword">return</span> context;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">      handleRunFailure(context, listeners, analyzers, ex);</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、事件监听机制"><a href="#3、事件监听机制" class="headerlink" title="3、事件监听机制"></a>3、事件监听机制</h2><p>配置在META-INF/spring.factories</p><p><strong>ApplicationContextInitializer</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloApplicationContextInitializer</span> <span class="keyword">implements</span> <span class="title">ApplicationContextInitializer</span>&lt;<span class="title">ConfigurableApplicationContext</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(ConfigurableApplicationContext applicationContext)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ApplicationContextInitializer...initialize..."</span>+applicationContext);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>SpringApplicationRunListener</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloSpringApplicationRunListener</span> <span class="keyword">implements</span> <span class="title">SpringApplicationRunListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//必须有的构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HelloSpringApplicationRunListener</span><span class="params">(SpringApplication application, String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">starting</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"SpringApplicationRunListener...starting..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">environmentPrepared</span><span class="params">(ConfigurableEnvironment environment)</span> </span>&#123;</span><br><span class="line">        Object o = environment.getSystemProperties().get(<span class="string">"os.name"</span>);</span><br><span class="line">        System.out.println(<span class="string">"SpringApplicationRunListener...environmentPrepared.."</span>+o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextPrepared</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"SpringApplicationRunListener...contextPrepared..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoaded</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"SpringApplicationRunListener...contextLoaded..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">finished</span><span class="params">(ConfigurableApplicationContext context, Throwable exception)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"SpringApplicationRunListener...finished..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置（META-INF/spring.factories）</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">org.springframework.context.ApplicationContextInitializer</span>=<span class="string">\</span></span><br><span class="line"><span class="attr">com.atguigu.springboot.listener.HelloApplicationContextInitializer</span></span><br><span class="line"></span><br><span class="line"><span class="meta">org.springframework.boot.SpringApplicationRunListener</span>=<span class="string">\</span></span><br><span class="line"><span class="attr">com.atguigu.springboot.listener.HelloSpringApplicationRunListener</span></span><br></pre></td></tr></table></figure><p>只需要放在ioc容器中</p><p><strong>ApplicationRunner</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloApplicationRunner</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ApplicationRunner...run...."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>CommandLineRunner</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloCommandLineRunner</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"CommandLineRunner...run..."</span>+ Arrays.asList(args));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="八、自定义starter"><a href="#八、自定义starter" class="headerlink" title="八、自定义starter"></a>八、自定义starter</h1><p>starter：</p><p>​    1、这个场景需要使用到的依赖是什么？</p><p>​    2、如何编写自动配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>  <span class="comment">//指定这个类是一个配置类</span></span><br><span class="line"><span class="meta">@ConditionalOnXXX</span>  <span class="comment">//在指定条件成立的情况下自动配置类生效</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter</span>  <span class="comment">//指定自动配置类的顺序</span></span><br><span class="line"><span class="meta">@Bean</span>  <span class="comment">//给容器中添加组件</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ConfigurationPropertie</span> <span class="comment">//结合相关xxxProperties类来绑定相关的配置</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span> <span class="comment">//让xxxProperties生效加入到容器中</span></span><br><span class="line"></span><br><span class="line">自动配置类要能加载</span><br><span class="line">将需要启动就加载的自动配置类，配置在META-INF/spring.factories</span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\</span><br></pre></td></tr></table></figure><p>​    3、模式：</p><p>启动器只用来做依赖导入；</p><p>专门来写一个自动配置模块；</p><p>启动器依赖自动配置；别人只需要引入启动器（starter）</p><p>mybatis-spring-boot-starter；自定义启动器名-spring-boot-starter</p><p>步骤：</p><p>1）、启动器模块</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.starter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>atguigu-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--启动器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--引入自动配置模块--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.starter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>atguigu-spring-boot-starter-autoconfigurer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2）、自动配置模块</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.starter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>atguigu-spring-boot-starter-autoconfigurer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>atguigu-spring-boot-starter-autoconfigurer<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!--引入spring-boot-starter；所有starter的基本配置--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.starter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"atguigu.hello"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String prefix;</span><br><span class="line">    <span class="keyword">private</span> String suffix;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPrefix</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> prefix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrefix</span><span class="params">(String prefix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.prefix = prefix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSuffix</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> suffix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSuffix</span><span class="params">(String suffix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.suffix = suffix;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.starter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    HelloProperties helloProperties;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HelloProperties <span class="title">getHelloProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> helloProperties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHelloProperties</span><span class="params">(HelloProperties helloProperties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.helloProperties = helloProperties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHellAtguigu</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> helloProperties.getPrefix()+<span class="string">"-"</span> +name + helloProperties.getSuffix();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.starter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span> <span class="comment">//web应用才生效</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(HelloProperties.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    HelloProperties helloProperties;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HelloService <span class="title">helloService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        HelloService service = <span class="keyword">new</span> HelloService();</span><br><span class="line">        service.setHelloProperties(helloProperties);</span><br><span class="line">        <span class="keyword">return</span> service;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="更多SpringBoot整合示例"><a href="#更多SpringBoot整合示例" class="headerlink" title="更多SpringBoot整合示例"></a>更多SpringBoot整合示例</h1><p><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-samples" target="_blank" rel="noopener">https://github.com/spring-projects/spring-boot/tree/master/spring-boot-samples</a></p><h1 id="Springboot-部署"><a href="#Springboot-部署" class="headerlink" title="Springboot 部署"></a>Springboot 部署</h1><h2 id="jar包-官方推荐"><a href="#jar包-官方推荐" class="headerlink" title="jar包(官方推荐)"></a>jar包(官方推荐)</h2><p>jar包方式启动，也就是使用spring boot内置的tomcat运行。服务器上面只要你配置了jdk1.8及以上，就ok。不需要外置tomcat<br>1.打成jar包</p><p>2.将jar包放到任意目录，执行下面的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> nohup java -jar test.jar &gt;temp.txt &amp;</span></span><br><span class="line">nohup java -jar yoj.jar &gt;yoj.txt &amp;</span><br><span class="line"></span><br><span class="line">ubuntu@VM-0-5-ubuntu:~$ java -Dfile.encoding=utf-8 -jar yoj-0.0.1-SNAPSHOT.jar &gt; yoj.txt &amp;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">java -Dfile.encoding=utf-8 -jar -Dserver.port=8080 xxx.jar</span><br></pre></td></tr></table></figure><p>//这种方法会把日志文件输入到你指定的文件中，没有则会自动创建。进程会在后台运行。</p><h2 id="nohup"><a href="#nohup" class="headerlink" title="nohup"></a>nohup</h2><p>nohup </p><p>命令运行由 Command参数和任何相关的 Arg参数指定的命令，忽略所有挂断（SIGHUP）信号。在注销后使用 nohup 命令运行后台中的程序。要运行后台中的 nohup 命令，添加 &amp; （ 表示“and”的符号）到命令的尾部。</p><p><strong>nohup 是 no hang up 的缩写，就是不挂断的意思。</strong></p><p>nohup命令：</p><p>如果你正在运行一个进程，而且你觉得在退出帐户时该进程还不会结束，那么可以使用nohup命令。该命令可以在你退出帐户/关闭终端之后继续运行相应的进程。</p><p>在缺省情况下该作业的所有输出都被重定向到一个名为nohup.out的文件中。</p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>\1. nohup command &gt; myout.file 2&gt;&amp;1 &amp;   </p><p>在上面的例子中，0 – stdin (standard input)，1 – stdout (standard output)，2 – stderr (standard error) ；</p><p>2&gt;&amp;1是将标准错误（2）重定向到标准输出（&amp;1），标准输出（&amp;1）再被重定向输入到myout.file文件中。</p><p>\2. 0 22 * * * /usr/bin/python /home/pu/download_pdf/download_dfcf_pdf_to_oss.py &gt; /home/pu/download_pdf/download_dfcf_pdf_to_oss.log 2&gt;&amp;1</p><p>这是放在crontab中的定时任务，晚上22点时候怕这个任务，启动这个python的脚本，并把日志写在download_dfcf_pdf_to_oss.log文件中</p><h2 id="服务器注意事项"><a href="#服务器注意事项" class="headerlink" title="服务器注意事项"></a>服务器注意事项</h2><h2 id="1-mysql字符集需要设置为utf-8"><a href="#1-mysql字符集需要设置为utf-8" class="headerlink" title="1.mysql字符集需要设置为utf-8"></a>1.mysql字符集需要设置为utf-8</h2><h2 id="2-spring-boot-的control"><a href="#2-spring-boot-的control" class="headerlink" title="2.spring boot 的control"></a>2.spring boot 的control</h2><p>==@RequestMapping<strong>字符串必须由“/”开始</strong>==</p><p><strong>不然本地能访问，但是服务器不能访问</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/set/&#123;pageNumber&#125;"</span>)</span><br></pre></td></tr></table></figure><p><strong>return 不能加斜杆 return “problem/set”;</strong></p><h1 id="spring-boot-加密"><a href="#spring-boot-加密" class="headerlink" title="spring boot 加密"></a>spring boot 加密</h1><h2 id="导入jar包"><a href="#导入jar包" class="headerlink" title="导入jar包"></a>导入jar包</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.github.ulisesbocchio/jasypt-spring-boot-starter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.ulisesbocchio<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jasypt-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>jasypt.encryptor. password: 加密密码的字符串</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jasypt:</span></span><br><span class="line"><span class="attr">  encryptor:</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">lmz</span></span><br><span class="line"><span class="comment">#配置数据源</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://localhost:3306/yoj?serverTimezone=UTC</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure><p>编写测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yoj;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.jasypt.encryption.StringEncryptor;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncryptTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    StringEncryptor encryptor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String userName = encryptor.encrypt(<span class="string">"root"</span>);</span><br><span class="line">        System.out.println(userName);</span><br><span class="line">        String password = encryptor.encrypt(<span class="string">"123456"</span>);</span><br><span class="line">        System.out.println(password);</span><br><span class="line">        String originUserName = encryptor.decrypt(<span class="string">"2IL6K8NI+eUHYpu8AsfB7Q=="</span>);</span><br><span class="line">        System.out.println(originUserName);</span><br><span class="line">        String originPassword = encryptor.decrypt(<span class="string">"+u6jN11/Ykzl5kHU0rg2Ew=="</span>);</span><br><span class="line">        System.out.println(originPassword);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将得到的加密串，写到数据库配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jasypt:</span></span><br><span class="line"><span class="attr">  encryptor:</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">lmz</span></span><br><span class="line"><span class="comment">#配置数据源</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://localhost:3306/yoj?serverTimezone=UTC</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">ENC(&#123;2IL6K8NI+eUHYpu8AsfB7Q==&#125;)</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">NEC(&#123;vojGG7u7QZ3mN1DsX1gA1g==&#125;)</span></span><br></pre></td></tr></table></figure><h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><h2 id="test测试插入，数据并没有保存到数据库"><a href="#test测试插入，数据并没有保存到数据库" class="headerlink" title="test测试插入，数据并没有保存到数据库"></a>test测试插入，数据并没有保存到数据库</h2><p>使用junit测试插入，测试显示成功，但是数据并没有保存到数据库。是因为在junit下，插入数据会自动回滚，所以测试显示成功但实际上不能插入。若要插入到数据库，只需在测试方法上添加@Rollback(false)注解即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、Spring-Boot-入门&quot;&gt;&lt;a href=&quot;#一、Spring-Boot-入门&quot; class=&quot;headerlink&quot; title=&quot;一、Spring Boot 入门&quot;&gt;&lt;/a&gt;&lt;strong&gt;一、&lt;/strong&gt;Spring Boot 入门&lt;/h1&gt;&lt;h2 id=&quot;1、Spring-Boot-简介&quot;&gt;&lt;a href=&quot;#1、Spring-Boot-简介&quot; class=&quot;headerlink&quot; title=&quot;1、Spring Boot 简介&quot;&gt;&lt;/a&gt;1、Spring Boot 简介&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;简化Spring应用开发的一个框架；&lt;br&gt;整个Spring技术栈的一个大整合；&lt;br&gt;J2EE开发的一站式解决方案；&lt;/p&gt;
&lt;/blockquote&gt;&lt;h2 id=&quot;2、微服务&quot;&gt;&lt;a href=&quot;#2、微服务&quot; class=&quot;headerlink&quot; title=&quot;2、微服务&quot;&gt;&lt;/a&gt;2、微服务&lt;/h2&gt;&lt;p&gt;2014，martin fowler&lt;/p&gt;&lt;p&gt;微服务：架构风格（服务微化）&lt;/p&gt;&lt;p&gt;一个应用应该是一组小型服务；可以通过HTTP的方式进行互通；&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://codeofli.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://codeofli.github.io/tags/java/"/>
    
      <category term="springBoot" scheme="https://codeofli.github.io/tags/springBoot/"/>
    
  </entry>
  
  <entry>
    <title>python-crawler</title>
    <link href="https://codeofli.github.io/2019/10/python/python-crawler/python-crawler/"/>
    <id>https://codeofli.github.io/2019/10/python/python-crawler/python-crawler/</id>
    <published>2019-10-16T13:27:10.000Z</published>
    <updated>2019-11-13T12:20:22.616Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2019/10/python/python-crawler/python-crawler/1572765034346.png" alt="1572765034346"></p><h1 id="requests库"><a href="#requests库" class="headerlink" title="requests库"></a>requests库</h1><h2 id="requests库的安装"><a href="#requests库的安装" class="headerlink" title="requests库的安装"></a>requests库的安装</h2><p><a href="http://www.python-requests.org" target="_blank" rel="noopener">http://www.python-requests.org</a> </p><p>Win平台: “以管理员身份运行” cmd，执行 pip install requests </p><h2 id="requests库的7个主要方法"><a href="#requests库的7个主要方法" class="headerlink" title="requests库的7个主要方法"></a>requests库的7个主要方法</h2><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>requests.request()</td><td><strong>构造一个请求，支撑以下各方法的基础方法</strong></td></tr><tr><td>requests.get(url, params=None, **kwargs)</td><td>获取HTML网页的主要方法，对应于HTTP的GET</td></tr><tr><td>requests.head(url, **kwargs)</td><td>获取HTML网页头信息的方法，对应于HTTP的HEAD</td></tr><tr><td>requests.post(url, data=None, json=None, **kwargs)</td><td>向HTML网页提交POST请求的方法，对应于HTTP的POST</td></tr><tr><td>requests.put(url, data=None, **kwargs)</td><td>向HTML网页提交PUT请求的方法，对应于HTTP的PUT</td></tr><tr><td>requests.patch(url, data=None, **kwargs)</td><td>向HTML网页提交局部修改请求，对应于HTTP的PATCH</td></tr><tr><td>requests.delete(url, **kwargs)</td><td>向HTML页面提交删除请求，对应于HTTP的DELETE</td></tr></tbody></table><a id="more"></a><p><strong>requests库的get方法：</strong></p><p><img src="/2019/10/python/python-crawler/python-crawler/1572765660053.png" alt="1572765660053"></p><p><strong>requests.get(url, params=None, kwargs)</strong><br>∙ url : 拟获取页面的url链接<br>∙ params : url中的额外参数，字典或字节流格式，可选<br>∙ kwargs: 12个控制访问的参数 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(url, params=None, **kwargs)</span>:</span></span><br><span class="line">    <span class="string">r"""Sends a GET request.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param url: URL for the new :class:`Request` object.</span></span><br><span class="line"><span class="string">    :param params: (optional) Dictionary or bytes to be sent in the query string for the :class:`Request`.</span></span><br><span class="line"><span class="string">    :param \*\*kwargs: Optional arguments that ``request`` takes.</span></span><br><span class="line"><span class="string">    :return: :class:`Response &lt;Response&gt;` object</span></span><br><span class="line"><span class="string">    :rtype: requests.Response</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    kwargs.setdefault(<span class="string">'allow_redirects'</span>, <span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">return</span> request(<span class="string">'get'</span>, url, params=params, **kwargs)</span><br></pre></td></tr></table></figure><h3 id="主要方法解析"><a href="#主要方法解析" class="headerlink" title="主要方法解析"></a>主要方法解析</h3><p><strong>requests.request(method, url, kwargs)</strong><br>∙ method : 请求方式，对应get/put/post等7种<br>∙ url : 拟获取页面的url链接<br>∙ kwargs: 控制访问的参数，共13个 </p><p><strong>method : 请求方式</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">r = requests.request(<span class="string">'GET'</span>, url, **kwargs)</span><br><span class="line">r = requests.request(<span class="string">'HEAD'</span>, url, **kwargs)</span><br><span class="line">r = requests.request(<span class="string">'POST'</span>, url, **kwargs)</span><br><span class="line">r = requests.request(<span class="string">'PUT'</span>, url, **kwargs)</span><br><span class="line">r = requests.request(<span class="string">'PATCH'</span>, url, **kwargs)</span><br><span class="line">r = requests.request(<span class="string">'delete'</span>, url, **kwargs)</span><br><span class="line">r = requests.request(<span class="string">'OPTIONS'</span>, url, **kwargs)</span><br></pre></td></tr></table></figure><p><strong>\</strong>kwargs: 控制访问的参数，均为可选项**<br>params : 字典或字节序列，作为参数增加到url中<br>data : 字典、字节序列或文件对象，作为Request的内容 </p><table><thead><tr><th>json</th><th>: JSON格式的数据，作为Request的内容</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>headers : 字典， HTTP定制头 </p><table><thead><tr><th>cookies : 字典或CookieJar， Request中的cookie</th><th></th></tr></thead><tbody><tr><td>auth</td><td>: 元组，支持HTTP认证功能</td></tr></tbody></table><p>files : 字典类型，传输文件 </p><p>timeout : 设定超时时间，秒为单位 </p><p>proxies : 字典类型，设定访问代理服务器，可以增加登录认证 </p><p>allow_redirects : True/False，默认为True，重定向开关<br>stream : True/False，默认为True，获取内容立即下载开关<br>verify : True/False，默认为True，认证SSL证书开关<br>cert : 本地SSL证书路径 </p><h2 id="Response对象"><a href="#Response对象" class="headerlink" title="Response对象"></a>Response对象</h2><p>Response对象包含服务器返回的所有信息，<strong>也包含请求的Request信息</strong> </p><p><strong>Response 对象的属性</strong></p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>r.status_code</td><td>HTTP请求的返回状态， 200表示连接成功， 404表示失败</td></tr><tr><td>r.text</td><td>HTTP响应内容的字符串形式，即， url对应的页面内容</td></tr><tr><td>r.encoding</td><td>从HTTP header中猜测的响应内容编码方式</td></tr><tr><td>r.apparent_encoding</td><td>从内容中分析出的响应内容编码方式（备选编码方式）</td></tr><tr><td>r.content</td><td>HTTP响应内容的二进制形式</td></tr></tbody></table><p><strong>Response的编码</strong></p><table><thead><tr><th>r.encoding</th><th>从HTTP header中猜测的响应内容编码方式</th></tr></thead><tbody><tr><td><strong>r.apparent_encoding</strong></td><td><strong>从内容中分析出的响应内容编码方式（备选编码方式）</strong></td></tr></tbody></table><p>r.encoding：如果header中不存在charset，则认为编码为ISO‐8859‐1<br>r.text根据r.encoding显示网页内容<br>r.apparent_encoding ：根据网页内容分析出的编码方式<br>可以看作是r.encoding的备选 </p><h2 id="request库的异常"><a href="#request库的异常" class="headerlink" title="request库的异常"></a>request库的异常</h2><table><thead><tr><th>异常</th><th>说明</th></tr></thead><tbody><tr><td>requests.ConnectionError</td><td>网络连接错误异常，如DNS查询失败、拒绝连接等</td></tr><tr><td>requests.HTTPError</td><td>HTTP错误异常</td></tr><tr><td>requests.URLRequired</td><td>URL缺失异常</td></tr><tr><td>requests.TooManyRedirects</td><td>超过最大重定向次数，产生重定向异常</td></tr><tr><td>requests.ConnectTimeout</td><td>连接远程服务器超时异常</td></tr><tr><td>requests.Timeout</td><td>请求URL超时，产生超时异常</td></tr><tr><td><strong>r.raise_for_status()</strong></td><td><strong>如果不是200，产生异常 requests.HTTPError</strong></td></tr></tbody></table><p><strong>r.raise_for_status()在方法内部判断r.status_code是否等于200</strong>，不需要<br>增加额外的if语句，该语句便于利用try‐except进行异常处理 </p><h2 id="爬取网页通用的代码-块-框架"><a href="#爬取网页通用的代码-块-框架" class="headerlink" title="爬取网页通用的代码(块)框架"></a>爬取网页通用的代码(块)框架</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHTMLText</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.get(url)</span><br><span class="line">        r.raise_for_status()</span><br><span class="line">        r.encoding = r.apparent_encoding</span><br><span class="line">        <span class="keyword">return</span> r.text</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'processing exception'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    url = <span class="string">'https://www.baidu.com/'</span></span><br><span class="line">    print(getHTMLText(url))</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">'https://www.baidu.com/'</span>)</span><br><span class="line">print(type(response))</span><br></pre></td></tr></table></figure><h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><p>HTTP， Hypertext Transfer Protocol，超文本传输协议<br>HTTP是一个基于“请求与响应”模式的、无状态的应用层协议<br>HTTP协议采用URL作为定位网络资源的标识， URL格式如下：<br><code>http://host[:port][path]</code><br>host: 合法的Internet主机域名或IP地址<br>port: 端口号，缺省端口为80<br>path: 请求资源的路径 </p><p>HTTP URL的理解：<br>URL是通过HTTP协议存取资源的Internet路径，<strong>一个URL对应一个数据资源</strong> </p><h3 id="http协议对资源的操作"><a href="#http协议对资源的操作" class="headerlink" title="http协议对资源的操作"></a>http协议对资源的操作</h3><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>GET</td><td>请求获取URL位置的资源</td></tr><tr><td>HEAD</td><td>请求获取URL位置资源的响应消息报告，即获得该资源的头部信息</td></tr><tr><td>POST</td><td>请求向URL位置的资源后附加新的数据</td></tr><tr><td>PUT</td><td>请求向URL位置存储一个资源，覆盖原URL位置的资源</td></tr><tr><td>PATCH</td><td>请求局部更新URL位置的资源，即改变该处资源的部分内容</td></tr><tr><td>DELETE</td><td>请求删除URL位置存储的资源</td></tr></tbody></table><h3 id="理解patch和put的区别"><a href="#理解patch和put的区别" class="headerlink" title="理解patch和put的区别"></a>理解patch和put的区别</h3><p>假设URL位置有一组数据UserInfo，包括UserID、 UserName等20个字段<br>需求：用户修改了UserName，其他不变<br>• 采用PATCH，仅向URL提交UserName的局部更新请求<br>• 采用PUT，必须将所有20个字段一并提交到URL，未提交字段被删除<br>PATCH的最主要好处：节省网络带宽 </p><h3 id="http协议与requests库"><a href="#http协议与requests库" class="headerlink" title="http协议与requests库"></a>http协议与requests库</h3><table><thead><tr><th>TTP协议方法</th><th>Requests库方法</th><th>功能一致性</th></tr></thead><tbody><tr><td>GET</td><td>requests.get()</td><td>一致</td></tr><tr><td>HEAD</td><td>requests.head()</td><td>一致</td></tr><tr><td>POST</td><td>requests.post()</td><td>一致</td></tr><tr><td>PUT</td><td>requests.put()</td><td>一致</td></tr><tr><td>PATCH</td><td>requests.patch()</td><td>一致</td></tr><tr><td>DELETE</td><td>requests.delete()</td><td>一致</td></tr></tbody></table><h2 id="Requests库网络爬取实战"><a href="#Requests库网络爬取实战" class="headerlink" title="Requests库网络爬取实战"></a>Requests库网络爬取实战</h2><p>实例2：亚马逊商品页面的爬取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">'https://item.jd.com/2967929.html'</span></span><br><span class="line">kv = &#123;<span class="string">'user-agent'</span>:<span class="string">'Mozilla/5.0'</span>&#125;</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    r = requests.get(url,headers=kv)</span><br><span class="line">    r.raise_for_status()</span><br><span class="line">    r.encoding = r.apparent_encoding</span><br><span class="line">    print(r.status_code)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="string">'processing exception'</span></span><br></pre></td></tr></table></figure><p>实例3：百度/360搜索关键字提交</p><p>百度的关键词接口：<br><a href="http://www.baidu.com/s?wd=keyword" target="_blank" rel="noopener">http://www.baidu.com/s?wd=keyword</a> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># https://item.jd.com/2967929.html</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">'http://www.baidu.com/s'</span></span><br><span class="line">kv = &#123;<span class="string">'wd'</span>:<span class="string">'python'</span>&#125;</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    r = requests.get(url,params=kv)</span><br><span class="line">    r.raise_for_status()</span><br><span class="line">    r.encoding = r.apparent_encoding</span><br><span class="line">    print(len(r.text))</span><br><span class="line">    print(r.status_code)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="string">'processing exception'</span></span><br></pre></td></tr></table></figure><p>实例4：网络图片的爬取和存储</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests,os</span><br><span class="line">url = <span class="string">'http://image.nationalgeographic.com.cn/2017/0211/20170211061910157.jpg'</span></span><br><span class="line">root = <span class="string">'E://img//'</span></span><br><span class="line">path = root + url.split(<span class="string">'/'</span>)[<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(root):</span><br><span class="line">        os.mkdir(root)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path):</span><br><span class="line">        r = requests.get(url)</span><br><span class="line">        r.raise_for_status()</span><br><span class="line">        <span class="keyword">with</span> open(path,<span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(r.content)</span><br><span class="line">            f.close()</span><br><span class="line">            print(<span class="string">'save file successfully'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'file exist'</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="string">'processing exception'</span></span><br></pre></td></tr></table></figure><h1 id="网络爬虫的相关问题"><a href="#网络爬虫的相关问题" class="headerlink" title="网络爬虫的相关问题"></a>网络爬虫的相关问题</h1><p><img src="/2019/10/python/python-crawler/python-crawler/1572769291542.png" alt="1572769291542"></p><h2 id="网络爬虫的限制"><a href="#网络爬虫的限制" class="headerlink" title="网络爬虫的限制"></a>网络爬虫的限制</h2><p>来源审查：判断User‐Agent进行限制<br>检查来访HTTP协议头的User‐Agent域，只响应浏览器或友好爬虫的访问<br>• 发布公告： Robots协议<br>告知所有爬虫网站的爬取策略，要求爬虫遵守 </p><h2 id="Robots协议"><a href="#Robots协议" class="headerlink" title="Robots协议"></a>Robots协议</h2><p>Robots Exclusion Standard，网络爬虫排除标准 </p><p>作用：<br>网站告知网络爬虫哪些页面可以抓取，哪些不行<br>形式：<br>在网站根目录下的robots.txt文件 </p><p><img src="/2019/10/python/python-crawler/python-crawler/1572769583876.png" alt="1572769583876"></p><p><a href="http://www.baidu.com/robots.txt" target="_blank" rel="noopener">http://www.baidu.com/robots.txt</a><br><a href="http://news.sina.com.cn/robots.txt" target="_blank" rel="noopener">http://news.sina.com.cn/robots.txt</a><br><a href="http://www.qq.com/robots.txt" target="_blank" rel="noopener">http://www.qq.com/robots.txt</a><br><a href="http://news.qq.com/robots.txt" target="_blank" rel="noopener">http://news.qq.com/robots.txt</a><br><a href="http://www.moe.edu.cn/robots.txt" target="_blank" rel="noopener">http://www.moe.edu.cn/robots.txt</a> （无robots协议） </p><h3 id="Robots协议使用"><a href="#Robots协议使用" class="headerlink" title="Robots协议使用"></a>Robots协议使用</h3><p>网络爬虫：<br>自动或人工识别robots.txt，再进行内容爬取<br>约束性：<br>Robots协议是建议但非约束性，网络爬虫可以不遵守，但存在法律风险 </p><p><img src="/2019/10/python/python-crawler/python-crawler/1572782147476.png" alt="1572782147476"></p><h1 id="beautifulSoup库"><a href="#beautifulSoup库" class="headerlink" title="beautifulSoup库"></a>beautifulSoup库</h1><p><a href="https://www.crummy.com/software/BeautifulSoup/" target="_blank" rel="noopener">https://www.crummy.com/software/BeautifulSoup/</a> </p><p><a href="https://beautifulsoup.readthedocs.io/zh_CN/v4.4.0/" target="_blank" rel="noopener">https://beautifulsoup.readthedocs.io/zh_CN/v4.4.0/</a></p><p><a href="http://www.crummy.com/software/BeautifulSoup/" target="_blank" rel="noopener">Beautiful Soup</a> 是一个可以从<strong>HTML或XML文件中提取数据</strong>的Python库.</p><p>安装</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install beautifulsoup4</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">html_doc = <span class="string">"""</span></span><br><span class="line"><span class="string">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse's story&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;p class="title"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;p class="story"&gt;Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string">&lt;a href="http://example.com/elsie" class="sister" id="link1"&gt;Elsie&lt;/a&gt;,</span></span><br><span class="line"><span class="string">&lt;a href="http://example.com/lacie" class="sister" id="link2"&gt;Lacie&lt;/a&gt; and</span></span><br><span class="line"><span class="string">&lt;a href="http://example.com/tillie" class="sister" id="link3"&gt;Tillie&lt;/a&gt;;</span></span><br><span class="line"><span class="string">and they lived at the bottom of a well.&lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;p class="story"&gt;...&lt;/p&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">soup = BeautifulSoup(html_doc, <span class="string">'html.parser'</span>)</span><br><span class="line">print(soup.prettify())</span><br></pre></td></tr></table></figure><h2 id="Beautiful-Soup库解析器"><a href="#Beautiful-Soup库解析器" class="headerlink" title="Beautiful Soup库解析器"></a>Beautiful Soup库解析器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">soup = BeautifulSoup(<span class="string">'&lt;html&gt;data&lt;/html&gt;'</span>， <span class="string">'html.parser'</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th>解析器</th><th>使用方法</th><th>条件</th></tr></thead><tbody><tr><td>bs4的HTML解析器</td><td>BeautifulSoup(mk,’html.parser’)</td><td>安装bs4库</td></tr><tr><td>lxml的LXML解析器</td><td>BeautifulSoup(mk,’lxml’)</td><td>pip install lxml</td></tr><tr><td>lxml的XML解析器</td><td>BeautifulSoup(mk,’xml’)</td><td>pip install lxml</td></tr><tr><td>html5lib的解析器</td><td>BeautifulSoup(mk,’html5lib’)</td><td>pip install html5lib</td></tr></tbody></table><p>BeautifulSoup类的基本元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span> … <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>基本元素</th><th>说明</th></tr></thead><tbody><tr><td>Tag</td><td>标签，最基本的信息组织单元，分别用&lt;&gt;和&lt;/&gt;标明开头和结尾</td></tr><tr><td>Name</td><td>标签的名字， <p>…</p>的名字是’p’，格式： <tag>.name</tag></td></tr><tr><td>Attributes</td><td>标签的属性，字典形式组织，格式： <tag>.attrs</tag></td></tr><tr><td>NavigableString</td><td>标签内非属性字符串， &lt;&gt;…&lt;/&gt;中字符串，格式： <tag>.string</tag></td></tr><tr><td>Comment</td><td>标签内字符串的注释部分，一种特殊的Comment类型</td></tr></tbody></table><p>Tag 标签</p><table><thead><tr><th>基本元素</th><th>说明</th></tr></thead><tbody><tr><td>Tag</td><td>标签，最基本的信息组织单元，分别用&lt;&gt;和&lt;/&gt;标明开头和结尾</td></tr><tr><td>Name</td><td>标签的名字， <p>…</p>的名字是’p’，格式： <tag>.name</tag></td></tr><tr><td>Attributes</td><td>标签的属性，字典形式组织，格式： <tag>.attrs</tag></td></tr><tr><td>NavigableString</td><td>标签内非属性字符串， &lt;&gt;…&lt;/&gt;中字符串，格式： <tag>.string</tag></td></tr><tr><td>Comment</td><td>标签内字符串的注释部分，一种特殊的Comment类型</td></tr></tbody></table><p>任何存在于HTML语法中的标签都可以用soup.&lt;tag&gt;访问获得<br>当HTML文档中存在多个相同&lt;tag&gt;对应内容时， soup.&lt;tag&gt;返回第一个 </p><h2 id="基于bs4库的HTML内容遍历方法"><a href="#基于bs4库的HTML内容遍历方法" class="headerlink" title="基于bs4库的HTML内容遍历方法"></a>基于bs4库的HTML内容遍历方法</h2><p><img src="/2019/10/python/python-crawler/python-crawler/1572792704763.png" alt="1572792704763"></p><h3 id="标签树的下行遍历"><a href="#标签树的下行遍历" class="headerlink" title="标签树的下行遍历"></a>标签树的下行遍历</h3><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>.contents</td><td>子节点的列表，将<tag>所有儿子节点存入列表</tag></td></tr><tr><td>.children</td><td>子节点的迭代类型，与.contents类似，用于循环遍历儿子节点</td></tr><tr><td>.descendants</td><td>子孙节点的迭代类型，包含所有子孙节点，用于循环遍历</td></tr></tbody></table><p><strong>BeautifulSoup类型是标签树的根节点</strong></p><p>标签树的下行遍历</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> child <span class="keyword">in</span> soup.body.children:</span><br><span class="line">print(child) 遍历儿子节点</span><br><span class="line"><span class="keyword">for</span> child <span class="keyword">in</span> soup.body.descendants:</span><br><span class="line">print(child) 遍历子孙节点</span><br></pre></td></tr></table></figure><p>标签树的上行遍历</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>.parent</td><td>节点的父亲标签</td></tr><tr><td>.parents</td><td>节点先辈标签的迭代类型，用于循环遍历先辈节点</td></tr></tbody></table><p>标签树的上行遍历</p><p><img src="/2019/10/python/python-crawler/python-crawler/1572792910480.png" alt="1572792910480"></p><p>遍历所有先辈节点，包括soup本身，所以要区别判断 </p><h3 id="标签树的平行遍历"><a href="#标签树的平行遍历" class="headerlink" title="标签树的平行遍历"></a>标签树的平行遍历</h3><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>.next_sibling</td><td>返回按照HTML文本顺序的下一个平行节点标签</td></tr><tr><td>.previous_sibling</td><td>返回按照HTML文本顺序的上一个平行节点标签</td></tr><tr><td>.next_siblings</td><td>迭代类型，返回按照HTML文本顺序的后续所有平行节点标签</td></tr><tr><td>.previous_siblings</td><td>迭代类型，返回按照HTML文本顺序的前续所有平行节点标签</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">标签树的平行遍历</span><br><span class="line"><span class="keyword">for</span> sibling <span class="keyword">in</span> soup.a.next_sibling:</span><br><span class="line">print(sibling)</span><br><span class="line"><span class="keyword">for</span> sibling <span class="keyword">in</span> soup.a.previous_sibling:</span><br><span class="line">print(sibling)</span><br><span class="line">遍历后续节点</span><br><span class="line">遍历前续节点</span><br></pre></td></tr></table></figure><p><img src="/2019/10/python/python-crawler/python-crawler/1572793042916.png" alt="1572793042916"></p><h1 id="信息标记和提取方法"><a href="#信息标记和提取方法" class="headerlink" title="信息标记和提取方法"></a>信息标记和提取方法</h1><h2 id="信息标记"><a href="#信息标记" class="headerlink" title="信息标记"></a>信息标记</h2><p>标记后的信息可形成信息组织结构，增加了信息维度<br>标记的结构与信息一样具有重要价值<br>标记后的信息可用于通信、存储或展示<br>标记后的信息更利于程序理解和运用 </p><h2 id="信息标记的三种信息"><a href="#信息标记的三种信息" class="headerlink" title="信息标记的三种信息"></a>信息标记的三种信息</h2><p>xml，json，yaml</p><h3 id="html的信息标记"><a href="#html的信息标记" class="headerlink" title="html的信息标记"></a>html的信息标记</h3><p>HTML是WWW(World Wide Web)的信息组织方式 </p><p>HTML通过预定义的&lt;&gt;…&lt;/&gt;标签形式组织不同类型的信息 </p><p><strong>xml</strong></p><p>eXtensible Markup Language </p><p><img src="/2019/10/python/python-crawler/python-crawler/1572875687746.png" alt="1572875687746"></p><p>空元素的缩写形式 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">“china.jpg”</span> <span class="attr">size</span>=<span class="string">“10”</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>注释书写形式 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">!‐‐</span> <span class="attr">This</span> <span class="attr">is</span> <span class="attr">a</span> <span class="attr">comment</span>, <span class="attr">very</span> <span class="attr">useful</span> ‐‐&gt;</span></span><br></pre></td></tr></table></figure><p><strong>json</strong></p><p>JavsScript Object Notation<br>有类型的键值对 key:value </p><p>yaml</p><p>YAML Ain’t Markup Language<br>无类型键值对 key:value </p><p><img src="/2019/10/python/python-crawler/python-crawler/1572875843651.png" alt="1572875843651"></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">缩进表达所属关系</span></span><br><span class="line"><span class="string">name</span> <span class="string">:</span></span><br><span class="line">    <span class="string">newName</span> <span class="string">:</span> <span class="string">北京理工大学</span></span><br><span class="line">    <span class="string">oldName</span> <span class="string">:</span> <span class="string">延安自然科学院</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">‐</span> <span class="string">表达并列关系</span></span><br><span class="line"><span class="string">name</span> <span class="string">:</span></span><br><span class="line"><span class="string">‐北京理工大学</span></span><br><span class="line"><span class="string">‐延安自然科学院</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">| 表达整块数据 # 表示注释</span></span><br><span class="line"><span class="string"></span><span class="attr">text:</span> <span class="string">| #学校介绍</span></span><br><span class="line"><span class="string">北京理工大学创立于1940年，前身是延安自然科学院， 是中国共产党创办的第一所理工科大学，毛泽东同志亲</span></span><br><span class="line"><span class="string">自题写校名，李富春、徐特立、李强等老一辈无产阶级革命家先后担任学校主要领导。学校是新中国成立以来</span></span><br><span class="line"><span class="string">国家历批次重点建设的高校，首批进入国家“211工程”和“985工程”建设行列；在全球具有广泛影响力的英</span></span><br><span class="line"><span class="string">国QS“世界大学500强”中，位列入选的中国大陆高校第15位。学校现隶属于工业和信息化部。</span></span><br></pre></td></tr></table></figure><p>XML<br>JSON<br>YAML<br>最早的通用信息标记语言，可扩展性好，但繁琐<br>信息有类型，适合程序处理(js)，较XML简洁<br>信息无类型，文本信息比例最高，可读性好 </p><p>XML<br>JSON<br>YAML<br>Internet上的信息交互与传递<br>移动应用云端和节点的信息通信，无注释<br>各类系统的配置文件，有注释易读</p><h2 id="信息提取"><a href="#信息提取" class="headerlink" title="信息提取"></a>信息提取</h2><p>融合方法：结合形式解析与搜索方法，提取关键信息<br>XML JSON YAML 搜索<br>需要标记解析器及文本查找函数 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">r =requests.get(<span class="string">'http://python123.io/ws/demo.html'</span>)</span><br><span class="line">demo = r.text</span><br><span class="line">soup = BeautifulSoup(demo, <span class="string">'html.parser'</span>)</span><br><span class="line"><span class="keyword">for</span> link <span class="keyword">in</span> soup(<span class="string">'a'</span>):</span><br><span class="line">    print(link)</span><br></pre></td></tr></table></figure><p><strong>&lt;&gt;.find_all(name, attrs, recursive, string, **kwargs)</strong><br>∙ name : 对标签名称的检索字符串<br>返回一个列表类型，存储查找的结果 </p><p>attrs: 对标签属性值的检索字符串，可标注属性检索 </p><p>recursive: 是否对子孙全部检索，默认True </p><p>string: &lt;&gt;…&lt;/&gt;中字符串区域的检索字符串 </p><p><strong>&lt;tag&gt;(..) 等价于 &lt;tag&gt;.find_all(..)</strong><br><strong>soup(..) 等价于 soup.find_all(..)</strong></p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>&lt;&gt;.find()</td><td>搜索且只返回一个结果，同.find_all()参数</td></tr><tr><td>&lt;&gt;.find_parents()</td><td>在先辈节点中搜索，返回列表类型，同.find_all()参数</td></tr><tr><td>&lt;&gt;.find_parent()</td><td>在先辈节点中返回一个结果，同.find()参数</td></tr><tr><td>&lt;&gt;.find_next_siblings()</td><td>在后续平行节点中搜索，返回列表类型，同.find_all()参数</td></tr><tr><td>&lt;&gt;.find_next_sibling()</td><td>在后续平行节点中返回一个结果，同.find()参数</td></tr><tr><td>&lt;&gt;.find_previous_siblings()</td><td>在前序平行节点中搜索，返回列表类型，同.find_all()参数</td></tr><tr><td>&lt;&gt;.find_previous_sibling()</td><td>在前序平行节点中返回一个结果，同.find()参数</td></tr></tbody></table><h1 id="中国大学定向排名实例"><a href="#中国大学定向排名实例" class="headerlink" title="中国大学定向排名实例"></a>中国大学定向排名实例</h1><p><a href="http://www.zuihaodaxue.cn/zuihaodaxuepaiming2016.html" target="_blank" rel="noopener">http://www.zuihaodaxue.cn/zuihaodaxuepaiming2016.html</a> </p><p>技术路线： requests‐bs4<br>定向爬虫：仅对输入URL进行爬取，不扩展爬取 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"># CrawUnivRankingB.py</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> bs4</span><br><span class="line"></span><br><span class="line">def getHTMLText(url):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.get(url, timeout=<span class="number">30</span>)</span><br><span class="line">        r.raise_for_status()</span><br><span class="line">        r.encoding = r.apparent_encoding</span><br><span class="line">        <span class="keyword">return</span> r.text</span><br><span class="line">    except:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line"></span><br><span class="line">def fillUnivList(ulist, html):</span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">"html.parser"</span>)</span><br><span class="line">    <span class="keyword">for</span> tr <span class="keyword">in</span> soup.find(<span class="string">'tbody'</span>).children:</span><br><span class="line">        <span class="keyword">if</span> isinstance(tr, bs4.element.Tag):</span><br><span class="line">            tds = tr(<span class="string">'td'</span>)</span><br><span class="line">            ulist.append([tds[<span class="number">0</span>].string, tds[<span class="number">1</span>].string, tds[<span class="number">3</span>].string])</span><br><span class="line"></span><br><span class="line">def printUnivList(ulist, num):</span><br><span class="line">    tplt = <span class="string">"&#123;0:^10&#125;\t&#123;1:&#123;3&#125;^10&#125;\t&#123;2:^10&#125;"</span></span><br><span class="line">    print(tplt.format(<span class="string">"排名"</span>, <span class="string">"学校名称"</span>, <span class="string">"总分"</span>, chr(<span class="number">12288</span>)))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num):</span><br><span class="line">        u = ulist[i]</span><br><span class="line">        print(tplt.format(u[<span class="number">0</span>], u[<span class="number">1</span>], u[<span class="number">2</span>], chr(<span class="number">12288</span>)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    uinfo = []</span><br><span class="line">    url = <span class="string">'http://www.zuihaodaxue.cn/zuihaodaxuepaiming2016.html'</span></span><br><span class="line">    html = getHTMLText(url)</span><br><span class="line">    fillUnivList(uinfo, html)</span><br><span class="line">    printUnivList(uinfo, 20)  # 20 univs</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p><img src="/2019/10/python/python-crawler/python-crawler/1572935046844.png" alt="1572935046844"></p><p><img src="/2019/10/python/python-crawler/python-crawler/1572935138873.png" alt="1572935138873"></p><p>当中文字符宽度不够时，采用西文字符填充；中西文字符占用宽度不同<br><strong>采用中文字符的空格填充 chr(12288)</strong> </p><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p><strong>regular expression, regex, RE</strong> </p><p>正则表达式是用来简洁表达一组字符串的表达式 </p><p>正则表达式在文本处理中十分常用：<br>表达文本类型的特征（病毒、入侵等）<br>同时查找或替换一组字符串<br>匹配字符串的全部或部分<br>……<br>最主要应用在字符串匹配中 </p><p>正则表达式语法由字符和操作符构成 </p><h2 id="正则表达式常用操作符"><a href="#正则表达式常用操作符" class="headerlink" title="正则表达式常用操作符"></a>正则表达式常用操作符</h2><table><thead><tr><th>操作符</th><th>说明</th><th>实例</th></tr></thead><tbody><tr><td>.</td><td>表示任何单个字符</td><td></td></tr><tr><td>[ ]</td><td>字符集，对单个字符给出取值范围</td><td>[abc]表示a、 b、 c， [a‐z]表示a到z单个字符</td></tr><tr><td>[^ ]</td><td>非字符集，对单个字符给出排除范围</td><td>[^abc]表示非a或b或c的单个字符</td></tr><tr><td>*</td><td>前一个字符0次或无限次扩展</td><td>abc* 表示 ab、 abc、 abcc、 abccc等</td></tr><tr><td>+</td><td>前一个字符1次或无限次扩展</td><td>abc+ 表示 abc、 abcc、 abccc等</td></tr><tr><td>?</td><td>前一个字符0次或1次扩展</td><td>abc? 表示 ab、 abc</td></tr><tr><td>|</td><td>左右表达式任意一个</td><td>abc|def 表示 abc、 def</td></tr><tr><td>{m}</td><td>扩展前一个字符m次</td><td>ab{2}c表示abbc</td></tr><tr><td>{m,n}</td><td>扩展前一个字符m至n次（含n）</td><td>ab{1,2}c表示abc、 abbc</td></tr><tr><td>^</td><td>匹配字符串开头</td><td>^abc表示abc且在一个字符串的开头</td></tr><tr><td>$</td><td>匹配字符串结尾</td><td>abc$表示abc且在一个字符串的结尾</td></tr><tr><td>( )</td><td>分组标记，内部只能使用 | 操作符</td><td>(abc)表示abc， (abc|def)表示abc、 def</td></tr><tr><td>\d</td><td>数字，等价于[0‐9]</td><td></td></tr><tr><td>\w</td><td>单词字符，等价于[A‐Za‐z0‐9_]</td><td></td></tr></tbody></table><h2 id="经典正则表达式"><a href="#经典正则表达式" class="headerlink" title="经典正则表达式"></a>经典正则表达式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">^[A‐Za‐z]+$ 由<span class="number">26</span>个字母组成的字符串</span><br><span class="line">^[A‐Za‐z0‐<span class="number">9</span>]+$ 由<span class="number">26</span>个字母和数字组成的字符串</span><br><span class="line">^‐?\d+$ 整数形式的字符串</span><br><span class="line">^[<span class="number">0</span>‐<span class="number">9</span>]*[<span class="number">1</span>‐<span class="number">9</span>][<span class="number">0</span>‐<span class="number">9</span>]*$ 正整数形式的字符串</span><br><span class="line">[<span class="number">1</span>‐<span class="number">9</span>]\d&#123;<span class="number">5</span>&#125; 中国境内邮政编码， <span class="number">6</span>位</span><br><span class="line">[\u4e00‐\u9fa5] 匹配中文字符</span><br><span class="line">\d&#123;<span class="number">3</span>&#125;‐\d&#123;<span class="number">8</span>&#125;|\d&#123;<span class="number">4</span>&#125;‐\d&#123;<span class="number">7</span>&#125; 国内电话号码， <span class="number">010</span>‐<span class="number">68913536</span></span><br></pre></td></tr></table></figure><p><strong>ip地址正则</strong><br>P地址字符串形式的正则表达式（ IP地址分4段，每段0‐255）</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">精确写法 0‐99： [1‐9]?\d</span><br><span class="line"><span class="number">100</span>‐<span class="number">199</span>: <span class="number">1</span>\d&#123;<span class="number">2</span>&#125;</span><br><span class="line"><span class="number">200</span>‐<span class="number">249</span>: <span class="number">2</span>[<span class="number">0</span>‐<span class="number">4</span>]\d</span><br><span class="line"><span class="number">250</span>‐<span class="number">255</span>: <span class="number">25</span>[<span class="number">0</span>‐<span class="number">5</span>]</span><br><span class="line">(([1‐9]?\d|1\d&#123;2&#125;|2[0‐4]\d|25[0‐5]).)&#123;3&#125;([1‐9]?\d|1\d&#123;2&#125;|2[0‐4]\d|25[0‐5])</span><br></pre></td></tr></table></figure><h2 id="re库"><a href="#re库" class="headerlink" title="re库"></a>re库</h2><p>Re库是Python的标准库，主要用于字符串匹配 </p><h3 id="正则表达式的表示类型"><a href="#正则表达式的表示类型" class="headerlink" title="正则表达式的表示类型"></a>正则表达式的表示类型</h3><p>raw string类型（原生字符串类型）<br>库采用类型表示正则表达式，表示为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例如： <span class="string">r'[1‐9]\d&#123;5&#125;'</span> <span class="string">r'\d&#123;3&#125;‐\d&#123;8&#125;|\d&#123;4&#125;‐\d&#123;7&#125;'</span></span><br></pre></td></tr></table></figure><p>raw string是不包含对转义符再次转义的字符串 </p><p>re库也可以采用string类型表示正则表达式，但更繁琐<br>例如：<br>‘[1‐9]\d{5}’<br>‘\d{3}‐\d{8}|\d{4}‐\d{7}’<br><strong>建议：当正则表达式包含转义符时，使用raw string</strong> </p><h3 id="Re库的主要功能函数"><a href="#Re库的主要功能函数" class="headerlink" title="Re库的主要功能函数"></a>Re库的主要功能函数</h3><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>re.search()</td><td>在一个字符串中搜索匹配正则表达式的第一个位置，返回match对象</td></tr><tr><td>re.match()</td><td>从一个字符串的开始位置起匹配正则表达式，返回match对象</td></tr><tr><td>re.findall()</td><td>搜索字符串，以列表类型返回全部能匹配的子串</td></tr><tr><td>re.split()</td><td>将一个字符串按照正则表达式匹配结果进行分割，返回列表类型</td></tr><tr><td>re.finditer()</td><td>搜索字符串，返回一个匹配结果的迭代类型，每个迭代元素是match对象</td></tr><tr><td>re.sub()</td><td>在一个字符串中替换所有匹配正则表达式的子串，返回替换后的字符串</td></tr></tbody></table><p><strong>re.search(pattern, string, flags=0)</strong><br>∙ pattern : 正则表达式的字符串或原生字符串表示<br>∙ string : 待匹配字符串<br>∙ flags : 正则表达式使用时的控制标记<br>在一个字符串中搜索匹配正则表达式的第一个位置<br>返回match对象</p><table><thead><tr><th>常用标记</th><th>说明</th></tr></thead><tbody><tr><td>re.I re.IGNORECASE</td><td>忽略正则表达式的大小写， [A‐Z]能够匹配小写字符</td></tr><tr><td>re.M re.MULTILINE</td><td>正则表达式中的^操作符能够将给定字符串的每行当作匹配开始</td></tr><tr><td>re.S re.DOTALL</td><td>正则表达式中的.操作符能够匹配所有字符，默认匹配除换行外的所有字符</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">match = re.search(<span class="string">r'[1-9]\d&#123;5&#125;'</span>,<span class="string">'bit 100001'</span>)</span><br><span class="line"><span class="keyword">if</span> match:</span><br><span class="line">    print(match.group(<span class="number">0</span>))</span><br></pre></td></tr></table></figure><p><strong>re.match(pattern, string, flags=0)</strong><br>∙ pattern : 正则表达式的字符串或原生字符串表示<br>∙ string : 待匹配字符串<br>∙ flags : 正则表达式使用时的控制标记<br>从一个字符串的开始位置起匹配正则表达式<br>返回match对象 </p><p><strong>re.findall(pattern, string, flags=0)</strong><br>∙ pattern : 正则表达式的字符串或原生字符串表示<br>∙ string : 待匹配字符串<br>∙ flags : 正则表达式使用时的控制标记<br>搜索字符串，以列表类型返回全部能匹配的子串 </p><p><strong>re.split(pattern, string, maxsplit=0, flags=0)</strong><br>∙ pattern : 正则表达式的字符串或原生字符串表示<br>∙ string : 待匹配字符串<br>∙ maxsplit: 最大分割数，剩余部分作为最后一个元素输出<br>∙ flags : 正则表达式使用时的控制标记<br>将一个字符串按照正则表达式匹配结果进行分割<br>返回列表类型 </p><p><strong>re.finditer(pattern, string, flags=0)</strong><br>∙ pattern : 正则表达式的字符串或原生字符串表示<br>∙ string : 待匹配字符串<br>∙ flags : 正则表达式使用时的控制标记<br>搜索字符串，返回一个匹配结果的迭代类型，每个迭代<br>元素是match对象 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> refor m <span class="keyword">in</span> re.finditer(<span class="string">r'[1-9]\d&#123;5&#125;'</span>,<span class="string">'bit100001 lmz312552'</span>):    <span class="keyword">if</span> m:          print(m.group(<span class="number">0</span>))</span><br></pre></td></tr></table></figure><p><strong>re.sub(pattern, repl, string, count=0, flags=0)</strong><br>在一个字符串中替换所有匹配正则表达式的子串<br>返回替换后的字符串 </p><dl><dt>∙ pattern 正则表达式的字符串或原生字符串表示<br>: ∙ repl : 替换匹配字符串的字符串∙ string : 待匹配字符串∙ count<br>∙ flags : 匹配的最大替换次数</dt><dd>正则表达式使用时的控制标记 </dd></dl><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> resub = re.sub(<span class="string">r'[1-9]\d&#123;5&#125;'</span>, <span class="string">'bitzip'</span>, <span class="string">'bit100001 lmz312552'</span>)print(sub)</span><br></pre></td></tr></table></figure><h3 id="正则表达式对象"><a href="#正则表达式对象" class="headerlink" title="正则表达式对象"></a>正则表达式对象</h3><p>rst = re.search(r’[1‐9]\d{5}’, ‘BIT 100081’)<br>pat = re.compile(r’[1‐9]\d{5}’)<br>rst = pat.search(‘BIT 100081’)<br>面向对象用法：编译后的多次操作<br>函数式用法：一次性操作 </p><p>regex = re.compile(pattern, flags=0)<br>∙ pattern : 正则表达式的字符串或原生字符串表示<br>∙ flags : 正则表达式使用时的控制标记</p><p><strong>regex = re.compile(r’[1‐9]\d{5}’)</strong><br><strong>将正则表达式的字符串形式编译成正则表达式对象</strong> </p><h3 id="re库的match对象"><a href="#re库的match对象" class="headerlink" title="re库的match对象"></a>re库的match对象</h3><p>Match对象是一次匹配的结果，包含匹配的很多信息 </p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>.string</td><td>待匹配的文本</td></tr><tr><td>.re</td><td>匹配时使用的patter对象（正则表达式）</td></tr><tr><td>.pos</td><td>正则表达式搜索文本的开始位置</td></tr><tr><td>.endpos</td><td>正则表达式搜索文本的结束位置</td></tr></tbody></table><p><img src="/2019/10/python/python-crawler/python-crawler/1572953898604.png" alt="1572953898604"></p><h3 id="re库的贪婪匹配和最小匹配"><a href="#re库的贪婪匹配和最小匹配" class="headerlink" title="re库的贪婪匹配和最小匹配"></a>re库的贪婪匹配和最小匹配</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">match = re.search(<span class="string">r'PY.*N'</span>, <span class="string">'PYANBNCNDN'</span>)</span><br><span class="line">print(match.group(<span class="number">0</span>))</span><br><span class="line"><span class="string">'PYANBNCNDN'</span></span><br></pre></td></tr></table></figure><p>Re库默认采用<strong>贪婪匹配，即输出匹配最长的子串</strong> </p><table><thead><tr><th>操作符</th><th>说明</th></tr></thead><tbody><tr><td>*?</td><td>前一个字符0次或无限次扩展，最小匹配</td></tr><tr><td>+?</td><td>前一个字符1次或无限次扩展，最小匹配</td></tr><tr><td>??</td><td>前一个字符0次或1次扩展，最小匹配</td></tr><tr><td>{m,n}?</td><td>扩展前一个字符m至n次（含n），最小匹配</td></tr></tbody></table><p>*<em>只要长度输出可能不同的，都可以通过在操作符后增加?变成最小匹配 *</em></p><h1 id="Scrapy"><a href="#Scrapy" class="headerlink" title="Scrapy"></a>Scrapy</h1><p>Scrapy是一个快速功能强大的网络爬虫框架 </p><p>爬虫框架是实现爬虫功能的一个软件结构和功能组件集合。<br>爬虫框架是一个半成品，能够帮助用户实现专业网络爬虫。 </p><p><strong>scrapy的安装</strong></p><p>Win平台: “以管理员身份运行” cmd执行 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install scrapy</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install scrapy</span><br></pre></td></tr></table></figure><p>安装后小测：执行 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy</span><br></pre></td></tr></table></figure><h2 id="Scrapy结构"><a href="#Scrapy结构" class="headerlink" title="Scrapy结构"></a>Scrapy结构</h2><p><img src="/2019/10/python/python-crawler/python-crawler/1573003671238.png" alt="1573003671238"></p><p><img src="/2019/10/python/python-crawler/python-crawler/1573007510817.png" alt="1573007510817"></p><p><img src="/2019/10/python/python-crawler/python-crawler/1573007534350.png" alt="1573007534350"></p><p><img src="/2019/10/python/python-crawler/python-crawler/1573007565476.png" alt="1573007565476"></p><p><img src="/2019/10/python/python-crawler/python-crawler/1573007584490.png" alt="1573007584490"></p><p><img src="/2019/10/python/python-crawler/python-crawler/1573007612566.png" alt="1573007612566"></p><p><img src="/2019/10/python/python-crawler/python-crawler/1573007638061.png" alt="1573007638061"></p><p><strong>Engine</strong><br>(1) 控制所有模块之间的数据流<br>(2) 根据条件触发事件<br>不需要用户修改 </p><p><strong>Downloader</strong><br>根据请求下载网页<br>不需要用户修改 </p><p><strong>Scheduler</strong><br>对所有爬取请求进行调度管理<br>不需要用户修改 </p><p><strong>Downloader Middleware</strong><br>目的：实施Engine、 Scheduler和Downloader<br>之间进行用户可配置的控制<br>功能：修改、丢弃、新增请求或响应<br>用户可以编写配置代码 </p><p><strong>Spider</strong><br>(1) 解析Downloader返回的响应（ Response）<br>(2) 产生爬取项（ scraped item）<br>(3) 产生额外的爬取请求（ Request）<br>需要用户编写配置代码 </p><p><strong>Item Pipelines</strong><br>(1) 以流水线方式处理Spider产生的爬取项<br>(2) 由一组操作顺序组成，类似流水线，每个操<br>作是一个Item Pipeline类型<br>(3) 可能操作包括：清理、检验和查重爬取项中<br>的HTML数据、将数据存储到数据库<br>需要用户编写配置代码 </p><p><strong>Spider Middleware</strong><br>目的：对请求和爬取项的再处理<br>功能：修改、丢弃、新增请求或爬取项<br>用户可以编写配置代码 </p><h2 id="requests和scrapy"><a href="#requests和scrapy" class="headerlink" title="requests和scrapy"></a>requests和scrapy</h2><p>相同点：<br>两者都可以进行页面请求和爬取， Python爬虫的两个重要技术路线<br>两者可用性都好，文档丰富，入门简单<br>两者都没有处理js、提交表单、应对验证码等功能（可扩展） </p><table><thead><tr><th>requests</th><th>scrapy</th></tr></thead><tbody><tr><td>页面级爬虫</td><td>网站级爬虫</td></tr><tr><td>功能库</td><td>框架</td></tr><tr><td>并发性考虑不足，性能较差</td><td>并发性好，性能较高</td></tr><tr><td>重点在于页面下载</td><td>重点在于爬虫结构</td></tr><tr><td>定制灵活</td><td>一般定制灵活，深度定制困难</td></tr><tr><td>上手十分简单</td><td>入门稍难</td></tr></tbody></table><h2 id="scrapy常用命令"><a href="#scrapy常用命令" class="headerlink" title="scrapy常用命令"></a>scrapy常用命令</h2><p>Scrapy是为持续运行设计的专业爬虫框架，提供操作的Scrapy命令行<br>Win下，启动cmd控制台 </p><p>为什么Scrapy采用命令行创建和运行爬虫？<br>命令行（不是图形界面）更容易自动化，适合脚本控制<br>本质上， Scrapy是给程序员用的，功能（而不是界面）更重要 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy &lt;command&gt; [options] [args]</span><br></pre></td></tr></table></figure><table><thead><tr><th>命令</th><th>说明</th><th>格式</th></tr></thead><tbody><tr><td>startproject</td><td>创建一个新工程</td><td>scrapy startproject <name> [dir]</name></td></tr><tr><td>genspider</td><td>创建一个爬虫</td><td>scrapy genspider [options] <name> <domain></domain></name></td></tr><tr><td>settings</td><td>获得爬虫配置信息</td><td>scrapy settings [options]</td></tr><tr><td>crawl</td><td>运行一个爬虫</td><td>scrapy crawl <spider></spider></td></tr><tr><td>list</td><td>列出工程中所有爬虫</td><td>scrapy list</td></tr><tr><td>shell</td><td>启动URL调试命令行</td><td>scrapy shell [url]</td></tr></tbody></table><h2 id="产生的步骤"><a href="#产生的步骤" class="headerlink" title="产生的步骤"></a>产生的步骤</h2><p>应用Scrapy爬虫框架主要是编写配置型代码</p><h3 id="步骤1：建立一个Scrapy爬虫工程"><a href="#步骤1：建立一个Scrapy爬虫工程" class="headerlink" title="步骤1：建立一个Scrapy爬虫工程"></a>步骤1：建立一个Scrapy爬虫工程</h3><p>选取一个目录（ D:\pycodes\），然后执行如下命令： </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy startproject python123demo</span><br></pre></td></tr></table></figure><h3 id="生成的工程目录"><a href="#生成的工程目录" class="headerlink" title="生成的工程目录"></a>生成的工程目录</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">python123demo/ 外层目录</span><br><span class="line">scrapy<span class="selector-class">.cfg</span> 部署Scrapy爬虫的配置文件</span><br><span class="line">python123demo/Scrapy框架的用户自定义Python代码</span><br><span class="line">__init__<span class="selector-class">.py</span>初始化脚本</span><br><span class="line">items<span class="selector-class">.py</span> Items代码模板（继承类）</span><br><span class="line">middlewares<span class="selector-class">.py</span>Middlewares代码模板（继承类）</span><br><span class="line">pipelines<span class="selector-class">.py</span>Pipelines代码模板（继承类）</span><br><span class="line">settings<span class="selector-class">.py</span>Scrapy爬虫的配置文件</span><br><span class="line">spiders/Spiders代码模板目录（继承类）</span><br><span class="line">目录结构 __pycache__/ 缓存目录，无需修改</span><br></pre></td></tr></table></figure><p><strong>内层目录结构</strong></p><p>用户自定义的spider代码增加在此处 </p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spiders/Spiders代码模板目录（继承类）</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">__init__</span>.</span></span>py初始文件，无需修改</span><br><span class="line">    __pycache__/缓存目录，无需修改</span><br></pre></td></tr></table></figure><h3 id="步骤2：在工程中产生一个Scrapy爬虫"><a href="#步骤2：在工程中产生一个Scrapy爬虫" class="headerlink" title="步骤2：在工程中产生一个Scrapy爬虫"></a>步骤2：在工程中产生一个Scrapy爬虫</h3><p>进入工程目录（ D:\pycodes\python123demo），然后执行如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">You can start your first spider with:</span><br><span class="line">    cd python123demo</span><br><span class="line">    scrapy genspider example example.com</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">E:\Codes\Python\reptile\python123demo&gt;scrapy genspider demo python123.io</span><br></pre></td></tr></table></figure><p>该命令作用：<br>(1) 生成一个名称为demo的spider<br>(2) 在spiders目录下增加代码文件demo.py</p><p>该命令仅用于生成demo.py，该文件也可以手工生成 </p><p><strong>demo.py文件</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">'demo'</span></span><br><span class="line">    allowed_domains = [<span class="string">'python123.io'</span>]</span><br><span class="line">    start_urls = [<span class="string">'http://python123.io/'</span>]</span><br><span class="line"><span class="comment">#parse()用于处理响应，解析内容形成字典，发现新的URL爬取请求 </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h3 id="步骤3：配置产生的spider爬虫"><a href="#步骤3：配置产生的spider爬虫" class="headerlink" title="步骤3：配置产生的spider爬虫"></a>步骤3：配置产生的spider爬虫</h3><p>配置：（ 1）初始URL地址</p><p> （ 2）获取页面后的解析方式 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">'demo'</span></span><br><span class="line">    <span class="comment"># allowed_domains = ['python123.io'] 可选</span></span><br><span class="line">    start_urls = [<span class="string">'http://python123.io/ws/demo.html'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        fname = response.url.split(<span class="string">'/'</span>)[<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">with</span> open(fname,<span class="string">"wb"</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(response.body)</span><br><span class="line">        self.log(<span class="string">'Saved file %s.'</span> % fname)</span><br></pre></td></tr></table></figure><h3 id="步骤4：运行爬虫，获取网页"><a href="#步骤4：运行爬虫，获取网页" class="headerlink" title="步骤4：运行爬虫，获取网页"></a>步骤4：运行爬虫，获取网页</h3><p>在命令行下，执行如下命令： </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl demo</span><br></pre></td></tr></table></figure><p><strong>完整版代码：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">'demo'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_requests</span><span class="params">(self)</span>:</span></span><br><span class="line">        urls = [</span><br><span class="line">            <span class="string">'http://python123.io/ws/demo.html'</span></span><br><span class="line">        ]</span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(url=url,callback=self.parse)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        fname = response.url.split(<span class="string">'/'</span>)[<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">with</span> open(fname,<span class="string">"wb"</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(response.body)</span><br><span class="line">        self.log(<span class="string">'Saved file %s.'</span> % fname)</span><br></pre></td></tr></table></figure><h2 id="yield关键字"><a href="#yield关键字" class="headerlink" title="yield关键字"></a>yield关键字</h2><p>yield 《=》生成器</p><p><strong>包含yield语句的函数是一个生成器</strong></p><p><strong>生成器每次产生一个值（ yield语句），函数被冻结，被唤醒后再产生一个值<br>生成器是一个不断产生值的函数</strong> </p><p><strong>生成器相比一次列出所有内容的优势：</strong><br>1)更节省存储空间<br>2)响应更迅速<br>3)使用更灵活 </p><p>实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        <span class="keyword">yield</span> i ** <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> gen(<span class="number">5</span>):</span><br><span class="line">    print(i, <span class="string">" "</span>, end=<span class="string">""</span>)</span><br></pre></td></tr></table></figure><p>生成器每调用一次在yield位置产生一个值，直到函数执行结束 </p><p><strong>一次返回所有值</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [i **<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(n)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> square(<span class="number">5</span>):</span><br><span class="line">    print(i, <span class="string">" "</span>, end=<span class="string">""</span>)</span><br></pre></td></tr></table></figure><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="Request类"><a href="#Request类" class="headerlink" title="Request类"></a>Request类</h3><p><strong>class scrapy.http.Request()</strong><br>Request对象表示一个HTTP请求<br>由Spider生成，由Downloader执行 </p><table><thead><tr><th>属性或方法</th><th>说明</th></tr></thead><tbody><tr><td>.url</td><td>Request对应的请求URL地址</td></tr><tr><td>.method</td><td>对应的请求方法， ‘GET’ ‘POST’等</td></tr><tr><td>.headers</td><td>字典类型风格的请求头</td></tr><tr><td>.body</td><td>请求内容主体，字符串类型</td></tr><tr><td>.meta</td><td>用户添加的扩展信息，在Scrapy内部模块间传递信息使用</td></tr><tr><td>.copy()</td><td>复制该请求</td></tr></tbody></table><h3 id="Response类"><a href="#Response类" class="headerlink" title="Response类"></a>Response类</h3><p>class scrapy.http.Response()<br>Response对象表示一个HTTP响应<br>由Downloader生成，由Spider处理 </p><table><thead><tr><th>属性或方法</th><th>说明</th></tr></thead><tbody><tr><td>.url</td><td>Response对应的URL地址</td></tr><tr><td>.status</td><td>HTTP状态码，默认是200</td></tr><tr><td>.headers</td><td>Response对应的头部信息</td></tr><tr><td>.body</td><td>Response对应的内容信息，字符串类型</td></tr><tr><td>.flags</td><td>一组标记</td></tr><tr><td>.request</td><td>产生Response类型对应的Request对象</td></tr><tr><td>.copy()</td><td>复制该响应</td></tr></tbody></table><h3 id="Item类"><a href="#Item类" class="headerlink" title="Item类"></a>Item类</h3><p>class scrapy.item.Item()<br>Item对象表示一个从HTML页面中提取的信息内容<br>由Spider生成，由Item Pipeline处理<br>Item类似字典类型，可以按照字典类型操作 </p><h2 id="scrapy基本使用"><a href="#scrapy基本使用" class="headerlink" title="scrapy基本使用"></a>scrapy基本使用</h2><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><p>步骤1：创建一个工程和Spider模板<br>步骤2：编写Spider<br>步骤3：编写Item Pipeline<br>步骤4：优化配置策略</p><h3 id="Scrapy爬虫支持多种HTML信息提取方法："><a href="#Scrapy爬虫支持多种HTML信息提取方法：" class="headerlink" title="Scrapy爬虫支持多种HTML信息提取方法："></a>Scrapy爬虫支持多种HTML信息提取方法：</h3><p>• Beautiful Soup<br>• lxml<br>• re<br>• XPath Selector<br>• CSS Selector </p><p>CSS Selector</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;HTML&gt;.css(<span class="string">'a::attr(href)'</span>).extract()</span><br></pre></td></tr></table></figure><p>CSS Selector由W3C组织维护并规范<br>标签名称 标签属性 </p><h2 id="配置并发连接选项"><a href="#配置并发连接选项" class="headerlink" title="配置并发连接选项"></a>配置并发连接选项</h2><p> <strong>settings.py文件</strong></p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>CONCURRENT_REQUESTS</td><td>Downloader最大并发请求下载数量，默认32</td></tr><tr><td>CONCURRENT_ITEMS</td><td>Item Pipeline最大并发ITEM处理数量，默认100</td></tr><tr><td>CONCURRENT_REQUESTS_PER_DOMAIN</td><td>每个目标域名最大的并发请求数量，默认8</td></tr><tr><td>CONCURRENT_REQUESTS_PER_IP</td><td>每个目标IP最大的并发请求数量，默认0，非0有效</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2019/10/python/python-crawler/python-crawler/1572765034346.png&quot; alt=&quot;1572765034346&quot;&gt;&lt;/p&gt;&lt;h1 id=&quot;requests库&quot;&gt;&lt;a href=&quot;#requests库&quot; class=&quot;headerlink&quot; title=&quot;requests库&quot;&gt;&lt;/a&gt;requests库&lt;/h1&gt;&lt;h2 id=&quot;requests库的安装&quot;&gt;&lt;a href=&quot;#requests库的安装&quot; class=&quot;headerlink&quot; title=&quot;requests库的安装&quot;&gt;&lt;/a&gt;requests库的安装&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.python-requests.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.python-requests.org&lt;/a&gt; &lt;/p&gt;&lt;p&gt;Win平台: “以管理员身份运行” cmd，执行 pip install requests &lt;/p&gt;&lt;h2 id=&quot;requests库的7个主要方法&quot;&gt;&lt;a href=&quot;#requests库的7个主要方法&quot; class=&quot;headerlink&quot; title=&quot;requests库的7个主要方法&quot;&gt;&lt;/a&gt;requests库的7个主要方法&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;requests.request()&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;构造一个请求，支撑以下各方法的基础方法&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;requests.get(url, params=None, **kwargs)&lt;/td&gt;
&lt;td&gt;获取HTML网页的主要方法，对应于HTTP的GET&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;requests.head(url, **kwargs)&lt;/td&gt;
&lt;td&gt;获取HTML网页头信息的方法，对应于HTTP的HEAD&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;requests.post(url, data=None, json=None, **kwargs)&lt;/td&gt;
&lt;td&gt;向HTML网页提交POST请求的方法，对应于HTTP的POST&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;requests.put(url, data=None, **kwargs)&lt;/td&gt;
&lt;td&gt;向HTML网页提交PUT请求的方法，对应于HTTP的PUT&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;requests.patch(url, data=None, **kwargs)&lt;/td&gt;
&lt;td&gt;向HTML网页提交局部修改请求，对应于HTTP的PATCH&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;requests.delete(url, **kwargs)&lt;/td&gt;
&lt;td&gt;向HTML页面提交删除请求，对应于HTTP的DELETE&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://codeofli.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://codeofli.github.io/tags/python/"/>
    
      <category term="crawler" scheme="https://codeofli.github.io/tags/crawler/"/>
    
  </entry>
  
  <entry>
    <title>python</title>
    <link href="https://codeofli.github.io/2019/10/python/python/python/"/>
    <id>https://codeofli.github.io/2019/10/python/python/python/</id>
    <published>2019-10-15T13:14:50.000Z</published>
    <updated>2019-11-13T12:20:25.650Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="python语法"><a href="#python语法" class="headerlink" title="python语法"></a>python语法</h1><h2 id="分支语法"><a href="#分支语法" class="headerlink" title="分支语法"></a>分支语法</h2><h3 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h3><p><strong>用于条件组合的三个保留字</strong> </p><table><thead><tr><th>操作符及使用</th><th>描述</th></tr></thead><tbody><tr><td>x and y</td><td>两个条件x和y的逻辑与</td></tr><tr><td>x or y</td><td>两个条件x和y的逻辑或</td></tr><tr><td>not x</td><td>条件x的逻辑非</td></tr></tbody></table><table><thead><tr><th>操作符</th><th>数学符号</th><th>描述</th></tr></thead><tbody><tr><td>&lt;</td><td>&lt;</td><td>小于</td></tr><tr><td>&lt;=</td><td>≤</td><td>小于等于</td></tr><tr><td>&gt;=</td><td>≥</td><td>大于等于</td></tr><tr><td>&gt;</td><td>&gt;</td><td>大于</td></tr><tr><td>==</td><td>=</td><td>等于</td></tr><tr><td>！ =</td><td>≠</td><td>不等于</td></tr></tbody></table><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> &lt;condition&gt;: &lt;statement&gt;</span><br></pre></td></tr></table></figure><p><strong>special：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> bool: statement</span><br></pre></td></tr></table></figure><p>二分支紧凑形式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;statement&gt; <span class="keyword">if</span> &lt;condition&gt; <span class="keyword">else</span> &lt;statement&gt;</span><br></pre></td></tr></table></figure><p>多分支</p><p><strong>注意是elif，不是else if</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> &lt;条件<span class="number">1</span>&gt; :</span><br><span class="line">&lt;语句块<span class="number">1</span>&gt;</span><br><span class="line"><span class="keyword">elif</span> &lt;条件<span class="number">2</span>&gt; :</span><br><span class="line">&lt;语句块<span class="number">2</span>&gt;</span><br><span class="line">……</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">&lt;语句块N&gt;</span><br></pre></td></tr></table></figure><h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><p>遍历某个结构形成的循环运行方式</p><ul><li>从遍历结构中逐一提取元素，放在循环变量中</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> &lt;循环变量&gt; <span class="keyword">in</span> &lt;遍历结构&gt; :</span><br><span class="line">&lt;语句块&gt;</span><br></pre></td></tr></table></figure><p>由保留字for和in组成，完整遍历所有元素后结束</p><p>每次循环，所获得元素放入循环变量，并执行一次语句块 </p><h3 id="计数循环-N次"><a href="#计数循环-N次" class="headerlink" title="计数循环(N次)"></a>计数循环(N次)</h3><ul><li>遍历由range()函数产生的数字序列，产生循环</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(N) :</span><br><span class="line">&lt;语句块&gt;</span><br></pre></td></tr></table></figure><p>字符串遍历循环</p><ul><li>s是字符串，遍历字符串每个字符，产生循环</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> s :</span><br><span class="line">&lt;语句块&gt; </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> c <span class="keyword">in</span> <span class="string">"Python123"</span>:</span><br><span class="line">print(c, end=<span class="string">","</span>)</span><br><span class="line">P,y,t,h,o,n,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,</span><br></pre></td></tr></table></figure><p>ls是一个列表， 遍历其每个元素，产生循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> ls :</span><br><span class="line">&lt;语句块&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> item <span class="keyword">in</span> [<span class="number">123</span>, <span class="string">"PY"</span>, <span class="number">456</span>] :</span><br><span class="line">print(item, end=<span class="string">","</span>)</span><br><span class="line"><span class="number">123</span>,PY,<span class="number">456</span>,</span><br></pre></td></tr></table></figure><p>文件遍历循环</p><ul><li><p>fi是一个文件标识符，遍历其每行，产生循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> fi :</span><br><span class="line">&lt;语句块&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><p>由条件控制的循环运行方式</p><ul><li>反复执行语句块，直到条件不满足时结束</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> &lt;条件&gt; :</span><br><span class="line">&lt;语句块&gt;</span><br></pre></td></tr></table></figure><h3 id="循环控制保留字"><a href="#循环控制保留字" class="headerlink" title="循环控制保留字"></a>循环控制保留字</h3><p>break 和 continue</p><ul><li>break跳出并结束当前整个循环，执行循环后的语句</li><li>continue结束当次循环，继续执行后续次数循环</li><li>break和continue可以与for和while循环搭配使用 </li></ul><h3 id="循环的扩展-else"><a href="#循环的扩展-else" class="headerlink" title="循环的扩展(else)"></a>循环的扩展(else)</h3><p>循环与else</p><ul><li>当循环没有被break语句退出时，执行else语句块</li><li>else语句块作为”正常”完成循环的奖励</li><li>这里else的用法与异常处理中else用法相似 </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> &lt;条件&gt; :</span><br><span class="line">&lt;语句块<span class="number">1</span>&gt;</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">&lt;语句块<span class="number">2</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &lt;变量&gt; <span class="keyword">in</span> &lt;遍历结构&gt; :</span><br><span class="line">&lt;语句块<span class="number">1</span>&gt;</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">&lt;语句块<span class="number">2</span>&gt;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> c <span class="keyword">in</span> <span class="string">"PYTHON"</span> :</span><br><span class="line"><span class="keyword">if</span> c == <span class="string">"T"</span> :</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">print(c, end=<span class="string">""</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(<span class="string">"正常退出"</span>)</span><br><span class="line">PYHON正常退出</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> c <span class="keyword">in</span> <span class="string">"PYTHON"</span> :</span><br><span class="line"><span class="keyword">if</span> c == <span class="string">"T"</span> :</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">print(c, end=<span class="string">""</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(<span class="string">"正常退出"</span>)</span><br><span class="line">PY</span><br></pre></td></tr></table></figure><h2 id="import库"><a href="#import库" class="headerlink" title="import库"></a>import库</h2><h3 id="form-能直接调用函数"><a href="#form-能直接调用函数" class="headerlink" title="form:能直接调用函数"></a>form:能直接调用函数</h3><p>当我们使用from * 的时候，会取得模块顶层左右赋值的变量名的拷贝。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> 库 <span class="keyword">import</span> 函数名</span><br><span class="line"><span class="keyword">from</span> 库 <span class="keyword">import</span> *</span><br><span class="line">&lt;functionName&gt;(argc)</span><br></pre></td></tr></table></figure><h3 id="import-使用库名调用"><a href="#import-使用库名调用" class="headerlink" title="import:使用库名调用"></a>import:使用库名调用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &lt;libaryName&gt;</span><br><span class="line"><span class="keyword">import</span> &lt;libaryName&gt; <span class="keyword">as</span> &lt;alias&gt;</span><br></pre></td></tr></table></figure><h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><h3 id="print"><a href="#print" class="headerlink" title="print()"></a>print()</h3><p>以字符串形式向控制台输出的函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(&#123;&#125;.format()) &#123;&#125;表示槽，后续format()填入</span><br></pre></td></tr></table></figure><h3 id="input"><a href="#input" class="headerlink" title="input()"></a>input()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">input([prompt])</span><br></pre></td></tr></table></figure><p><strong>在一行输入多个数字</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a, b, c, d = map(int, input().split())</span><br></pre></td></tr></table></figure><h2 id="python注释"><a href="#python注释" class="headerlink" title="python注释"></a>python注释</h2><p><img src="/2019/10/python/python/python/python%5C%E6%B3%A8%E9%87%8A.png" alt="1567759193470"></p><h1 id="基本数据类型及其操作"><a href="#基本数据类型及其操作" class="headerlink" title="基本数据类型及其操作"></a>基本数据类型及其操作</h1><h2 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h2><h3 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h3><p><strong>与数学中整数的概念一致</strong></p><ul><li><strong>可正可负，没有取值范围限制</strong></li><li>pow(x,y)函数：计算 xy，想算多大算多大<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pow(<span class="number">2</span>,<span class="number">100</span>)</span><br><span class="line"><span class="number">1267650600228229401496703205376</span></span><br><span class="line">pow(<span class="number">2</span>,pow(<span class="number">2</span>,<span class="number">15</span>))</span><br><span class="line"><span class="number">1415461031044954789001553</span>……</span><br></pre></td></tr></table></figure></li></ul><p>4种进制表示形式</p><ul><li>十进制： 1010, 99, -217</li><li>二进制，以0b或0B开头： 0b010, -0B101</li><li>八进制，以0o或0O开头： 0o123, -0O456</li><li>十六进制，以0x或0X开头： 0x9a, -0X89 </li></ul><h3 id="浮点数类型"><a href="#浮点数类型" class="headerlink" title="浮点数类型"></a>浮点数类型</h3><p><strong>与数学中实数的概念一致</strong></p><ul><li><p>带有小数点及小数的数字</p></li><li><p>浮点数取值范围和小数精度都存在限制，但常规计算可忽略</p></li><li><p>取值范围数量级约-10307至10308，精度数量级10-16 </p><p>浮点数间运算存在不确定尾数，不是bug</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0.1</span> + <span class="number">0.3</span></span><br><span class="line"><span class="number">0.4</span></span><br><span class="line"><span class="number">0.1</span> + <span class="number">0.2</span></span><br><span class="line"><span class="number">0.30000000000000004</span> <span class="comment">#不确定尾数</span></span><br></pre></td></tr></table></figure><ul><li>round(x, d)：对x四舍五入， d是小数截取位数</li><li>浮点数间运算与比较用round()函数辅助</li><li>不确定尾数一般发生在10-16左右， round()十分有效 </li></ul><p><strong>浮点数可以采用科学计数法表示</strong></p><ul><li>使用字母e或E作为幂的符号，以10为基数，格式如下：<br><a>e<b> 表示 a*10b</b></a></li><li>例如： 4.3e-3 值为0.0043 9.6E5 值为960000.0 </li></ul><h3 id="复数类型"><a href="#复数类型" class="headerlink" title="复数类型"></a>复数类型</h3><p>与数学中复数的概念一致<br>如果x2 = -1，那么x的值是什么？</p><ul><li>定义 j = -𝟏𝟏 ，以此为基础，构建数学体系</li><li>a+bj 被称为复数，其中， a是实部， b是虚部 </li></ul><p>复数实例<br>z = 1.23e-4+5.6e+89j</p><ul><li>实部是什么？ z.real 获得实部</li><li>虚部是什么？ z.imag 获得虚部 </li></ul><h3 id="数值运算操作符"><a href="#数值运算操作符" class="headerlink" title="数值运算操作符"></a>数值运算操作符</h3><p><strong>操作符是完成运算的一种符号体系</strong></p><table><thead><tr><th>操作符及使用</th><th>描述</th></tr></thead><tbody><tr><td>x + y</td><td>加， x与y之和</td></tr><tr><td>x – y</td><td>减， x与y之差</td></tr><tr><td>x * y</td><td>乘， x与y之积</td></tr><tr><td>x / y</td><td>除， x与y之商 10/3结果是3.3333333333333335</td></tr><tr><td>x // y</td><td>整数除， x与y之整数商 10//3结果是3</td></tr><tr><td>+ x</td><td>x本身</td></tr><tr><td>- y</td><td>x的负值</td></tr><tr><td>x % y</td><td>余数，模运算 10%3结果是1</td></tr><tr><td>x ** y</td><td>幂运算， x的y次幂， x^y;当y是小数时，开方运算10**0.5结果是</td></tr></tbody></table><table><thead><tr><th>增强操作符及使用</th><th>描述</th></tr></thead><tbody><tr><td>x op= y</td><td>即 x = x op y，其中， op为二元操作符</td></tr><tr><td>x op= y</td><td>x += y x -= y x <em>= y x /= y x //= y x %= y x *</em>= y</td></tr><tr><td>x op= y</td><td>&gt;&gt;&gt; x = 3.1415 &gt;&gt;&gt; x *<em>= 3  与 x = x *</em>3 等价 31.006276662836743</td></tr></tbody></table><h3 id="数字类型的关系"><a href="#数字类型的关系" class="headerlink" title="数字类型的关系"></a>数字类型的关系</h3><p>类型间可进行混合运算，生成结果为”最宽”类型</p><ul><li>三种类型存在一种逐渐”扩展”或”变宽”的关系：</li></ul><p><strong>整数 -&gt; 浮点数 -&gt; 复数</strong></p><ul><li>例如： 123 + 4.0 = 127.0 (整数+浮点数 = 浮点数) </li></ul><h3 id="数值运算函数"><a href="#数值运算函数" class="headerlink" title="数值运算函数"></a>数值运算函数</h3><p>一些以函数形式提供的数值运算功能</p><table><thead><tr><th>函数及使用</th><th>描述</th></tr></thead><tbody><tr><td>abs(x)</td><td>绝对值， x的绝对值 abs(-10.01) 结果为 10.01</td></tr><tr><td>divmod(x,y)</td><td>商余， (x//y, x%y)，同时输出商和余数 divmod(10, 3) 结果为 (3, 1)</td></tr><tr><td>pow(x, y[, z])</td><td>幂余， (x**y)%z， [..]表示参数z可省略 pow(3, pow(3, 99), 10000) 结果为 4587</td></tr><tr><td>round(x[, d])</td><td>四舍五入， d是保留小数位数，默认值为 round(-10.123, 2) 结果为 -10.12</td></tr><tr><td>max(x1,x2, … ,xn)</td><td>最大值，返回x1,x2, … ,xn中的最大值， n不限 max(1, 9, 5, 4, 3) 结果为 9</td></tr><tr><td>min(x1,x2, … ,xn)</td><td>最小值，返回x1,x2, … ,xn中的最小值， n不限 min(1, 9, 5, 4, 3) 结果为 1</td></tr><tr><td>int(x)</td><td>将x变成整数，舍弃小数部分 int(123.45) 结果为123； int(“123”) 结果为123</td></tr><tr><td>float(x)</td><td>将x变成浮点数，增加小数部分 float(12) 结果为12.0； float(“1.23”) 结果为1.23</td></tr><tr><td>complex(x)</td><td>将x变成复数，增加虚数部分 complex(4) 结果为 4 + 0j</td></tr></tbody></table><h2 id="集合类型"><a href="#集合类型" class="headerlink" title="集合类型"></a>集合类型</h2><p>集合是多个元素的无序组合</p><ul><li><strong>集合类型与数学中的集合概念一致</strong></li><li>集合元素之间无序，每个元素唯一，不存在相同元素</li><li>集合元素不可更改，不能是可变数据类型 为什么？ </li><li><strong>集合用大括号 {} 表示，元素间用逗号分隔</strong></li><li><strong>建立集合类型用 {} 或 set()</strong></li><li><strong>建立空集合类型，必须使用set()</strong> </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>A = &#123;<span class="string">"python"</span>, <span class="number">123</span>, (<span class="string">"python"</span>,<span class="number">123</span>)&#125; <span class="comment">#使用&#123;&#125;建立集合</span></span><br><span class="line">&#123;<span class="number">123</span>, <span class="string">'python'</span>, (<span class="string">'python'</span>, <span class="number">123</span>)&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>B = set(<span class="string">"pypy123"</span>) <span class="comment">#使用set()建立集合</span></span><br><span class="line">&#123;<span class="string">'1'</span>, <span class="string">'p'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'y'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>C = &#123;<span class="string">"python"</span>, <span class="number">123</span>, <span class="string">"python"</span>,<span class="number">123</span>&#125;</span><br><span class="line">&#123;<span class="string">'python'</span>, <span class="number">123</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="集合操作符"><a href="#集合操作符" class="headerlink" title="集合操作符"></a>集合操作符</h3><table><thead><tr><th>操作符及应用</th><th>描述</th></tr></thead><tbody><tr><td>S | T</td><td>并，返回一个新集合，包括在集合S和T中的所有元素</td></tr><tr><td>S - T</td><td>差，返回一个新集合，包括在集合S但不在T中的元素</td></tr><tr><td>S &amp; T</td><td>交，返回一个新集合，包括同时在集合S和T中的元素</td></tr><tr><td>S ^ T</td><td>补，返回一个新集合，包括集合S和T中的非相同元素</td></tr><tr><td>S &lt;= T 或 S &lt; T</td><td>返回True/False，判断S和T的子集关系</td></tr><tr><td>S &gt;= T 或 S &gt; T</td><td>返回True/False，判断S和T的包含关系</td></tr><tr><td>S |= T</td><td>并，更新集合S，包括在集合S和T中的所有元素</td></tr><tr><td>S -= T</td><td>差，更新集合S，包括在集合S但不在T中的元素</td></tr><tr><td>S &amp;= T</td><td>交，更新集合S，包括同时在集合S和T中的元素</td></tr><tr><td>S ^= T</td><td>补，更新集合S，包括集合S和T中的非相同元素</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>A = &#123;<span class="string">"p"</span>, <span class="string">"y"</span> , <span class="number">123</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>B = set(<span class="string">"pypy123"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>A-B</span><br><span class="line">&#123;<span class="number">123</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>B-A</span><br><span class="line">&#123;<span class="string">'3'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>A&amp;B</span><br><span class="line">&#123;<span class="string">'p'</span>, <span class="string">'y'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>A|B</span><br><span class="line">&#123;<span class="string">'1'</span>, <span class="string">'p'</span>, <span class="string">'2'</span>, <span class="string">'y'</span>, <span class="string">'3'</span>, <span class="number">123</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>A^B</span><br><span class="line">&#123;<span class="string">'2'</span>, <span class="number">123</span>, <span class="string">'3'</span>, <span class="string">'1'</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="集合处理方法"><a href="#集合处理方法" class="headerlink" title="集合处理方法"></a>集合处理方法</h3><table><thead><tr><th>S.add(x)</th><th>如果x不在集合S中，将x增加到S</th></tr></thead><tbody><tr><td>S.discard(x)</td><td>移除S中元素x，如果x不在集合S中，不报错</td></tr><tr><td>S.remove(x)</td><td>移除S中元素x，如果x不在集合S中，产生KeyError异常</td></tr><tr><td>S.clear()</td><td>移除S中所有元素</td></tr><tr><td>S.pop()</td><td>随机返回S的一个元素，更新S，若S为空产生KeyError异常</td></tr><tr><td>S.copy()</td><td>返回集合S的一个副本</td></tr><tr><td>len(S)</td><td>返回集合S的元素个数</td></tr><tr><td>x in S</td><td>判断S中元素x， x在集合S中，返回True，否则返回False</td></tr><tr><td>x not in S</td><td>判断S中元素x， x不在集合S中，返回True，否则返回False</td></tr><tr><td>set(x)</td><td>将其他类型变量x转变为集合类型</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>A = &#123;<span class="string">"p"</span>, <span class="string">"y"</span> , <span class="number">123</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> item <span class="keyword">in</span> A:</span><br><span class="line">print(item, end=<span class="string">""</span>)</span><br><span class="line">p123y</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>A</span><br><span class="line">&#123;<span class="string">'p'</span>, <span class="number">123</span>, <span class="string">'y'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">try</span>:</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">print(A.pop(), end=<span class="string">""</span>))</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line">p123y</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>A</span><br><span class="line">set()</span><br></pre></td></tr></table></figure><h3 id="集合类型应用场景"><a href="#集合类型应用场景" class="headerlink" title="集合类型应用场景"></a>集合类型应用场景</h3><p>包含关系比较</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"p"</span> <span class="keyword">in</span> &#123;<span class="string">"p"</span>, <span class="string">"y"</span> , <span class="number">123</span>&#125;</span><br><span class="line"><span class="literal">True</span></span><br><span class="line">&#123;<span class="string">"p"</span>, <span class="string">"y"</span>&#125; &gt;= &#123;<span class="string">"p"</span>, <span class="string">"y"</span> , <span class="number">123</span>&#125;</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><p>数据去重：集合类型所有元素无重复 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ls = [<span class="string">"p"</span>, <span class="string">"p"</span>, <span class="string">"y"</span>, <span class="string">"y"</span>, <span class="number">123</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = set(ls) <span class="comment"># 利用了集合无重复元素的特点</span></span><br><span class="line">&#123;<span class="string">'p'</span>, <span class="string">'y'</span>, <span class="number">123</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lt = list(s) <span class="comment"># 还可以将集合转换为列表</span></span><br><span class="line">[<span class="string">'p'</span>, <span class="string">'y'</span>, <span class="number">123</span>]</span><br></pre></td></tr></table></figure><h2 id="字典类型及操作"><a href="#字典类型及操作" class="headerlink" title="字典类型及操作"></a>字典类型及操作</h2><h3 id="字典类型定义"><a href="#字典类型定义" class="headerlink" title="字典类型定义"></a>字典类型定义</h3><p>字典类型是“映射”的体现 </p><p>映射是一种键(索引)和值(数据)的对应</p><ul><li>键值对：键是数据索引的扩展</li><li>字典是键值对的集合，键值对之间无序</li><li>采用大括号{}和dict()创建，键值对用冒号: 表示<br>{&lt;键1&gt;:&lt;值1&gt;, &lt;键2&gt;:&lt;值2&gt;, … , &lt;键n&gt;:&lt;值n&gt;} </li></ul><p>在字典变量中，通过键获得值<br>&lt;字典变量&gt; = {&lt;键1&gt;:&lt;值1&gt;, … , &lt;键n&gt;:&lt;值n&gt;}<br>&lt;值&gt; = &lt;字典变量&gt;[&lt;键&gt;]<br><strong>[ ] 用来向字典变量中索引或增加元素</strong><br>&lt;字典变量&gt;[&lt;键&gt;] = &lt;值&gt; </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;<span class="string">"中国"</span>:<span class="string">"北京"</span>, <span class="string">"美国"</span>:<span class="string">"华盛顿"</span>, <span class="string">"法国"</span>:<span class="string">"巴黎"</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&#123;<span class="string">'中国'</span>: <span class="string">'北京'</span>, <span class="string">'美国'</span>: <span class="string">'华盛顿'</span>, <span class="string">'法国'</span>: <span class="string">'巴黎'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">"中国"</span>]</span><br><span class="line"><span class="string">'北京'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>de = &#123;&#125; ; type(de)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">dict</span>'&gt;</span></span><br><span class="line"><span class="class"><span class="title">type</span><span class="params">(x)</span></span></span><br><span class="line"><span class="class">返回变量<span class="title">x</span>的类型</span></span><br></pre></td></tr></table></figure><h3 id="字典类型操作函数和方法"><a href="#字典类型操作函数和方法" class="headerlink" title="字典类型操作函数和方法"></a>字典类型操作函数和方法</h3><table><thead><tr><th>函数或方法</th><th>描述</th></tr></thead><tbody><tr><td>del d[k]</td><td>删除字典d中键k对应的数据值</td></tr><tr><td>k in d</td><td>判断键k是否在字典d中，如果在返回True，否则False</td></tr><tr><td>d.keys()</td><td>返回字典d中所有的键信息</td></tr><tr><td>d.values()</td><td>返回字典d中所有的值信息</td></tr><tr><td>d.items()</td><td>返回字典d中所有的键值对信息</td></tr><tr><td>d.get(k, <default>)</default></td><td>键k存在，则返回相应值，不在则返回<default>值</default></td></tr><tr><td>d.pop(k, <default>)</default></td><td>键k存在，则取出相应值，不在则返回<default>值</default></td></tr><tr><td>d.popitem()</td><td>随机从字典d中取出一个键值对，以元组形式返回</td></tr><tr><td>d.clear()</td><td>删除所有的键值对</td></tr><tr><td>len(d)</td><td>返回字典d中元素的个数</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;<span class="string">"中国"</span>:<span class="string">"北京"</span>, <span class="string">"美国"</span>:<span class="string">"华盛顿"</span>, <span class="string">"法国"</span>:<span class="string">"巴黎"</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"中国"</span> <span class="keyword">in</span> d</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.keys()</span><br><span class="line">dict_keys([<span class="string">'中国'</span>, <span class="string">'美国'</span>, <span class="string">'法国'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.values()</span><br><span class="line">dict_values([<span class="string">'北京'</span>, <span class="string">'华盛顿'</span>, <span class="string">'巴黎'</span>])</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;<span class="string">"中国"</span>:<span class="string">"北京"</span>, <span class="string">"美国"</span>:<span class="string">"华盛顿"</span>, <span class="string">"法国"</span>:<span class="string">"巴黎"</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.get(<span class="string">"中国"</span>,<span class="string">"伊斯兰堡"</span>)</span><br><span class="line"><span class="string">'北京'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.get(<span class="string">"巴基斯坦"</span>,<span class="string">"伊斯兰堡"</span>)</span><br><span class="line"><span class="string">'伊斯兰堡'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.popitem()</span><br><span class="line">(<span class="string">'美国'</span>, <span class="string">'华盛顿'</span>)</span><br></pre></td></tr></table></figure><p>元素遍历</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> d :</span><br><span class="line">&lt;语句块&gt;</span><br></pre></td></tr></table></figure><h1 id="文件处理"><a href="#文件处理" class="headerlink" title="文件处理"></a>文件处理</h1><h2 id="文件的理解"><a href="#文件的理解" class="headerlink" title="文件的理解"></a>文件的理解</h2><p><strong>文件是数据的抽象和集合</strong></p><ul><li>文件是存储在辅助存储器上的数据序列</li><li>文件是数据存储的一种形式</li><li>文件展现形态：文本文件和二进制文件 </li></ul><p><strong>文本文件 vs. 二进制文件</strong></p><ul><li>文件文件和二进制文件只是文件的展示方式</li><li>本质上，所有文件都是二进制形式存储</li><li>形式上， 所有文件采用两种方式展示 </li></ul><h3 id="文本文件"><a href="#文本文件" class="headerlink" title="文本文件"></a>文本文件</h3><ul><li>由单一特定编码组成的文件，如UTF-8编码</li><li>由于存在编码，也被看成是存储着的长字符串</li><li>适用于例如： .txt文件、 .py文件等 </li></ul><h3 id="二进制文件"><a href="#二进制文件" class="headerlink" title="二进制文件"></a>二进制文件</h3><ul><li>直接由比特0和1组成， 没有统一字符编码</li><li>一般存在二进制0和1的组织结构，即文件格式</li><li>适用于例如： .png文件、 .avi文件等 </li></ul><h2 id="文本文件vs二进制文件"><a href="#文本文件vs二进制文件" class="headerlink" title="文本文件vs二进制文件"></a>文本文件vs二进制文件</h2><p><strong>f.txt文件保存：“中国是一个伟大的国家！”；</strong></p><h3 id="文本形式打开文件"><a href="#文本形式打开文件" class="headerlink" title="文本形式打开文件"></a>文本形式打开文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#tf = open("f.txt", mode="rt",encoding='UTF-8') 能指定编码</span></span><br><span class="line">tf = open(<span class="string">"f.txt"</span>, <span class="string">"rt"</span>,encoding=<span class="string">'UTF-8'</span>)</span><br><span class="line">print(tf.readline())</span><br><span class="line">tf.close()</span><br><span class="line"></span><br><span class="line">============= RESTART: E:/Codes/Python/new/file.py ====================</span><br><span class="line">中国是一个伟大的国家！</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h3 id="二进制形式打开文件"><a href="#二进制形式打开文件" class="headerlink" title="二进制形式打开文件"></a>二进制形式打开文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tf = open(<span class="string">"f.txt"</span>, mode=<span class="string">"rb"</span>)</span><br><span class="line"><span class="comment">#tf = open("f.txt", "rb")</span></span><br><span class="line">print(tf.readline())</span><br><span class="line">tf.close()</span><br><span class="line"></span><br><span class="line">====== RESTART: E:/Codes/Python/new/file.py ====================</span><br><span class="line"><span class="string">b'\xe4\xb8\xad\xe5\x9b\xbd\xe6\x98\xaf\xe4\xb8\x80\xe4\xb8\xaa\xe4\xbc\x9f\xe5\xa4\xa7\xe7\x9a\x84\xe5\x9b\xbd\xe5\xae\xb6\xef\xbc\x81'</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h2 id="文件的使用"><a href="#文件的使用" class="headerlink" title="文件的使用"></a>文件的使用</h2><p><img src="/2019/10/python/python/python/python%5C%E6%96%87%E4%BB%B6%E7%9A%84%E6%89%93%E5%BC%80%E5%85%B3%E9%97%AD.png" alt="1567820024993"></p><p>文件的打开</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;变量名(文件句柄)&gt; = open(&lt;文件名|文件路径和名称&gt;, &lt;打开模式 |文本 <span class="keyword">or</span> 二进制|读 <span class="keyword">or</span> 写 &gt;)</span><br></pre></td></tr></table></figure><p>文件路径和名称<br>源文件同目录可省路径</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"D:/PYE/f.txt"</span></span><br><span class="line"><span class="string">"D:<span class="subst">\\</span>PYE<span class="subst">\\</span>f.txt"</span> <span class="string">"f.txt"</span></span><br><span class="line"><span class="string">"./PYE/f.txt"</span></span><br></pre></td></tr></table></figure><h2 id="打开模式"><a href="#打开模式" class="headerlink" title="打开模式"></a>打开模式</h2><p><strong>文本形式、只读模式、默认值</strong></p><table><thead><tr><th>文件的打开模式</th><th>描述</th></tr></thead><tbody><tr><td>‘r’</td><td>只读模式，默认值，如果文件不存在，返回FileNotFoundError</td></tr><tr><td>‘w’</td><td>覆盖写模式，文件不存在则创建，存在则完全覆盖</td></tr><tr><td>‘x’</td><td>创建写模式，文件不存在则创建，存在则返回FileExistsError</td></tr><tr><td>‘a’</td><td>追加写模式，文件不存在则创建，存在则在文件最后追加内容</td></tr><tr><td>‘b’</td><td>二进制文件模式</td></tr><tr><td>‘t’</td><td>文本文件模式，默认值</td></tr><tr><td>‘+’</td><td>与r/w/x/a一同使用，在原功能基础上增加同时读写功能</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">"f.txt"</span>)</span><br><span class="line">f = open(<span class="string">"f.txt"</span>, <span class="string">"rt"</span>)</span><br><span class="line">f = open(<span class="string">"f.txt"</span>, <span class="string">"w"</span>)</span><br><span class="line">f = open(<span class="string">"f.txt"</span>, <span class="string">"a+"</span>)</span><br><span class="line">f = open(<span class="string">"f.txt"</span>, <span class="string">"x"</span>)</span><br><span class="line">f = open(<span class="string">"f.txt"</span>, <span class="string">"b"</span>)</span><br><span class="line">f = open(<span class="string">"f.txt"</span>, <span class="string">"wb"</span>)</span><br><span class="line">- 文本形式、只读模式、默认值</span><br><span class="line">- 文本形式、只读模式、同默认值</span><br><span class="line">- 文本形式、覆盖写模式</span><br><span class="line">- 文本形式、追加写模式+ 读文件</span><br><span class="line">- 文本形式、创建写模式</span><br><span class="line">- 二进制形式、只读模式</span><br><span class="line">- 二进制形式、覆盖写模式</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#文本形式打开文件</span></span><br><span class="line">tf = open(<span class="string">"f.txt"</span>, <span class="string">"rt"</span>)</span><br><span class="line">print(tf.readline())</span><br><span class="line">tf.close()</span><br><span class="line"><span class="comment">#二进制形式打开文件</span></span><br><span class="line">bf = open(<span class="string">"f.txt"</span>, <span class="string">"rb"</span>)</span><br><span class="line">print(bf.readline())</span><br><span class="line">bf.close()</span><br></pre></td></tr></table></figure><h2 id="文件内容的读取"><a href="#文件内容的读取" class="headerlink" title="文件内容的读取"></a>文件内容的读取</h2><table><thead><tr><th>操作方法</th><th>描述</th></tr></thead><tbody><tr><td><f>.read(size=-1)</f></td><td>读入全部内容，如果给出参数，读入前size长度 &gt;&gt;&gt;s = f.read(2) 中国</td></tr><tr><td><f>.readline(size=-1)</f></td><td>读入一行内容，如果给出参数，读入该行前size长度 &gt;&gt;&gt;s = f.readline() 中国是一个伟大的国家！</td></tr><tr><td><f>.readlines(hint=-1)</f></td><td>读入文件所有行，以每行为元素形成列表 如果给出参数，读入前hint行 &gt;&gt;&gt;s = f.readlines() [‘中国是一个伟大的国家！ ‘]</td></tr></tbody></table><p><strong>文件的逐行操作</strong> </p><p>逐行遍历文件：方法一</p><ul><li><strong>一次读入，分行处理</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fname = input(<span class="string">"请输入要打开的文件名称:"</span>)</span><br><span class="line">fo = open(fname,<span class="string">"r"</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> fo.readlines():</span><br><span class="line">print(line)</span><br><span class="line">fo.close()</span><br></pre></td></tr></table></figure><p>逐行遍历文件：方法二</p><ul><li><strong>分行读入，逐行处理</strong></li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fname = <span class="built_in">input</span>(<span class="string">"请输入要打开的文件名称:"</span>)</span><br><span class="line"><span class="keyword">fo</span> = <span class="keyword">open</span>(fname,<span class="string">"r"</span>)</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">line</span> in <span class="keyword">fo</span>:</span><br><span class="line"><span class="keyword">print</span>(<span class="built_in">line</span>)</span><br><span class="line"><span class="keyword">fo</span>.<span class="keyword">close</span>()</span><br></pre></td></tr></table></figure><h2 id="数据的文件写入"><a href="#数据的文件写入" class="headerlink" title="数据的文件写入"></a>数据的文件写入</h2><table><thead><tr><th>操作方法</th><th>描述</th></tr></thead><tbody><tr><td><f>.write(s)</f></td><td>向文件写入一个字符串或字节流 &gt;&gt;&gt;f.write(“中国是一个伟大的国家!”)</td></tr><tr><td><f>.writelines(lines)</f></td><td>将一个元素全为字符串的列表写入文件 &gt;&gt;&gt;ls = [“中国”, “法国”, “美国”] &gt;&gt;&gt;f.writelines(ls) 中国法国美国</td></tr><tr><td><f>.seek(offset)</f></td><td>改变当前文件操作指针的位置， offset含义如下： 0 – 文件开头； 1 – 当前位置； 2 – 文件结尾 &gt;&gt;&gt;f.seek(0) #回到文件开头</td></tr></tbody></table><p><strong>数据的文件写入</strong> </p><ul><li>写入一个字符串列表(没有任何输出)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fo = open(<span class="string">"output.txt"</span>,<span class="string">"w+"</span>)</span><br><span class="line">ls = [<span class="string">"中国"</span>, <span class="string">"法国"</span>, <span class="string">"美国"</span>]</span><br><span class="line">fo.writelines(ls)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> fo:</span><br><span class="line">print(line)</span><br><span class="line">fo.close()</span><br></pre></td></tr></table></figure><ul><li><p>写入一个字符串列表</p><blockquote><blockquote><blockquote><p>中国法国美国</p></blockquote></blockquote></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fo = open(<span class="string">"output.txt"</span>,<span class="string">"w+"</span>)</span><br><span class="line">ls = [<span class="string">"中国"</span>, <span class="string">"法国"</span>, <span class="string">"美国"</span>]</span><br><span class="line">fo.writelines(ls)</span><br><span class="line">fo.seek(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> fo:</span><br><span class="line">print(line)</span><br><span class="line">fo.close()</span><br></pre></td></tr></table></figure></li></ul><h2 id="with-open"><a href="#with-open" class="headerlink" title="with open"></a>with open</h2><p><strong>文件使用完毕后必须关闭，因为文件对象会占用操作系统的资源，并且操作系统同一时间能打开的文件数量也是有限的</strong>：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f.<span class="built_in">close</span>()</span><br></pre></td></tr></table></figure><p>由于文件读写时都有可能产生<code>IOError</code>，一旦出错，后面的<code>f.close()</code>就不会调用。所以，为了保证无论是否出错都能正确地关闭文件，我们可以使用<code>try ... finally</code>来实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = open(<span class="string">'/path/to/file'</span>, <span class="string">'r'</span>)</span><br><span class="line">    print(f.read())</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="keyword">if</span> f:</span><br><span class="line">        f.close()</span><br></pre></td></tr></table></figure><p>但是每次都这么写实在太繁琐，所以，Python引入了<code>with</code>语句来自动帮我们调用<code>close()</code>方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'/path/to/file'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    print(f.read())</span><br></pre></td></tr></table></figure><p>这和前面的<code>try ... finally</code>是一样的，但是代码更佳简洁，并且不必调用<code>f.close()</code>方法。</p><h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><p><strong>异常处理的基本使用</strong> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> :</span><br><span class="line">&lt;语句块<span class="number">1</span>&gt;</span><br><span class="line"><span class="keyword">except</span> :</span><br><span class="line">&lt;语句块<span class="number">2</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> :</span><br><span class="line">&lt;语句块<span class="number">1</span>&gt;</span><br><span class="line"><span class="keyword">except</span> &lt;异常类型&gt; :</span><br><span class="line">&lt;语句块<span class="number">2</span>&gt;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> :</span><br><span class="line">num = eval(input(<span class="string">"请输入一个整数: "</span>))</span><br><span class="line">print(num**<span class="number">2</span>)</span><br><span class="line"><span class="keyword">except</span> :</span><br><span class="line">print(<span class="string">"输入不是整数"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> :</span><br><span class="line">num = eval(input(<span class="string">"请输入一个整数: "</span>))</span><br><span class="line">print(num**<span class="number">2</span>)</span><br><span class="line"><span class="keyword">except</span> NameError:</span><br><span class="line">print(<span class="string">"输入不是整数"</span>)</span><br><span class="line">示例</span><br><span class="line">标注异常类型后，仅响应此类异常</span><br><span class="line">异常类型名字等同于变量名</span><br></pre></td></tr></table></figure><h2 id="异常处理的高级使用"><a href="#异常处理的高级使用" class="headerlink" title="异常处理的高级使用"></a><strong>异常处理的高级使用</strong></h2><ul><li>finally对应语句块4一定执行</li><li>else对应语句块3在不发生异常时执行 </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> :</span><br><span class="line">&lt;语句块<span class="number">1</span>&gt;</span><br><span class="line"><span class="keyword">except</span> :</span><br><span class="line">&lt;语句块<span class="number">2</span>&gt;</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">&lt;语句块<span class="number">3</span>&gt;</span><br><span class="line"><span class="keyword">finally</span> :</span><br><span class="line">&lt;语句块<span class="number">4</span>&gt;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">   ...</span><br><span class="line"><span class="keyword">except</span> xxx <span class="keyword">as</span> xx:</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = urllib.request.urlopen(<span class="string">'http://httpbin.org/get'</span>,timeout=<span class="number">1</span>)</span><br><span class="line"><span class="keyword">except</span> urllib.error.URLError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="keyword">if</span> isinstance(e.strerror,socket.timeout):</span><br><span class="line">        print(<span class="string">'TIME OUT'</span>)</span><br></pre></td></tr></table></figure><h1 id="python第三方库"><a href="#python第三方库" class="headerlink" title="python第三方库"></a>python第三方库</h1><p><a href="https://pypi.org/" target="_blank" rel="noopener">Python社区</a></p><p><strong>PyPI</strong></p><ul><li>PyPI: Python Package Index</li><li>PSF维护的展示全球Python计算生态的主站</li><li>学会检索并利用PyPI，找到合适的第三方库开发程序 </li></ul><p>实例：开发与区块链相关的程序</p><ul><li>第1步：在pypi.org搜索 blockchain</li><li>第2步：挑选适合开发目标的第三方库作为基础</li><li>第3步：完成自己需要的功能 </li></ul><p><img src="/2019/10/python/python/python/E:%5CUsers%5C11623%5CDocuments%5Cmy_note%5Cpython%5Cpython%5C1573005013430.png" alt="1573005013430"></p><h2 id="三种方法"><a href="#三种方法" class="headerlink" title="三种方法"></a>三种方法</h2><ul><li>方法1(主要方法): 使用pip命令</li><li>方法2: 集成安装方法</li><li>方法3: 文件安装方法 </li></ul><p>pip -h</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">E:\Users\11623\Anaconda3\Lib\site-packages&gt;pip -h</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  pip &lt;command&gt; [options]</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  install                     Install packages.</span><br><span class="line">  download                    Download packages.</span><br><span class="line">  uninstall                   Uninstall packages.</span><br><span class="line">  freeze                      Output installed packages in requirements format.</span><br><span class="line">  list                        List installed packages.</span><br><span class="line">  show                        Show information about installed packages.</span><br><span class="line">  check                       Verify installed packages have compatible dependencies.</span><br><span class="line">  config                      Manage local and global configuration.</span><br><span class="line">  search                      Search PyPI for packages.</span><br><span class="line">  wheel                       Build wheels from your requirements.</span><br><span class="line">  hash                        Compute hashes of package archives.</span><br><span class="line">  completion                  A helper command used for command completion.</span><br><span class="line">  debug                       Show information useful for debugging.</span><br><span class="line">  help                        Show help for commands.</span><br></pre></td></tr></table></figure><h2 id="pip常用指令"><a href="#pip常用指令" class="headerlink" title="pip常用指令"></a>pip常用指令</h2><p>安装指定的第三方库 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install &lt;第三方库名&gt;</span><br></pre></td></tr></table></figure><p>使用-U标签更新已安装的指定第三方库 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install –U &lt;第三方库名&gt;</span><br></pre></td></tr></table></figure><p>卸载指定的第三方库 </p><p>D:&gt;pip uninstall &lt;第三方库名&gt;</p><p>下载但不安装指定的第三方库 </p><p>D:&gt;pip download &lt;第三方库名&gt;</p><p>列出某个指定第三方库的详细信息 </p><p>D:&gt;pip show &lt;第三方库名&gt;</p><p>根据关键词在名称和介绍中搜索第三方库 </p><p>D:&gt;pip search &lt;关键词&gt;</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip search blockchain</span><br></pre></td></tr></table></figure><p>D:&gt;pip list</p><ul><li>列出当前系统已经安装的第三方库 </li></ul><h2 id="第三方库的集成安装方法-Anaconda"><a href="#第三方库的集成安装方法-Anaconda" class="headerlink" title="第三方库的集成安装方法 Anaconda"></a>第三方库的集成安装方法 Anaconda</h2><p>集成安装：结合特定Python开发工具的批量安装 </p><p><a href="https://www.continuum.io" target="_blank" rel="noopener">https://www.continuum.io</a></p><ul><li>支持近800个第三方库</li><li>包含多个主流工具</li><li>适合数据计算领域开发 </li></ul><h3 id="Anaconda跟换国内镜像源"><a href="#Anaconda跟换国内镜像源" class="headerlink" title="Anaconda跟换国内镜像源"></a>Anaconda跟换国内镜像源</h3><p><a href="https://blog.csdn.net/dream_allday/article/details/80344511" target="_blank" rel="noopener">https://blog.csdn.net/dream_allday/article/details/80344511</a></p><h2 id="文件安装方法"><a href="#文件安装方法" class="headerlink" title="文件安装方法"></a>文件安装方法</h2><p>为什么有些第三方库用pip可以下载，但无法安装？</p><ul><li>某些第三方库pip下载后，需要编译再安装</li><li>如果操作系统没有编译环境，则能下载但不能安装</li><li>可以直接下载编译后的版本用于安装吗？ </li></ul><p><a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/" target="_blank" rel="noopener">http://www.lfd.uci.edu/~gohlke/pythonlibs/</a> </p><p>实例：安装wordcloud库</p><ul><li>步骤1：在UCI页面上搜索wordcloud</li><li>步骤2：下载对应版本的文件</li><li>步骤3：使用pip install &lt;文件名&gt;安装 </li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;&lt;h1 id=&quot;python语法&quot;&gt;&lt;a href=&quot;#python语法&quot; class=&quot;headerlink&quot; title=&quot;python语法&quot;&gt;&lt;/a&gt;python语法&lt;/h1&gt;&lt;h2 id=&quot;分支语法&quot;&gt;&lt;a href=&quot;#分支语法&quot; class=&quot;headerlink&quot; title=&quot;分支语法&quot;&gt;&lt;/a&gt;分支语法&lt;/h2&gt;&lt;h3 id=&quot;条件判断&quot;&gt;&lt;a href=&quot;#条件判断&quot; class=&quot;headerlink&quot; title=&quot;条件判断&quot;&gt;&lt;/a&gt;条件判断&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;用于条件组合的三个保留字&lt;/strong&gt; &lt;/p&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作符及使用&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;x and y&lt;/td&gt;
&lt;td&gt;两个条件x和y的逻辑与&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;x or y&lt;/td&gt;
&lt;td&gt;两个条件x和y的逻辑或&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;not x&lt;/td&gt;
&lt;td&gt;条件x的逻辑非&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作符&lt;/th&gt;
&lt;th&gt;数学符号&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&amp;lt;&lt;/td&gt;
&lt;td&gt;&amp;lt;&lt;/td&gt;
&lt;td&gt;小于&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt;=&lt;/td&gt;
&lt;td&gt;≤&lt;/td&gt;
&lt;td&gt;小于等于&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;gt;=&lt;/td&gt;
&lt;td&gt;≥&lt;/td&gt;
&lt;td&gt;大于等于&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;gt;&lt;/td&gt;
&lt;td&gt;&amp;gt;&lt;/td&gt;
&lt;td&gt;大于&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;=&lt;/td&gt;
&lt;td&gt;等于&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;！ =&lt;/td&gt;
&lt;td&gt;≠&lt;/td&gt;
&lt;td&gt;不等于&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://codeofli.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://codeofli.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>html-css</title>
    <link href="https://codeofli.github.io/2019/10/front-end/html-css/html-css/"/>
    <id>https://codeofli.github.io/2019/10/front-end/html-css/html-css/</id>
    <published>2019-10-14T14:19:09.000Z</published>
    <updated>2019-11-13T12:20:26.860Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="初步了解"><a href="#初步了解" class="headerlink" title="初步了解"></a>初步了解</h1><h2 id="软件的架构"><a href="#软件的架构" class="headerlink" title="软件的架构"></a>软件的架构</h2><p>C/S，客户端/服务器<br>    1.一般我们使用的软件都是C/S架构<br>    2.比如系统的中的软件QQ、360、office、XMind<br>    3.C表示客户端，用户通过客户端来使用软件<br>    4.S表示服务器，服务器负责处理软件的业务逻辑<br>    特点<br>        1.软件使用前必须得安装<br>        2.软件更新时，服务器和客户端得同时更新<br>        3.C/S架构的软件不能跨平台使用<br>        4.C/S架构的软件客户端和服务器通信采用的是自有协议，相对来说比较安全<br>B/S，浏览器/服务器<br>    1.B/S本质上也是C/S，只不过B/S架构的软件，使用浏览器作为软件的客户端<br>    2.B/S架构软件通过使用浏览器访问网页的形式，来使用软件<br>    3.比如：京东 淘宝 12306 知乎 新浪微博<br>    特点<br>        1.软件不需要安装，直接使用浏览器访问指定的网址即可<br>        2.软件更新时，客户端不需要更新<br>        3.软件可以跨平台，只要系统中有浏览器，就可以使用<br>        4.B/S架构的软件，客户端和服务器之间通信采用的是通用的HTTP协议，相对来说不安全</p><a id="more"></a><h2 id="乱码的问题"><a href="#乱码的问题" class="headerlink" title="乱码的问题"></a>乱码的问题</h2><pre><code>乱码出现的原因计算机是一个非常笨的机器，它只认识两个东西 0 1在计算机中保存的任何内容，最终都需要转换为0 1这种二进制编码来保存，包括网页中的内容比如：中国，在计算机底层，可以能需要转换为 1010001001010101011010在读取内容时，需要将二进制编码，在转换为正确的内容编码依据一定的规则，将字符转换为二进制编码的过程解码依据一定的规则，将二进制编码转换为字符的过程字符集编码和解码所采用的规则，我们称为字符集常见的字符集ASCIIISO-8859-1GBKGB2312中文系统的默认编码UTF-8万国码，支持地球上所有的文字ANSI自动以系统的默认编码来保存文件产生乱码的根本原因是，编码和解码采用的字符集不同在中文系统的浏览器中，默认都是使用GB2312进行解码的</code></pre><h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><h2 id="网页的结构"><a href="#网页的结构" class="headerlink" title="网页的结构"></a>网页的结构</h2><p>一个网页有三个部分组成</p><h3 id="结构html"><a href="#结构html" class="headerlink" title="结构html"></a>结构html</h3><p>结构是页面的整体结构，哪里是标题，哪里是段落，哪里是图片<br>结构使用HTML来编写</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="表现css"><a href="#表现css" class="headerlink" title="表现css"></a>表现css</h3><p>表现是页面的外在的样式，比如字体，字体大小，字体颜色，背景。。。<br>使用CSS来设置页面中元素的样式</p><h3 id="行为js"><a href="#行为js" class="headerlink" title="行为js"></a>行为js</h3><p>页面和用户之间的交互行为<br>使用JavaScript来设置页面的行为<br>一个设计优良的网页要求结构、表现、行为三者分离<br>在开发中总是要面临一个问题，就是程序之间的耦合，三者分离就是为了解耦合<br>HTML，超文本标记语言<br>负责页面中的结构，定义出页面中的各个组成部分<br>HTML是采用纯文本的形式的编写，采用HTML标签来标识出页面中的不同部分</p><h2 id="标签-元素"><a href="#标签-元素" class="headerlink" title="标签(元素)"></a>标签(元素)</h2><p>成对出现<br>    &lt;标签名&gt;&lt;/标签名&gt;<br>自结束标签<br>    &lt;标签名 /&gt;</p><h3 id="块元素和内联元素"><a href="#块元素和内联元素" class="headerlink" title="块元素和内联元素"></a>块元素和内联元素</h3><h4 id="块元素"><a href="#块元素" class="headerlink" title="块元素"></a>块元素</h4><pre><code>**块元素会独占页面中的一行，无论他的内容的多少**一般使用块元素对页面进行布局常见的块元素    div    p    h1~h6</code></pre><h4 id="内联元素"><a href="#内联元素" class="headerlink" title="内联元素"></a>内联元素</h4><pre><code>    **内联元素只占用自身的大小，不会独占一行**    内联元素也叫行内元素（inline）    一般内联元素都是用来为文本来设置效果    常见的内联        span        a        img包裹规则    **一般都是使用块元素去包裹内联元素，而不会使用内联去包裹块元素**    **a元素可以包含任意元素，除了a本身**    **p元素不能包含任何块元素**</code></pre><h3 id="元素之间的关系"><a href="#元素之间的关系" class="headerlink" title="元素之间的关系"></a>元素之间的关系</h3><pre><code>父元素    **直接**包含子元素的的元素叫做父元素子元素    **直接被**父元素包含的元素叫做子元素祖先元素    **直接或间接**包含后代元素的元素叫做祖先元素，父元素也是祖先元素后代元素    直接或间接被祖先元素包含的元素叫后代元素，子元素也是后代元素兄弟元素    拥有**相同父元素**的元素叫做兄弟元素</code></pre><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>通过属性可以设置标签的效果<br>属性需要定义在开始标签中或这自结束标签中<br>属性实际上是一组一组名值对结构<br>例子：<br>&lt;标签名 属性名=”属性值” 属性名=”属性值”&gt;&lt;/标签名&gt;<br>&lt;标签名 属性名=”属性值” 属性名=”属性值” /&gt;</p><h3 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a>常用标签</h3><p>HTML页面的基本结构<br>文档声明<br><code>&lt;!doctype html&gt;</code><br>用来标识当前页面的html的版本<br>该声明用来告诉浏览器，当前的页面是使用HTML5的标准编写的<br><code>&lt;html&gt;</code><br>网页的根标签<br>一个页面中有且只有一个根标签<br>网页中的所有内容都需要写在html标签的内部<br><code>&lt;head&gt;</code><br>网页的头部<br>该标签中的内容不会在网页中直接显示<br>该标签用于帮助浏览器解析页面<br>子标签<br><code>&lt;title&gt;</code><br>用来设置网页的标题<br>默认会在浏览器的标题栏中显示<br>搜索引擎检索网页时，会主要检索title中的内容，它会影响到页面在搜索引擎中的排名<br><code>&lt;meta&gt;</code><br>用来设置网页的元数据，比如网页使用的字符集<br><code>&lt;meta charset=&quot;utf-8&quot; /&gt;</code><br>设置网页的关键字<br><code>&lt;meta name=&quot;keywords&quot; content=&quot;关键字,关键字,关键字,关键字&quot;/&gt;</code><br>设置网页的描述<br><code>&lt;meta name=&quot;description&quot; content=&quot;网页的描述&quot;/&gt;</code><br>请求的重定向<br><code>&lt;meta http-equiv=&quot;refresh&quot; content=&quot;秒数;url=地址&quot;  /&gt;</code><br><code>&lt;body&gt;</code><br>网页的主体<br>网页中所有的可见部分都需要在body中编写<br><code>&lt;h1&gt;</code> ~ <code>&lt;h6&gt;</code><br>标题标签<br>在html中一共有六级标题<br>六级标题中，h1最重要，h6最不重要，一般页面中只会使用h1~h3<br>h1的重要性仅次于title，浏览器也会主要检索h1中的内容，以判断页面的主要内容<br>一般一个页面中只能写一个h1<br><code>&lt;p&gt;</code><br>段落标签<br><code>&lt;br /&gt;</code><br>换行标签<br><code>&lt;hr /&gt;</code><br>水平线标签<br>内联框架<br>可以向一个页面中引入其他的外部页面<br><code>&lt;iframe&gt;``&lt;/iframe&gt;</code><br>属性<br>src<br>外部页面的地址，可以使用相对路径<br>width和height<br>可以设置框架的宽度和高度<br>name<br>可以为内联框架指定一个名字<br>可以将该属性值设置为超链接的target属性的值<br>这样当点击超链接时，页面将会在相应的内联框架中打开<br>内联框架中的内容不会被搜索引擎所检索，所以开发中尽量不要使用内联框架</p><p><strong><code>&lt;a&gt;</code>超链接</strong><br>            可以使当前页面跳转到其他的页面<br>            <code>&lt;a&gt;</code>链接的文字<code>&lt;/a&gt;</code><br>            属性<br>                href<br>                    指向链接跳转的目标地址，可以是一个相对路径<br>                    还可以是#id属性值，这样当点击超链接以后，将会跳转到当前页面的指定位置<br>                    可以使用mailto:来创建一个发送电子邮件的超链接<br>                target<br>                    指定在哪个窗口中打开链接<br>                    可选值<br>                        _self<br>                            默认值，默认在当前窗口打开链接<br>                        _blank<br>                            在新窗口中打开链接<br>                        内联框架的name属性值<br>                            在指定的内联框架中打开链接</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><pre><code>    &lt;!-- 注释内容 --&gt;注释中的内容不会在页面中显示，但是会在源码中显示，我们可以通过注释来说明网页的代码也可以通过注释隐藏一些页面中不想显示的内容</code></pre><h3 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h3><pre><code>在HTML页面中一些特殊符号是不能直接使用，需要使用实体来代替这些特殊符号实体也可以称为转义字符</code></pre><p>实体的语法<br>            &amp;实体名;<br>常用的实体<br>            空格<code>&amp;nbsp;</code> Non-Breaking <a href="https://www.baidu.com/s?wd=Space&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao" target="_blank" rel="noopener">Space</a>” 的缩写，  </p><p>  &lt;<code>&amp;lt;</code>    、&gt;<code>&amp;gt;</code>、版权符号&copy;<code>&amp;copy;</code></p><p>图片标签<br>    <img><br>    使用图片标签可以向页面中引入一个外部图片<br>    属性<br>        src<br>            指向一个外部图片的路径，可以使用相对路径<br>        alt<br>            指定一个在图片无法加载时对图片的描述<br>            搜索引擎主要通过该属性来识别图片的内容<br>            如果不写该属性则搜索引擎会对图片进行收录<br>        width<br>            设置图片的宽度<br>        height<br>            设置图片的高度<br>    图片的格式<br>        JPEG<br>            颜色丰富的图片，如，照片<br>        GIF<br>            颜色单一，简单透明的图片，动态图<br>        PNG<br>            颜色丰富，复杂透明的图片<br>        图片选择的原则<br>            效果一致，用小的<br>            效果不一致，用效果好的<br>相对路径<br>    相对于当前资源所在的目录的路径<br>    可以使用../返回一级目录，返回几级使用几个../<br>xHtml语法规范<br>    1.HTML中不区分大小写，但是尽量使用小写<br>    2.HTML的注释不能嵌套<br>    3.标签必须结构完整<br>        要么成对出现<br>        要么自结束标签<br>    4.标签可以嵌套但是不能交叉嵌套<br>    5.属性必须有值，且值必须加引号，单引号双引号都可以</p><h2 id="文本标签"><a href="#文本标签" class="headerlink" title="文本标签"></a>文本标签</h2><pre><code>    `&lt;em&gt;`        表示语气上的强调    `&lt;strong&gt;`        表示内容的重要性    `&lt;i&gt;`        表示单纯的斜体`&lt;b&gt;`        表示单纯的加粗    `&lt;small&gt;`        表示细则一类的内容    `&lt;cite&gt;`        表示参考的内容，凡是加书名号的都可以使用cite    `&lt;q&gt;`        短引用，行内引用</code></pre><p><code>&lt; blockquote&gt;</code></p><p>长引用，块级引用</p><p><code>&lt;sup&gt;</code><br>上标<br><code>&lt;sub&gt;</code><br>下标<br><code>&lt;del&gt;</code><br>删除的内容<br><code>&lt;ins&gt;</code><br>插入的内容</p><p><code>&lt; pre&gt;</code><br>预格式标签，可以保留代码中空格换行这些格式<br><code>&lt; code&gt;</code><br>表示程序代码</p><h1 id="css基础"><a href="#css基础" class="headerlink" title="css基础"></a>css基础</h1><p>Cascading（级联） Style Sheets(薄片，纸张，覆盖)，层叠样式表</p><h2 id="css样式三种方式"><a href="#css样式三种方式" class="headerlink" title="css样式三种方式"></a>css样式三种方式</h2><h3 id="内联样式"><a href="#内联样式" class="headerlink" title="内联样式"></a>内联样式</h3><p>可以将css样式编写到元素的style属性中<br>将样式直接编写在style属性中，这样的样式成为内联样式<br>只对当前元素（标签）有效，不方便复用<br>内联样式属于结构与表现耦合，不方便后期维护</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"color: red; font-size: 40px"</span>&gt;</span>锄禾日当午，汗滴禾下土<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>谁知盘中餐，粒粒皆辛苦<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="head编写style便签"><a href="#head编写style便签" class="headerlink" title="head编写style便签"></a>head编写style便签</h3><p>也可以将CSS样式编写到head中的style标签里<br>将样式表编写的style标签中，然后通过CSS选择器选中指定元素<br>然后可以同时为这些元素一起设置样式，这样可以使样式进一步的复用<br>将样式表编写到style标签中，也可以使表现和结构进一步分离它也是我们推荐的使用方式    </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">p</span>&#123;  <span class="attribute">color</span>: red; </span></span><br><span class="line">        font-size: 40px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="外部的CSS文件"><a href="#外部的CSS文件" class="headerlink" title="外部的CSS文件"></a>外部的CSS文件</h3><p>还可以将样式表编写到<strong>外部的CSS文件中</strong>,然后通过<strong>link标签来将外部的CSS文件引入到当前页面中</strong>，<br>这样外部文件中的css样式表将会应用到当前页面中。</p><p>将CSS样式统一编写到外部的样式表中，完全使结构和表现分离，可以是样式表可以在不同的页面中使用，<br>最大限度的使样式可以进行复用，将样式统一写在样式表中，然后通过link标签引入，可以利用浏览器的缓存<br>加快用户访问的速度提高了用户体验，所以在开发中我们最推荐使用的方式就是外部的CSS文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"style.css"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="css语法："><a href="#css语法：" class="headerlink" title="css语法："></a>css语法：</h2><p>选择器、声明块、注释</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">    /*</span><br><span class="line">    CSS的注释，作用和HTML注释类似，只不过它必须编写在style标签中，或者是css文件中</span><br><span class="line"></span><br><span class="line">    CSS的语法：</span><br><span class="line"></span><br><span class="line">    选择器 声明块</span><br><span class="line"></span><br><span class="line">    选择器：</span><br><span class="line">    - 通过选择器可以选中页面中指定的元素，</span><br><span class="line">    并且将声明块中的样式应用到选择器对应的元素上</span><br><span class="line"></span><br><span class="line">    声明块：</span><br><span class="line"><span class="css">    <span class="selector-tag">-</span> 声明块紧跟在选择器的后边，使用一对&#123;&#125;括起来，</span></span><br><span class="line">    声明块中实际上就是一组一组的名值对结构，</span><br><span class="line">    这一组一组的名值对我们称为声明，</span><br><span class="line">    在一个声明块中可以写多个声明，多个声明之间使用;隔开，</span><br><span class="line">    声明的样式名和样式值之间使用:来连接</span><br><span class="line">    */</span><br><span class="line">    p&#123;</span><br><span class="line"><span class="css">        <span class="selector-tag">color</span><span class="selector-pseudo">:red</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">font-size</span><span class="selector-pseudo">:50px</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="单位"><a href="#单位" class="headerlink" title="单位"></a>单位</h2><h3 id="长度单位"><a href="#长度单位" class="headerlink" title="长度单位"></a>长度单位</h3><pre><code>**px**    像素，像素就是构成一个图片的最小的单位，我们的屏幕就是由一个一个像素点构成    一个像素指的就是一个像素点    在不同的显示器中，一个像素的大小是不同的，越清晰的屏幕像素越小</code></pre><p>   <strong>%</strong><br>            可以将一个元素的样式值设置为一个百分比的值，这样浏览器将会根据父元素的值去计算出相应的值<br>            当父元素的值改变时，子元素的值会按照一定比例一起改变，经常用于自适应的页面<br>        <strong>em</strong><br>            em会相对于当前元素的字体大小来计算<br>            1em = 1font-size<br>            em经常用于设置文字相关的一些样式，因为当文字大小发生改变时，em会随之改变</p><p><strong>rem….</strong></p><h3 id="颜色单位"><a href="#颜色单位" class="headerlink" title="颜色单位"></a>颜色单位</h3><p>颜色单词<br>            直接使用英文单词来表示颜色<br>            red green blue orange<br>RGB值<br>            所谓RGB值就是通过红 绿 蓝三元色的不同组合来搭配出各种不同的颜色<br>语法：<br>rgb(红色,绿色,蓝色)<br>这三个值需要一个0-255之间的值<br>    0表示没有<br>    255表示最大<br>    rgb(50,200,30)<br>也可以使用百分数来设置RGB值，需要0%-100%之间的值<br>    百分数最终也是转换为0-255的<br>    0%相当于0<br>    100%相当于255<br>    rgb(100%,0%,0%)<br>十六进制RGB值<br>也是一种RGB值的表示方式，不同的是它使用的是16进制数字来表示而不是<br>语法：<br>    #红色绿色蓝色<br>这里的颜色需要一个00-ff之间的值<br>例子：<br>    #ff0000<br>如果颜色的是两位两位重复的，可以进行简写<br>    比如 #aabbcc 可以写成 #abc<br>    比如 #bbffaa 可以写成 #bfa</p><h2 id="文本样式"><a href="#文本样式" class="headerlink" title="文本样式"></a>文本样式</h2><p>字体<br>color<br>    字体的颜色<br>font-size<br>    字体的大小<br>    浏览器中默认的字体大小一般都是16px，而我们开发时一般会统一为12px<br>font-family<br>    设置文字的字体<br>font-style<br>    设置斜体<br>font-weight<br>    设置文字的加粗<br>font-variant<br>    小型大写字母<br>font<br>文字的简写属性<br>可以同时设置所有的字体相关的样式<br>语法：<br>    font: [加粗 斜体 小大字母] 大小[/行高] 字体<br>加粗，斜体，小大字母，顺序无所谓，写不写都行，如果不写在使用默认值<br>文本大小，和字体必须写，且大小必须是倒数第二个，字体必须是最后一个<br>大小后可以设置行高，可写可不写，如果不写则使用默认值<br>        文本样式<br>            line-height<br>                <strong>行高**</strong><br>                <strong>文本默认都是在行高中垂直居中的</strong><br>                <strong>通过line-height可以修改行高</strong><br>                行间距 = 行高 - 字体大小**</p><pre><code>text-transform    设置文本的大小写</code></pre><p>可选值：<br>    none 默认值，该怎么显示就怎么显示，不做任何处理<br>    capitalize 单词的首字母大写，通过空格来识别单词<br>    uppercase 所有的字母都大写<br>    lowercase 所有的字母都小写</p><pre><code>text-decoration    设置文本修饰</code></pre><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="comment">/*超链接会默认添加下划线，也就是超链接的text-decoration的默认值是underline</span></span><br><span class="line"><span class="comment">    如果需要去除超链接的下划线则需要将该样式设置为none</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>text-align    设置文本对齐text-indent    设置首行缩进    它需要一个长度单位，如果是正值则首行向右移动，如果是负值则向左移动</code></pre><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* text-indent用来设置首行缩进</span></span><br><span class="line"><span class="comment">* 当给它指定一个正值时，会自动向右侧缩进指定的像素</span></span><br><span class="line"><span class="comment">* 如果为它指定一个负值，则会向左移动指定的像素,</span></span><br><span class="line"><span class="comment">* 通过这种方式可以将一些不想显示的文字隐藏起来</span></span><br><span class="line"><span class="comment">*  这个值一般都会使用em作为单位</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>letter-spacing<br>    字符间距<br>word-spacing<br>    单词间距</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 在CSS并没有为我们提供一个直接设置行间距的方式，</span></span><br><span class="line"><span class="comment"> * 我们只能通过设置行高来间接的设置行间距，行高越大行间距越大</span></span><br><span class="line"><span class="comment"> * 使用line-height来设置行高 </span></span><br><span class="line"><span class="comment"> * 行高类似于我们上学单线本，单线本是一行一行，线与线之间的距离就是行高，</span></span><br><span class="line"><span class="comment"> * 网页中的文字实际上也是写在一个看不见的线中的，而文字会默认在行高中垂直居中显示</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 行间距 = 行高 - 字体大小</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="selector-class">.p1</span>&#123;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 通过设置line-height可以间接的设置行高，</span></span><br><span class="line"><span class="comment"> * 可以接收的值：</span></span><br><span class="line"><span class="comment"> * 1.直接就收一个大小</span></span><br><span class="line"><span class="comment"> * 2.可以指定一个百分数，则会相对于字体去计算行高</span></span><br><span class="line"><span class="comment"> * 3.可以直接传一个数值，则行高会设置字体大小相应的倍数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/*line-height: 200%;*/</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">round-color</span>: <span class="number">#bfa</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 对于单行文本来说，可以将行高设置为和父元素的高度一致，</span></span><br><span class="line"><span class="comment"> * 这样可以是单行文本在父元素中垂直居中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.p2</span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 在font中也可以指定行高</span></span><br><span class="line"><span class="comment"> * 在字体大小后可以添加/行高，来指定行高，该值是可选的，如果不指定则会使用默认值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="attribute">font</span>: <span class="number">30px</span> <span class="string">"微软雅黑"</span>;</span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h1><p>通过选择器可以选中页面中的一组元素，然后为其设置样式</p><h2 id="基础选择器"><a href="#基础选择器" class="headerlink" title="基础选择器"></a>基础选择器</h2><h4 id="元素选择器"><a href="#元素选择器" class="headerlink" title="元素选择器"></a>元素选择器</h4><p>根据标签名，选中页面中的指定元素<br>语法：标签名{ }<br>例子：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;&#125;</span><br><span class="line"><span class="selector-tag">p</span>&#123;&#125;</span><br><span class="line"><span class="selector-tag">h1</span>&#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h4><p>根据元素的id属性值选中一个唯一的元素<br>语法：#id {}<br>例子：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#box1</span>&#123;&#125;</span><br><span class="line"><span class="selector-id">#hello</span>&#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h4><p>我们可以为元素设置class属性，</p><p>class属性和id属性类似，只不过class属性可以重复</p><p>拥有相同class属性值的元素，我们说他们是一组元素</p><p>可以同时为一个元素设置多个class属性值，多个值之间使用空格隔开</p><p>根据元素的class属性值，选中一组元素<br>语法：.class{}<br>例子：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.hello</span>&#123;&#125;</span><br><span class="line"><span class="selector-class">.box</span>&#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="通配选择器"><a href="#通配选择器" class="headerlink" title="通配选择器"></a>通配选择器</h4><p>选中页面中的所有元素<br>语法：*{}<br>通配选择器的性能比较差，尽量避免使用</p><h4 id="并集选择器"><a href="#并集选择器" class="headerlink" title="并集选择器"></a>并集选择器</h4><p>可以同时选中符合多个选择器的元素<br>语法：选择器1,选择器2,选择器N{}<br>例子：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>,<span class="selector-tag">p</span>,<span class="selector-id">#box</span>,<span class="selector-class">.hello</span>&#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="交集选择器"><a href="#交集选择器" class="headerlink" title="交集选择器"></a>交集选择器</h4><p><strong>对于id选择器来说，不建议使用复合选择器</strong>,因为id已经能唯一标识</p><p>可以选中满足多个条件的元素</p><p>先元素再类</p><p>语法：选择器1选择器2选择器N{}</p><p>例子：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-class">.hello</span>&#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="后代元素选择器"><a href="#后代元素选择器" class="headerlink" title="后代元素选择器"></a>后代元素选择器</h4><p>选中指定元素的指定后代元素<br>语法：祖先元素 （空格）后代元素{}<br>例子：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">span</span> &#123;&#125;</span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">p</span>&#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="子元素选择器"><a href="#子元素选择器" class="headerlink" title="子元素选择器"></a>子元素选择器</h4><p><strong>选中指定元素的指定子元素</strong><br>语法：父元素 &gt; 子元素 {}<br>例子：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &gt; <span class="selector-tag">span</span> &#123;&#125;</span><br><span class="line"><span class="selector-tag">div</span> &gt; <span class="selector-tag">p</span>&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="声明块"><a href="#声明块" class="headerlink" title="声明块"></a>声明块</h3><p>声明块中实际上就是一个一个CSS声明<br>声明<br>每一个CSS声明都是一个样式，实际上就是一个名值对的结构<br>名和值之间使用:链接<br>:左边是样式的名字<br>:右边是样式的值<br>每一个声明以;结尾<br>例子</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">color</span><span class="selector-pseudo">:red</span>;</span><br><span class="line"><span class="selector-tag">font-size</span><span class="selector-pseudo">:20px</span>;</span><br></pre></td></tr></table></figure><h2 id="伪类和伪元素"><a href="#伪类和伪元素" class="headerlink" title="伪类和伪元素"></a>伪类和伪元素</h2><p>伪类和伪元素用来表示元素所处的一个特殊的状态，或者是一个特殊的位置</p><h3 id="伪类："><a href="#伪类：" class="headerlink" title="伪类："></a>伪类：</h3><p>:link<br>        表示一个普通的链接（未访问过的链接）<br>:visited<br>        表示访问过的链接</p><p>浏览器是通过历史记录来判断一个链接是否访问过,由于涉及到用户的隐私问题，所以使用visited伪类只能设置字体的颜色</p><pre><code>:hover（盘旋，徘徊）    鼠标移入的链接，也可以为其他元素设置hover:active    正在被点击的链接，也可以为其他元素设置active:focus    表示元素获取焦点的状态，一般用于文本框::selection（注意有两个冒号）    表示内容被选中的状态    在火狐中使用::-moz-selection来代替</code></pre><h3 id="伪元素："><a href="#伪元素：" class="headerlink" title="伪元素："></a>伪元素：</h3><p>:first-letter<br>        表示第一个字符<br>    :first-line<br>        表示文字的第一行<br>    :before<br>        选中元素的最前边<br>        一般该伪类都会结合content一起使用，通过content可以向指定位置添加内容<br>    :after<br>        选中元素的最后边<br>        一般该伪类都会结合content一起使用，通过content可以向指定位置添加内容</p><h2 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h2><pre><code>根据元素的属性选择指定元素[属性名]    选取含有指定属性的元素[属性名=&quot;属性值&quot;]    选取属性值等于指定值的元素[属性名^=&quot;属性值&quot;]    选取属性值以指定内容**开头的元素**[属性名$=&quot;属性值&quot;]    选取属性值以指定内容结尾的元素[属性名*=&quot;属性值&quot;]    选取属性值中**包含指定内容的元素**</code></pre><h2 id="子元素的伪类"><a href="#子元素的伪类" class="headerlink" title="子元素的伪类"></a>子元素的伪类</h2><pre><code>:first-child    寻找父元素的第一个子元素，**在所有的子元素中排序**（前面不指定特定元素就表示全部元素,指定就是交集选择器）:last-child    寻找父元素的最后一个子元素，在所有的子元素中排序:nth-child    寻找父元素中的指定位置子元素，在所有的子元素中排序    例子        p:nth-child(3)        可以使用even，来找到偶数的子元素        可以使用odd，来找到奇数的子元素:first-of-type    寻找指定类型中的第一个子元素:last-of-type    寻找指定类型中的最后一个子元素:nth-of-type    寻找指定类型中的指定子元素</code></pre><p><strong>:empty</strong></p><p>Selects elements that don’t have any other elements inside of them.</p><p><strong>div:empty</strong> selects all empty <strong><div></div></strong> elements.</p><p><strong>:nth-of-type(A)</strong></p><p>Selects a specific element based on its type and order in another element - or even or odd instances of that element.</p><p><strong>div:nth-of-type(2)</strong> selects the second instance of a div.</p><p><strong>.example:nth-of-type(odd)</strong> selects all odd instances of a the example class.</p><p>:only-child</p><p>You can select any element that is the only element inside of another one.</p><p><strong>:nth-last-child(A)</strong></p><p>Selects the children from the bottom of the parent. This is like nth-child, but counting from the back!</p><p>Nth-of-type Selector with Formula</p><p><strong>:nth-of-type(An+B)</strong></p><p>The nth-of-type formula selects every nth element, starting the count at a specific instance of that element.</p><p><strong>span:nth-of-type(6n+2)</strong> selects every 6th instance of a span, starting from (and including) the second instance.</p><p><strong>:only-of-type</strong></p><p>Selects the only element of its type within another element.</p><p><strong>p span:only-of-type</strong> selects a span within any p if it is the only span in there.</p><h2 id="兄弟元素选择器"><a href="#兄弟元素选择器" class="headerlink" title="兄弟元素选择器"></a>兄弟元素选择器</h2><pre><code>**选取后一个兄弟元素**    前一个 + 后一个选取后边所有的兄弟元素    前一个 ~ 后边所有</code></pre><h2 id="否定伪类"><a href="#否定伪类" class="headerlink" title="否定伪类"></a>否定伪类</h2><pre><code>从一组元素中将符合要求的元素剔除出去语法：    :not(选择器)例子：    .abc:not(div)</code></pre><h2 id="样式的继承"><a href="#样式的继承" class="headerlink" title="样式的继承"></a>样式的继承</h2><pre><code>为祖先元素设置样式，会同时应用到它的后代元素上，这一特性称为样式的继承。通过样式的继承可以将一些样式统一设置个祖先元素，这样所有的后代都会应用到相同的样式。但是并不是所有的样式都会继承，比如：背景相关的，边框相关的，定位相关的。具体参考文档</code></pre><h2 id="选择器的优先级"><a href="#选择器的优先级" class="headerlink" title="选择器的优先级"></a>选择器的优先级</h2><p>当使用选择器为元素设置样式时，如果样式发生了冲突，采用哪个样式由选择器的优先级（权重）来决定。</p><p><strong>越精准，越优先</strong></p><pre><code>优先级    内联样式1000    id选择器100    类和伪类选择器10    元素选择器1    通配选择器0    继承的样式：没有优先级</code></pre><p>当样式发生冲突时，需要将相关的选择器优先级进行求和计算，优先级高的优先显示，<strong>如果优先级一样，则显示靠后的样式（覆盖）</strong><br>    <strong>优先级计算时，总大小不能超过他的最大的数量级</strong><br>    可以在样式后边添加一个!important，如果样式中添加了该内容，则该样式将会获取最大的优先级，将会优先于所有的样式显示，包括内联样式，但是这个属性要慎用。</p><h1 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h1><p><strong>CSS 框模型Box Model</strong></p><p>CSS中将每一个元素都设置为了一个矩形的盒子<br>将所有的元素都设置为盒子，是为了方便页面的布局<br>当这些元素都是盒子以后，我们的布局就变成了在页面中摆放盒子</p><h2 id="盒子模型构成"><a href="#盒子模型构成" class="headerlink" title="盒子模型构成"></a>盒子模型构成</h2><p>每个盒子都由如下几部分构成 4</p><h3 id="内容区：-content"><a href="#内容区：-content" class="headerlink" title="内容区： content"></a>内容区： content</h3><pre><code>内容区相当于盒子存放东西的空间内容区在盒子的最里边元素的所有的子元素都是放在父元素的内容区内容区设置    width        内容区的宽度    height        内容区的高度</code></pre><h3 id="边框-border"><a href="#边框-border" class="headerlink" title="边框 border"></a>边框 border</h3><pre><code>边框盒子可见框最外侧，边框是盒子的边缘设置边框    **设置边框需要同时设置三个样式，缺一不可**    border-width        边框的宽度        可以同时指定四个边框的宽度，也可以分别指定        规则            四个值                border-width : 10px 20px 30px 40px;                border-width : 上 右 下 左;(顺时针)            三个值                border-width : 10px 20px 30px;                border-width : 上  左右  下 ;            两个值                border-width : 10px 20px;                border-width : 上下  左右   ;            一个值                border-width : 10px;                border-width : 上下左右   ;    border-color        边框的颜色    border-style        边框的样式    除了这三个样式，CSS中还提供了        border-xxx-width        border-xxx-color        border-xxx-style        xxx可以是            top            right            bottom            left        通过这些样式可以单独指定四个边的颜色，宽度和样式边框的简写属性    border    border-left    border-top    border-right    border-bottom</code></pre><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">border</span>: <span class="selector-tag">red</span> <span class="selector-tag">solid</span> 10<span class="selector-tag">px</span>   ;</span><br><span class="line"><span class="selector-tag">border-left</span>: <span class="selector-tag">red</span> <span class="selector-tag">solid</span> 10<span class="selector-tag">px</span>   ;</span><br></pre></td></tr></table></figure><pre><code>这个几个属性可以同时设置边框相关的的样式    **border可以同时设置四个边的颜色，宽度，样式**    **border-xxx可以单独设置某一个边**    规则        使用这些样式可以同时设置border-width border-style border-color，不同的属性使用空格隔开，并且**没有顺序要求**</code></pre><h3 id="内边距：-padding"><a href="#内边距：-padding" class="headerlink" title="内边距： padding"></a>内边距： padding</h3><pre><code>内边距指的是内容区和边框之间的距离，内边距会影响盒子的大小盒子中一共有四个方向的内边距    padding-top    padding-right    padding-bottom    padding-leftpadding    可以同时设置四个方向的内边距，规则和border-width一致    padding:上 右 下 左    padding:上 左右 下     padding:上下  左右     padding:上下左右 **盒子的可见框大小由内容区、内边距和边框共同决定**</code></pre><h3 id="外边距-margin"><a href="#外边距-margin" class="headerlink" title="外边距 margin"></a>外边距 margin</h3><pre><code>外边距盒子和其他盒子之间的距离，外边距不会影响可见框的大小，但是会影响盒子的位置也是具有四个方向的外边距    margin-top    margin-right    margin-bottom    margin-left简写属性    margin    规则和padding一致margin值    可以设置为auto        **如果单独将左右外边距设置为auto**，则会将左或右外边距设置为最大值        如果同时将**左右外边距设置为auto，则会将左右外边距设置为一个相等的值**，通过这种方式使一个子元素在它的父元素中水平居中        **margin:0 auto**    **可以设置为负值**        如果将margin设置为负值，则元素会向相反的方向移动</code></pre><p><strong>外边距的重叠</strong><br>        <strong>相邻的垂直外边距</strong>会发生重叠现象<br>            <strong>相邻元素的外边距会取最大值</strong><br>            <strong>子元素的外边距会传递给父元素</strong><br>        水平外边距不会重叠，而是取和</p><h2 id="内联元素的盒子模型"><a href="#内联元素的盒子模型" class="headerlink" title="内联元素的盒子模型"></a>内联元素的盒子模型</h2><p><strong>内联元素不能设置width和height</strong><br>padding<br>    支持水平方向的padding<br>    垂直方向的padding也支持，但是<strong>不会影响布局</strong><br>border<br>    支持四个方向边框，但是垂直的边框不会影响布局<br>margin<br>    支持水平方向外边距，水平方向的相邻外边距不会重叠，而是求和<br>    不支持垂直方向的<br>盒模型相关的样式</p><h2 id="CSS-定位属性（Positioning）"><a href="#CSS-定位属性（Positioning）" class="headerlink" title="CSS 定位属性（Positioning）"></a>CSS 定位属性（Positioning）</h2><h3 id="display"><a href="#display" class="headerlink" title="display"></a>display</h3><p><strong>设置元素的显示类型</strong><br>可选值<br>none<br>    元素不会在页面中显示，并且不会占据页面的位置<br>block<br>    元素会作为块元素显示<br>inline<br>    元素会作为内联元素显示<br>inline-block<br>    元素会作为行内块元素显示<br>    既具有内联元素的特点也具有块元素的特点<br>        既不独占一行，又可以设置宽高</p><h3 id="visibility"><a href="#visibility" class="headerlink" title="visibility"></a>visibility</h3><p><strong>设置元素是否在页面中显示</strong><br>可选值<br>visible<br>    默认值，元素在页面中正常显示<br>hidden<br>    元素不在页面中显示，但是<strong>依然在页面中占据位置</strong></p><h3 id="overflow"><a href="#overflow" class="headerlink" title="overflow"></a>overflow</h3><p><strong>设置元素如何处理溢出内容</strong><br>可选值<br>visible<br>    默认值，不会处理溢出的内容，在父元素以外的地方显示<br>hidden<br>    溢出的内容会被隐藏不会显示<br>scroll<br>    在父元素中同时添加水平和垂直方向的滚动条<br>    不内容是否溢出都会添加滚动条<br>auto<br>    根据需要自动生成滚动条</p><h1 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h1><h2 id="文档流"><a href="#文档流" class="headerlink" title="文档流"></a>文档流</h2><p>文档流指的是网页中的一个位置<br>文档流是网页的基础，是网页的最底层，所有的元素默认都是在文档流中排列<br>元素在文档流中默认自左向右，自上向下排列（和我们的书写习惯一致）<br>块元素<br>    1.块元素在文档流中<strong>自上向下排列</strong><br>    2.块元素在文档流中<strong>宽度默认是父元素的100%</strong>(auto)<br>    3.块元素在文档流中<strong>高度默认被内容撑开</strong><br>内联元素<br>    1.内联元素在文档流中<strong>自左向右排列</strong>，如果一行中不足以容下所有的内联元素，则换到下一行，继续自左至右排列<br>    2.内联元素在文档流中<strong>宽度和高度默认都被内容撑开</strong></p><h2 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h2><p><strong>使用float来设置元素浮动</strong><br>可选值<br>none<br>    默认值，不浮动，元素在文档流中<br>left<br>    元素向左浮动<br>right<br>    元素向右浮动<br>特点<br>1.元素浮动以后会完全脱离文档流<br>2.浮动以后<strong>元素会一直向父元素的最上方移动</strong><br>3.直到遇到<strong>父元素的边框或者其他的浮动元素，会停止移动</strong><br>4.如果浮动元素的<strong>上边是一个块元素，则浮动元素不会覆盖块元素</strong><br>5.浮动元素<strong>不会超过他上边的浮动的兄弟元素</strong>，最多一边齐<br>6.<strong>浮动元素不会覆盖文字</strong>，文字会自动环绕在浮动元素的周围，可以通过浮动来实现文字环绕的效果<br>浮动以后元素的特点<br>元素浮动以后，会使其完全脱离文档流。<br><strong>块元素</strong><br>    块元素脱离文档流以后<br>        1.不会独占一行<br>        2.宽度和高度都被内容撑开<br><strong>内联元素</strong><br>    <strong>内联元素脱离文档流以后会变成块元素</strong></p><h2 id="高度塌陷"><a href="#高度塌陷" class="headerlink" title="高度塌陷"></a>高度塌陷</h2><p>父元素在文档流中高度默认是被子元素撑开的，当<strong>子元素脱离文档流以后，将无法撑起父元素的高度，也就会导致父元素的高度塌陷</strong><br>父元素的高度一旦塌陷所有元素的位置将会上移，导致整个页面的布局混乱</p><p>我们可以将父元素的高度写死，以避免塌陷的问题出现，但是一旦高度写死，父元素的高度将不能自动适应子元素的高度，所以这种方案是不推荐使用的。</p><h3 id="方法一-开启父元素的BFC或hasLayout"><a href="#方法一-开启父元素的BFC或hasLayout" class="headerlink" title="方法一    开启父元素的BFC或hasLayout"></a>方法一    开启父元素的BFC或hasLayout</h3><p>BFC:Block Formatting Context,块级格式化环境</p><p>BFC是元素的隐含属性，默认是在关闭状态的<br>可以通过一些特殊的样式，来开启BFC<br><strong>开启BFC以后元素将会具有如下特性</strong><br>1、父元素的垂直外边距不会与子元素重叠<br>2、开启BFC的元素不会被浮动元素所覆盖<br>3、开启BFC的元素可以包含浮动子元素<br>    开启BFC的方式<br>1.设置元素浮动<br> 使用这种方式开启，虽然可以撑开父元素，但是会导致父元素的宽度丢失<br>    且使用这种方式也会导致下边的元素上移，不能解决问题<br>2.设置元素绝对定位<br>3.设置元素为inline-block<br> 可以解决问题，但是会导致宽度丢失，不推荐使用这种方式<br>4.将元素的overflow设置为一个非visible的值</p><p>推荐方式：将overflow设置为hidden是副作用最小的开启BFC的方式。<br>                一般都是使用overflow:hidden来开启BFC<br><strong>hasLayout</strong><br>    在IE6中没有BFC，但是有一个和BFC类似的hasLayout<br>    在IE6中可以通过开启hasLayout来解决高度塌陷的问题<br>    副作用最小的开启方式<br>        zoom:1<br>        当为元素设置宽度非默认值时，会自动开启hasLayout</p><h3 id="方法二：清除浮动"><a href="#方法二：清除浮动" class="headerlink" title="方法二：清除浮动"></a>方法二：清除浮动</h3><p><strong>clear可以用来清除其他浮动元素对当前元素的影响</strong><br>可选值：<br>none，默认值，不清除浮动<br>left，清除左侧浮动元素对当前元素的影响<br>right，清除右侧浮动元素对当前元素的影响<br>both，清除两侧浮动元素对当前元素的影响<br>        清除对他影响最大的那个元素的浮动<br>清除浮动以后，元素会回到其他元素浮动之前的位置</p><pre><code>塌陷的父元素的最后添加一个空白的div，然后对该div进行**清除浮动**然基本没有副作用，使用这种方式会在页面中添加多余的结构</code></pre><h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3><pre><code>用after伪类，向父元素后添加一个块元素，并对其清除浮动种方式的原理和方法二原理一样，但是不用向页面中添加对于的结构,这是我们最推荐使用的方式，几乎没有副作用</code></pre><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">    <span class="comment">/*添加一个内容*/</span></span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="comment">/*转换为一个块元素*/</span></span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="comment">/*清除两侧的浮动*/</span></span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><p>通过定位可以将页面中的元素，摆放到页面的任意位置<br><strong>使用position来设置元素的定位</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">可选值</span><br><span class="line">static</span><br><span class="line">默认值，元素没有开启定位</span><br><span class="line">relative</span><br><span class="line">开启元素的相对定位</span><br><span class="line">absolute</span><br><span class="line">开启元素的绝对定位</span><br><span class="line">fixed</span><br><span class="line">开启元素的固定定位</span><br></pre></td></tr></table></figure><h3 id="偏移量"><a href="#偏移量" class="headerlink" title="偏移量"></a>偏移量</h3><p><strong>当元素开启了定位以后，可以通过偏移量来设置元素的位置</strong>。</p><p>靠近中心是正数，远离是负数。</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">left</span></span><br><span class="line">元素距离定位位置的左侧距离</span><br><span class="line"><span class="built_in">top</span></span><br><span class="line">元素距离定位位置的上边距离</span><br><span class="line"><span class="built_in">right</span></span><br><span class="line">元素距离定位位置的右侧距离</span><br><span class="line"><span class="built_in">bottom</span></span><br><span class="line">元素距离定位位置的底部距离</span><br></pre></td></tr></table></figure><p><strong>一般情况下，只使用两个值即可定义一个元素的位置。</strong></p><h3 id="相对定位：ralative"><a href="#相对定位：ralative" class="headerlink" title="相对定位：ralative"></a>相对定位：ralative</h3><p>1.开启元素的相对定位后，如果不设置偏移量元素不会发生任何变化<br>2.相对定位元素<strong>相对于其自身在文档流中的位置</strong>来定位<br>3.相对定位的元素<strong>不会脱离文档流</strong><br>4.相对定位<strong>不会改变元素的性质</strong>，块元素还是块元素，内联元素还是内联元素<br>5.相对定位的元素<strong>会提升一个层级</strong>，会覆盖其他元素</p><h3 id="绝对定位：-absolute"><a href="#绝对定位：-absolute" class="headerlink" title="绝对定位： absolute"></a>绝对定位： absolute</h3><p>1.元素设置绝对定位以后，如果不设置偏移量，元素的位置不会发生变化<br>2.绝对定位的元素是<strong>相对于距离他最近的开启了定位的祖先元素进行定位</strong>（一般情况，开启了子元素的绝对定位都会同时开启父元素的相对定位，<strong>子绝父相</strong>），如果所有的祖先元素都没开启定位，则<strong>相对于浏览器窗口进行定位</strong>。<br>3.绝对定位的元素<strong>会完全脱离文档流</strong><br>4.绝对定位<strong>会改变元素的性质。内联变块，块的高度和宽度都被内容撑开，并且不独占一行</strong><br>5.绝对定位会使元素<strong>提升一个层级</strong>，会覆盖其他元素</p><h3 id="固定定位-fixed"><a href="#固定定位-fixed" class="headerlink" title="固定定位:fixed"></a>固定定位:fixed</h3><p><strong>固定定位是一种特殊的绝对定位</strong>，它的特点大部分都和绝对定位一样.<br>不同的是，<strong>固定定位的元素永远都是相对于浏览器窗口进行定位的</strong>。并且他不会随滚动条滚动<br>IE6不支持固定定位</p><h3 id="层级"><a href="#层级" class="headerlink" title="层级"></a>层级</h3><p>定位元素 &gt; 浮动元素 &gt; 文档流中的元素</p><p>如果定位元素的层级是一样，则<strong>下边的元素会盖住上边的</strong></p><p>当元素开启了定位以后，可以通过z-index来设置元素的层级<br><strong>1.z-index值越高元素越优先显示</strong><br>2.如果z-index值一样，或者都没有z-index则优先显示下边的元素<br><strong>3.父元素永远不会盖住子元素</strong></p><h1 id="其他-css属性"><a href="#其他-css属性" class="headerlink" title="其他 css属性"></a>其他 css属性</h1><h2 id="设置元素的透明背景"><a href="#设置元素的透明背景" class="headerlink" title="设置元素的透明背景"></a>设置元素的透明背景</h2><p>opacity可以用来设置元素背景的透明，<br>它需要一个0-1之间的值<br>    0 表示完全透明<br>    1 表示完全不透明<br>    0.5 表示半透明</p><p>opacity属性在IE8及以下的浏览器中不支持<br>IE8及以下的浏览器需要使用如下属性代替<br>alpha(opacity=透明度) filter: alpha(opacity=50);<br>透明度，需要一个0-100之间的值<br>    0 表示完全透明<br>    100 表示完全不透明<br>    50 半透明</p><h2 id="background属性"><a href="#background属性" class="headerlink" title="background属性"></a>background属性</h2><p>使用backgroundimage来设置背景图片<br> 语法：backgroundimage:url(相对路径);</p><p> 如果背景图片大于元素，默认会显示图片的左上角<br> 如果背景图片和元素一样大，则会将背景图片全部显示<br> 如果背景图片小于元素大小，则会默认将背景图片平铺以充满元素</p><p>可以同时为一个元素指定背景颜色和背景图片，<br>这样背景颜色将会作为背景图片的底色<br>一般情况下设置背景图片时都会同时指定一个背景颜色</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">backgroundimage</span><span class="selector-pseudo">:url(img2.jpg)</span>;</span><br></pre></td></tr></table></figure><p>backgroundrepeat用于设置背景图片的重复方式<br>可选值：<br>    repeat，默认值，背景图片会双方向重复（平铺）<br>    norepeat ，背景图片不会重复，有多大就显示多大<br>    repeatx， 背景图片沿水平方向重复<br>    repeaty，背景图片沿垂直方向重复</p><h3 id="background-position"><a href="#background-position" class="headerlink" title="background-position"></a>background-position</h3><p>背景图片默认是贴着元素的左上角显示<br>通过background-position可以调整背景图片在元素中的位置<br>可选值：<br>该属性可以使用 top right left bottom center中的两个值<br>    来指定一个背景图片的位置<br>    top left 左上<br>    bottom right 右下<br>    如果只给出一个值，则第二个值默认是center</p><p>也可以直接指定两个偏移量，<br>    第一个值是水平偏移量<br>         如果指定的是一个正值，则图片会向右移动指定的像素<br>         如果指定的是一个负值，则图片会向左移动指定的像素<br>    第二个是垂直偏移量<br>         如果指定的是一个正值，则图片会向下移动指定的像素<br>         如果指定的是一个负值，则图片会向上移动指定的像素</p><h3 id="background-attachment"><a href="#background-attachment" class="headerlink" title="background-attachment"></a>background-attachment</h3><p>用来设置背景图片是否随页面一起滚动<br>可选值：<br>    scroll，默认值，背景图片随着窗口滚动<br>    fixed，背景图片会固定在某一位置，不随页面滚动</p><p>不随窗口滚动的图片，我们一般都是设置给body，而不设置给其他元素</p><p>当背景图片的backgroundattachment设置为fixed时，<br>背景图片的定位永远相对于浏览器的窗口</p><p>backgroundattachment: fixed;</p><h1 id="常用标签-1"><a href="#常用标签-1" class="headerlink" title="常用标签"></a>常用标签</h1><p>span没有任何的语义，span标签专门用来选中文字，然后为文字来设置样式  </p><p>a元素可以包含任意元素，除了他本身</p><p> p元素不可以包含任何块元素</p><p>div这个标签没有任何语义，就是一个纯粹的块元素，并且不会为它里边的元素设置任何的默认样式，</p><p>div元素主要用来对页面进行布局的   </p><h2 id="form表单"><a href="#form表单" class="headerlink" title="form表单"></a>form表单</h2><p>表单的作用就是用来将用户信息提交给服务器的<br>    比如：百度的搜索框 注册 登录这些操作都需要填写表单</p><p>使用form标签创建一个表单</p><p>action属性</p><pre><code>*form标签中必须指定一个，该属性指向的是一个服务器的地址**我们提交表单时将会提交到action属性对应的地址</code></pre><p><strong>input框</strong></p><p>使用input来创建一个文本框，它的type属性是text<br>    如果希望表单项中的数据会提交到服务器中，还必须给表单项指定一个name属性<br>    name表示提交内容的名字    </p><p>用户填写的信息会附在url地址的后边以查询字符串的形式发送给服务器<br>    url地址?查询字符串<br>格式：<br>    属性名=属性值&amp;属性名=属性值&amp;属性名=属性值&amp;属性名=属性值<br>在文本框中也可以指定value属性值，该值将会作为文本框的默认值显示    </p><p><strong>单选按钮</strong><br> 使用input来创建一个单选按钮，它的type属性使用radio<br> <strong>单选按钮通过name属性进行分组，name属性相同是一组按钮</strong><br> 像这种需要用户选择但是不需要用户直接填写内容的表单项，<br>    还必须指定一个value属性，这样被选中的表单项的value属性值将会最终提交给服务器</p><p>如果希望在单选按钮或者是多选框中指定默认选中的选项，<br>    则可以在希望选中的项中添加checked=”checked”属性</p><p><strong>多选框</strong><br> 使用input创建一个多选框，它的type属性使用checkbox</p><p><strong>下拉列表</strong></p><p>使用select来创建一个下拉列表<br>下拉列表的name属性需要指定给select，而value属性需要指定给option<br>可以通过在option中添加selected=”selected”来将选项设置为默认选中</p><p>当为select添加一个multiple=”multiple”，则下拉列表变为一个多选的下拉列表</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">你喜欢的明星 <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"star"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">在select中可以使用optgroup对选项进行分组</span></span><br><span class="line"><span class="comment">同一个optgroup中的选项是一组</span></span><br><span class="line"><span class="comment">可以通过label属性来指定分组的名字</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">optgroup</span> <span class="attr">label</span>=<span class="string">"女明星"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 在下拉列表中使用option标签来创建一个一个列表项 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"fbb"</span>&gt;</span>范冰冰<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"lxr"</span>&gt;</span>林心如<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"zw"</span>&gt;</span>赵薇<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">optgroup</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">optgroup</span> <span class="attr">label</span>=<span class="string">"男明星"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"ldh"</span>&gt;</span>刘德华<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"pcj"</span>&gt;</span>潘长江<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">optgroup</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>textarea<br>使用textarea创建一个文本域<br><strong>按钮</strong></p><p>提交按钮可以将表单中的信息提交给服务器<br>使用input创建一个提交按钮,它的type属性值是submit<br>在提交按钮中可以通过value属性来指定按钮上的文字</p><p><input type="reset">可以创建一个重置按钮，<br>    点击重置按钮以后表单中内容将会恢复为默认值</p><p>使用input type=button可以用来创建一个单纯的按钮，<br>    这个按钮没有任何功能，只能被点击</p><p>除了使用input，也可以使用button标签来创建按钮<br>这种方式和使用input类似，只不过由于它是成对出现的标签<br>    使用起来更加的灵活</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"reset"</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>标签label</p><p>在html中还为我们提供了一个标签，专门用来选中表单中的提示文字的<br>label标签<br>该标签可以指定一个for属性，该属性的值需要指定一个表单项的id值</p><p><strong>在点击标签时，相当于对for的表单向选中</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"um"</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"um"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> /&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><strong>fieldset</strong></p><p>在表单中可以使用fieldset来为表单项进行分组，<br>可以将表单项中的同一组放到一个fieldset中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 在fieldset可以使用legend子标签，来指定组名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">legend</span>&gt;</span>用户信息<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"um"</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"um"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>  /&gt;</span> <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"pwd"</span>&gt;</span>密码 <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"pwd"</span> <span class="attr">type</span>=<span class="string">"pwd"</span> <span class="attr">name</span>=<span class="string">"password"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="table表格"><a href="#table表格" class="headerlink" title="table表格"></a>table表格</h2><p><strong>CSS border-collapse 属性</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">table</span>&#123;</span><br><span class="line"><span class="attribute">border-collapse</span>:collapse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>separate</th><th>默认值。边框会被分开。不会忽略 border-spacing 和 empty-cells 属性。</th></tr></thead><tbody><tr><td>collapse</td><td>如果可能，边框会合并为一个单一的边框。会忽略 border-spacing 和 empty-cells 属性。</td></tr><tr><td>inherit</td><td>规定应该从父元素继承 border-collapse 属性的值。</td></tr></tbody></table><h3 id="标签的-colspan-rowspan-属性"><a href="#标签的-colspan-rowspan-属性" class="headerlink" title=" 标签的 colspan. rowspan 属性"></a><td> 标签的 colspan. rowspan 属性</td></h3><table><thead><tr><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><em>number</em></td><td align="left">设置单元格可横跨的列(行）数。</td></tr></tbody></table><h3 id="caption-元素定义表格标题。"><a href="#caption-元素定义表格标题。" class="headerlink" title="caption 元素定义表格标题。"></a>caption 元素定义表格标题。</h3><p>caption 标签必须紧随 table 标签之后。您只能对每个表格定义一个标题。通常这个标题会被居中于表格之上。</p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>列表就相当于去超市购物时的那个购物清单，</p><p> 在HTML也可以创建列表，在网页中一共有三种列表：</p><p>1.无序列表</p><p>2.有序列表</p><p>3.定义列表</p><pre><code>序列表使用ul(unordered list)来创建一个无序列表，在列表中使用li来表示一个列表项无序列表使用符号作为项目符号序列表使用ol(ordered list)来创建一个无序列表，在列表中使用li来表示一个列表项使用有序的序号作为项目符号义列表表相关的元素都是块元素，他们之间可以互相嵌套除项目符号list-style:none</code></pre><h2 id="frameset框架集"><a href="#frameset框架集" class="headerlink" title="frameset框架集"></a>frameset框架集</h2><p>框架集和内联框架的作用类似，都是用于在一个页面中引入其他的外部的页面，<br>    框架集可以同时引入多个页面，而内联框架只能引入一个，<br>    在h5标准中，推荐使用框架集，而不使用内联框架</p><p>使用frameset来创建一个框架集，注意frameset不能和body出现在同一个页面中<br>    所以要使用框架集，页面中就不可以使用body标签</p><p>属性：<br>    rows，指定框架集中的所有的框架，一行一行的排列<br>    cols， 指定框架集中的所有的页面，一列一列的排列<br>    这两个属性frameset必须选择一个，并且需要在属性中指定每一部分所占的大小</p><p>frameset中也可以再嵌套frameset</p><p>frameset和iframe一样，它里边的内容都不会被搜索引擎所检索，<br>    所以如果搜索引擎检索到的页面是一个框架页的话，它是不能去判断里边的内容的<br>使用框架集则意味着页面中不能有自己的内容，只能引入其他的页面，而我们每单独加载一个页面<br>    浏览器都需要重新发送一次请求，引入几个页面就需要发送几次请求，用户的体验比较差<br>如果非得用建议使用frameset而不使用iframe    </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">frameset</span> <span class="attr">cols</span>=<span class="string">"30% , * , 30%"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 在frameset中使用frame子标签来指定要引入的页面 </span></span><br><span class="line"><span class="comment">引入几个页面就写几个frame</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">"table.html"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">"form.html"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 嵌套一个frameset --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">frameset</span> <span class="attr">rows</span>=<span class="string">"30%,50%,*"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">"04.表格的布局.html"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">"05.完善clearfix.html"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">"06.表单.html"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">frameset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">frameset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="CSS3-media-查询"><a href="#CSS3-media-查询" class="headerlink" title="CSS3 @media 查询"></a>CSS3 @media 查询</h1><p>如果文档宽度小于 300 像素则修改背景颜色(background-color):</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> screen and (max-width: <span class="number">300px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">body</span> &#123;</span><br><span class="line">        <span class="attribute">background-color</span>:lightblue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="min-height-属性设置元素的最小高度。"><a href="#min-height-属性设置元素的最小高度。" class="headerlink" title="min-height 属性设置元素的最小高度。"></a>min-height 属性设置元素的最小高度。</h2><p>设置以后：不能修改为小于此高度的距离</p><p><strong>css hack</strong>  能有效识别低版本ie，具体八度</p><p>clearfix</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">解决父子元素的外边距重叠</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box1</span><span class="selector-pseudo">:before</span>&#123;</span><br><span class="line"><span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">display</span>:table可以将一个元素设置为表格显示</span><br><span class="line"> </span><br><span class="line">display: table;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">解决父元素高度塌陷</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line"><span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line"><span class="attribute">display</span>: block;</span><br><span class="line"><span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过修改后的clearfix是一个多功能的<br><strong>既可以解决高度塌陷，又可以确保父元素和子元素的垂直外边距不会重叠</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line"><span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line"><span class="attribute">display</span>: table;</span><br><span class="line"><span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="长表格"><a href="#长表格" class="headerlink" title="长表格"></a>长表格</h2><p>有一些情况下表格是非常的长的，<br>    这时就需要将表格分为三个部分，表头，表格的主体，表格底部<br>在HTML中为我们提供了三个标签：<br>    thead 表头<br>    tbody 表格主体<br>    tfoot 表格底部</p><p>这三个标签的作用，就来区分表格的不同的部分，他们都是table的子标签，<br>    都需要直接写到table中，tr需要写在这些标签当中</p><p><strong>thead中的内容，永远会显示在表格的头部</strong><br><strong>tfoot中的内容，永远都会显示表格的底部</strong><br>tbody中的内容，永远都会显示表格的中间</p><p><strong>如果表格中没有写tbody，浏览器会自动在表格中添加tbody</strong><br>并且将所有的tr都放到tbody中，所以注意tr并不是table的子元素，而是tbody的子元素<br>通过table &gt; tr 无法选中行 需要通过tbody &gt; tr</p><h2 id="css精灵图"><a href="#css精灵图" class="headerlink" title="css精灵图"></a>css精灵图</h2><p>CSS-Sprite</p><p>做完功能以后，发现在第一次切换图片时，会发现图片有一个非常快的闪烁，<br>这个闪烁会造成一次不佳的用户体验。<br>产生问题的原因：<br>背景图片是以外部资源的形式加载进网页的，浏览器每加载一个外部资源就需要单独的发送一次请求，<br>但是我们外部资源并不是同时加载，浏览器会在资源被使用才去加载资源<br>我们这个练习，一上来浏览器只会加载link.png由于hover和active的状态没有马上触发，<br>    所以hover.png和active.png并不是立即加载的<br>当hover被触发时，浏览器才去加载hover.png<br>当active被触发时，浏览器才去加载active.png<br>由于加载图片需要一定的时间，所以在加载和显示过程会有一段时间，背景图片无法显示，导致出现闪烁的情况</p><p>为了解决该问题，<strong>可以将三个图片整合为一张图片</strong>，这样可以同时将三张图片一起加载，就不会出现闪烁的问题了，<br>然后在通过background-position来切换要显示的图片的位置，这种技术叫做图片整合技术（CSS-Sprite,css精灵图）<br>优点：<br>    1 将多个图片整合为一张图片里，浏览器只需要发送一次请求，可以同时加载多个图片，<br>        提高访问效率，提高了用户体验。<br>    2 将多个图片整合为一张图片，减小了图片的总大小，提高请求的速度，增加了用户体验</p><p>title属性**，这个属性可以给任何标签指定当鼠标移入到元素上时，元素中的title属性的值将会作为提示文字显示</p><p title="hello">我是一个段落</p>**浏览器默认样式**<p>浏览器为了在页面中没有样式时，也可以有一个比较好的显示效果，<br>所以为很多的元素都设置了一些默认的margin和padding，<br>而它的这些默认样式，正常情况下我们是不需要使用的。<br>所以我们往往在编写样式之前需要将浏览器中的默认的margin和padding统统的去掉<br>清除浏览器的默认样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式支持IE6，但是这种效果在IE Tester中无法测试</p><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.p1</span>&#123;</span></span><br><span class="line"><span class="css"><span class="comment">/*设置字体颜色,使用color来设置文字的颜色*/</span></span></span><br><span class="line">color: red;</span><br><span class="line">/*</span><br><span class="line"> * 设置文字的大小,浏览器中一般默认的文字大小都是16px</span><br><span class="line"> font-size设置的并不是文字本身的大小，</span><br><span class="line"> 在页面中，每个文字都是处在一个看不见的框中的</span><br><span class="line"> 我们设置的font-size实际上是设置格的高度，并不是字体的大小</span><br><span class="line"> 一般情况下文字都要比这个格要小一些，也有时会比格大，</span><br><span class="line"> 根据字体的不同，显示效果也不能</span><br><span class="line"> * */</span><br><span class="line">font-size: 30px;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * 通过font-family可以指定文字的字体</span><br><span class="line"> * 当采用某种字体时，如果浏览器支持则使用该字体，</span><br><span class="line"> * 如果字体不支持，则使用默认字体</span><br><span class="line"> * 该样式可以同时指定多个字体，多个字体之间使用,分开</span><br><span class="line"> * 当采用多个字体时，浏览器会优先使用前边的字体，</span><br><span class="line"> * 如果前边没有在尝试下一个</span><br><span class="line"> */</span><br><span class="line"><span class="css"><span class="comment">/*font-family: arial , 微软雅黑;*/</span></span></span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * 浏览器使用的字体默认就是计算机中的字体，</span><br><span class="line"> * 如果计算机中有，则使用，如果没有就不用</span><br><span class="line"> * </span><br><span class="line"> * 在开发中，如果字体太奇怪，用的太少了，尽量不要使用，</span><br><span class="line"> * 有可能用户的电脑没有，就不能达到想要的效果。</span><br><span class="line"> */</span><br><span class="line"><span class="css"><span class="comment">/*font-family: 华文彩云 , arial , 微软雅黑;*/</span></span></span><br><span class="line"></span><br><span class="line">font-family: "curlz mt";</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"p1"</span>&gt;</span></span><br><span class="line">我是一个p标签，ABCDEFGabcdefg</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>字体分类：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;<span class="xml"><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line">&lt;style type=<span class="string">"text/css"</span>&gt;</span><br><span class="line">p&#123;</span><br><span class="line">font-family: arial , 微软雅黑 , 华文彩云 , serif;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- </span><br><span class="line">在网页中将字体分成<span class="number">5</span>大类：</span><br><span class="line">serif（衬线字体）</span><br><span class="line">sans-serif（非衬线字体）</span><br><span class="line">monospace （等宽字体）</span><br><span class="line">cursive （草书字体）</span><br><span class="line">fantasy （虚幻字体）</span><br><span class="line">可以将字体设置为这些大的分类,当设置为大的分类以后，</span><br><span class="line">浏览器会自动选择指定的字体并应用样式</span><br><span class="line">一般会将字体的大分类，指定为font-family中的最后一个字体</span><br><span class="line">--&gt;</span><br><span class="line">&lt;p style=<span class="string">"font-size: 50px; font-family: serif;"</span>&gt;衬线字体：我是一段文字，ABCDEFGabcdefg&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;p style="font-size: 50px; font-family: sans-serif;"&gt;非衬线字体：我是一段文字，ABCDEFGabcdefg&lt;/</span>p&gt;</span><br><span class="line">&lt;p style=<span class="string">"font-size: 50px; font-family: monospace;"</span>&gt;等宽字体：我是一段文字，IHABCDEFGabcdefg&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;p style="font-size: 50px; font-family: cursive;"&gt;草书字体：我是一段文字，ABCDEFGabcdefg&lt;/</span>p&gt;</span><br><span class="line">&lt;p style=<span class="string">"font-size: 50px; font-family: fantasy;"</span>&gt;虚幻字体：我是一段文字，ABCDEFGabcdefg&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><p>字体其他样式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;<span class="xml"><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line">&lt;style type=<span class="string">"text/css"</span>&gt;</span><br><span class="line"></span><br><span class="line">.p1&#123;</span><br><span class="line">color: red;</span><br><span class="line">font-size: <span class="number">30</span>px;</span><br><span class="line">font-family: <span class="string">"微软雅黑"</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * font-style可以用来设置文字的斜体</span></span><br><span class="line"><span class="comment"> * - 可选值：</span></span><br><span class="line"><span class="comment"> * normal，默认值，文字正常显示</span></span><br><span class="line"><span class="comment"> * italic 文字会以斜体显示</span></span><br><span class="line"><span class="comment"> * oblique 文字会以倾斜的效果显示</span></span><br><span class="line"><span class="comment"> * - 大部分浏览器都不会对倾斜和斜体做区分，</span></span><br><span class="line"><span class="comment"> * 也就是说我们设置italic和oblique它们的效果往往是一样的</span></span><br><span class="line"><span class="comment"> *  - 一般我们只会使用italic</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">font-style: italic;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * font-weight可以用来设置文本的加粗效果：</span></span><br><span class="line"><span class="comment"> * 可选值：</span></span><br><span class="line"><span class="comment"> * normal，默认值，文字正常显示</span></span><br><span class="line"><span class="comment"> * bold，文字加粗显示</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 该样式也可以指定100-900之间的9个值，</span></span><br><span class="line"><span class="comment"> * 但是由于用户的计算机往往没有这么多级别的字体，所以达到我们想要的效果</span></span><br><span class="line"><span class="comment"> * 也就是200有可能比100粗，300有可能比200粗，但是也可能是一样的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">font-weight: bold;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * font-variant可以用来设置小型大写字母</span></span><br><span class="line"><span class="comment"> * 可选值：</span></span><br><span class="line"><span class="comment"> * normal，默认值，文字正常显示</span></span><br><span class="line"><span class="comment"> * small-caps 文本以小型大写字母显示</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 小型大写字母：</span></span><br><span class="line"><span class="comment"> * 将所有的字母都以大写形式显示，但是小写字母的大写，</span></span><br><span class="line"><span class="comment"> * 要比大写字母的大小小一些。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">font-variant: small-caps ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.p2&#123;</span><br><span class="line"><span class="comment">/*设置一个文字大小*/</span></span><br><span class="line">font-size: <span class="number">50</span>px;</span><br><span class="line"><span class="comment">/*设置一个字体*/</span></span><br><span class="line">font-family: 华文彩云;</span><br><span class="line"><span class="comment">/*设置文字斜体*/</span></span><br><span class="line">font-style: italic;</span><br><span class="line"><span class="comment">/*设置文字的加粗*/</span></span><br><span class="line">font-weight: bold;</span><br><span class="line"><span class="comment">/*设置一个小型大写字母*/</span></span><br><span class="line">font-variant: small-caps;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.p3&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 在CSS中还为我们提供了一个样式叫font，</span></span><br><span class="line"><span class="comment"> * 使用该样式可以同时设置字体相关的所有样式,</span></span><br><span class="line"><span class="comment"> * 可以将字体的样式的值，统一写在font样式中，不同的值之间使用空格隔开</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 使用font设置字体样式时，斜体 加粗 小大字母，没有顺序要求，甚至可写可不写，</span></span><br><span class="line"><span class="comment"> * 如果不写则使用默认值，但是要求文字的大小和字体必须写，而且字体必须是最后一个样式</span></span><br><span class="line"><span class="comment"> * 大小必须是倒数第二个样式</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 实际上使用简写属性也会有一个比较好的性能</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">font: small-caps bold italic <span class="number">60</span>px <span class="string">"微软雅黑"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;p <span class="class"><span class="keyword">class</span></span>=<span class="string">"p3"</span>&gt;我是一段文字，ABCDEFGabcdefg&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;p class="p1"&gt;我是一段文字，ABCDEFGabcdefg&lt;/</span>p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p <span class="class"><span class="keyword">class</span></span>=<span class="string">"p2"</span>&gt;我是一段文字，ABCDEFGabcdefg&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;&lt;h1 id=&quot;初步了解&quot;&gt;&lt;a href=&quot;#初步了解&quot; class=&quot;headerlink&quot; title=&quot;初步了解&quot;&gt;&lt;/a&gt;初步了解&lt;/h1&gt;&lt;h2 id=&quot;软件的架构&quot;&gt;&lt;a href=&quot;#软件的架构&quot; class=&quot;headerlink&quot; title=&quot;软件的架构&quot;&gt;&lt;/a&gt;软件的架构&lt;/h2&gt;&lt;p&gt;C/S，客户端/服务器&lt;br&gt;    1.一般我们使用的软件都是C/S架构&lt;br&gt;    2.比如系统的中的软件QQ、360、office、XMind&lt;br&gt;    3.C表示客户端，用户通过客户端来使用软件&lt;br&gt;    4.S表示服务器，服务器负责处理软件的业务逻辑&lt;br&gt;    特点&lt;br&gt;        1.软件使用前必须得安装&lt;br&gt;        2.软件更新时，服务器和客户端得同时更新&lt;br&gt;        3.C/S架构的软件不能跨平台使用&lt;br&gt;        4.C/S架构的软件客户端和服务器通信采用的是自有协议，相对来说比较安全&lt;br&gt;B/S，浏览器/服务器&lt;br&gt;    1.B/S本质上也是C/S，只不过B/S架构的软件，使用浏览器作为软件的客户端&lt;br&gt;    2.B/S架构软件通过使用浏览器访问网页的形式，来使用软件&lt;br&gt;    3.比如：京东 淘宝 12306 知乎 新浪微博&lt;br&gt;    特点&lt;br&gt;        1.软件不需要安装，直接使用浏览器访问指定的网址即可&lt;br&gt;        2.软件更新时，客户端不需要更新&lt;br&gt;        3.软件可以跨平台，只要系统中有浏览器，就可以使用&lt;br&gt;        4.B/S架构的软件，客户端和服务器之间通信采用的是通用的HTTP协议，相对来说不安全&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记-前端" scheme="https://codeofli.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://codeofli.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="html" scheme="https://codeofli.github.io/tags/html/"/>
    
      <category term="css" scheme="https://codeofli.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>git</title>
    <link href="https://codeofli.github.io/2019/10/git/git/"/>
    <id>https://codeofli.github.io/2019/10/git/git/</id>
    <published>2019-10-13T14:19:09.000Z</published>
    <updated>2019-11-13T12:18:59.502Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><p>特点：</p><p>分布式版本控制系统<br>优势：<br>    SVN在开发过程中必须保证需要与SVN服务器连接才能使用，需要联网</p><h1 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h1><h2 id="1、设置全局信息"><a href="#1、设置全局信息" class="headerlink" title="1、设置全局信息"></a>1、设置全局信息</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">设置开发者的用户名</span><br><span class="line">git config --global user.name nicolas</span><br><span class="line">设置开发者邮箱</span><br><span class="line">git config --global user.email 1162314270@qq.com</span><br><span class="line">取得全部的全局信息</span><br><span class="line">git config --list</span><br><span class="line">git config -l</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="2、创建仓库"><a href="#2、创建仓库" class="headerlink" title="2、创建仓库"></a>2、创建仓库</h2><p>1、创建目录当做仓库目录<br>2、进入目录中配置<br>将目录变为仓库目录，需要进入目录中配置<br>3、初始化仓库<br>方法一：创建一个包含有配置信息目录的仓库文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">Initialized empty Git repository in E:/gitpro/.git/</span><br></pre></td></tr></table></figure><h2 id="文件区域"><a href="#文件区域" class="headerlink" title="文件区域"></a>文件区域</h2><ol><li><p><strong>工作区</strong><br>用户编写代码的文件夹<br>所有的文件操作以工作区为主<br>GIT仓库</p></li><li><p><strong>暂存库</strong><br>只是将工作中的未保存文件保存到暂存区中，有GIT维护；<br>保存的内容是暂时需要的</p></li><li><p><strong>版本库Master</strong></p><p>真正发布的代码</p></li></ol><h2 id="3、仓库基本操作"><a href="#3、仓库基本操作" class="headerlink" title="3、仓库基本操作"></a>3、仓库基本操作</h2><p>1、观察仓库的状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><p>2、将文件添加到git暂存区</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add 文件名称</span><br></pre></td></tr></table></figure><p>4、批量添加新文件到暂存区</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure><p>添加所有在仓库目录中创建的新文件到暂存区<br>3、将文件提交到版本库中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m "注释信息Comment"</span><br></pre></td></tr></table></figure><p>现在才表示将新的文件提交到了GIT之中进行管理（这个代码才能被项目使用）<br><strong>自动增加并提交修改到版本库中</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -a -m "注释Comment"</span><br></pre></td></tr></table></figure><p>4、修改仓库文件<br>    比较同一文件<br>        git diff<br>        git diff 文件名<br>    查看修改历史</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git log 文件名</span><br><span class="line">git log</span><br></pre></td></tr></table></figure><p>​        每次提交时都会自动生成一个Commit ID（在日后版本恢复中使用）</p><h3 id="版本穿越"><a href="#版本穿越" class="headerlink" title="版本穿越"></a>版本穿越</h3><p>​    查看日志信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br><span class="line">git log --pretty=oneline</span><br></pre></td></tr></table></figure><p>简化查看<br>可以按q结束查看<br>整个日志记录是用栈来记录的<br>master库存在head指针<br>回退到上一个版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard head~1</span><br></pre></td></tr></table></figure><p>查看所有删除的日志</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure><p>​    到指定版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard 1fc9d3f（Commit id）</span><br></pre></td></tr></table></figure><h3 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h3><h4 id="撤销工作区修改"><a href="#撤销工作区修改" class="headerlink" title="撤销工作区修改"></a>撤销工作区修改</h4><p>显示那些文件发生了改变</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout</span><br></pre></td></tr></table></figure><p>恢复单个文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout 文件名</span><br></pre></td></tr></table></figure><p>恢复多个文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout .</span><br></pre></td></tr></table></figure><h4 id="修改已在暂存区"><a href="#修改已在暂存区" class="headerlink" title="修改已在暂存区"></a>修改已在暂存区</h4><p>将暂存区的文件撤回到工作区</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD &lt;file&gt;...</span><br></pre></td></tr></table></figure><p>文件删除</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">del 文件名</span><br></pre></td></tr></table></figure><p>删除工作区中的文件<br>恢复</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- 文件名</span><br></pre></td></tr></table></figure><p>​            因为版本库中任存在，可以直接删除<br>​    git commit -a -m “Commet”<br>​        提交之后，库中相应的文件也没有了<br>​        只能通过版本穿越恢复</p><h1 id="GITHUB"><a href="#GITHUB" class="headerlink" title="GITHUB"></a>GITHUB</h1><h2 id="配置远程仓库"><a href="#配置远程仓库" class="headerlink" title="配置远程仓库"></a>配置远程仓库</h2><p>ssh通信模式<br>1.启动git bash<br>  在此之中可以使用linux命令<br>2、生成ssh key密钥</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;1162314270@qq.com&quot;</span><br></pre></td></tr></table></figure><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">命令输入后，首先询问用户密钥的保存位置</span><br><span class="line"><span class="regexp">/c/</span>Users<span class="regexp">/11623/</span>.ssh/id_rsa</span><br><span class="line">默认为公钥和私钥保存在：用户<span class="regexp">/.ssh/</span>id_rsa</span><br><span class="line">瑞后询问是否设置保护密码</span><br></pre></td></tr></table></figure><p>3、将公钥内容保存到GITHUB<br>    公钥文件，保存在外部使用<strong>==(保存到github的ssh密匙中)==</strong><br>        id_rsa.pub<br>    私钥文件，做本机标识<br>        id_rsa<br>    打卡github的setting页面添加ssh key<br>        将公钥内容复制到key内容中</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\11623&gt;ssh-keygen -t rsa -C <span class="string">"lmz"</span></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (C:\Users\11623/.ssh/id_rsa):</span><br><span class="line">C:\Users\11623/.ssh/id_rsa already exists.</span><br><span class="line">Overwrite (y/n)? y</span><br><span class="line">Enter passphrase (empty for no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved in C:\Users\11623/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved in C:\Users\11623/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:722mRw92N2R2fb71Yr3tBEgSQORYxzzzF6n4xRkh7Mk lmz</span><br><span class="line">The key's randomart image is:</span><br><span class="line">+---[RSA 2048]----+</span><br><span class="line">|<span class="string">       o=+o.. .o </span>|</span><br><span class="line">|<span class="string">       + .=...+  </span>|</span><br><span class="line">|<span class="string">      . . .B.+ +.</span>|</span><br><span class="line">|<span class="string">          .oE.=++</span>|</span><br><span class="line">|<span class="string">        S  ..o=.o</span>|</span><br><span class="line">|<span class="string">         .  = .o+</span>|</span><br><span class="line">|<span class="string">          .o + o*</span>|</span><br><span class="line">|<span class="string">         . .+ +o+</span>|</span><br><span class="line">|<span class="string">          o=.. ++</span>|</span><br><span class="line">+----[SHA256]-----+</span><br></pre></td></tr></table></figure><p>4、在github上建立远程仓库信息<br>    不选择：Initialize this repository with a README<br>    创建仓库后界面上就给出了仓库的访问地址<br>    SSH，有了SSH key直接连接<br>        <a href="https://github.com/NicolasCoder/rep.git" target="_blank" rel="noopener">https://github.com/NicolasCoder/rep.git</a><br>    HRRPS,所有人都可以连接<br>        <a href="https://github.com/NicolasCoder/rep.git" target="_blank" rel="noopener">https://github.com/NicolasCoder/rep.git</a><br>删除github仓库<br>    仓库的setting</p><h2 id="客服端访问"><a href="#客服端访问" class="headerlink" title="客服端访问"></a>客服端访问</h2><p>本地代码同步到远程仓库中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Either specify the URL from the command-line or configure a remote repository using</span><br><span class="line">    git remote add &lt;name&gt; &lt;url&gt;</span><br><span class="line"></span><br><span class="line">and then push using the remote name</span><br><span class="line">    git push &lt;name&gt;</span><br></pre></td></tr></table></figure><p>1、建立客服端与服务端的连接地址信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin （SSH链接）https://github.com/NicolasCoder/rep.git</span><br></pre></td></tr></table></figure><p>2、连接成功后将本地仓库全部代码推送到服务器端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>强推，即利用强覆盖方式用你本地的代码替代git仓库内的内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git push -f</span><br><span class="line">git push -u origin master -f</span><br></pre></td></tr></table></figure><p>：<strong>使用这个强制的方法</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master --allow-unrelated-histories</span><br></pre></td></tr></table></figure><p>后面加上 <code>--allow-unrelated-histories</code> ， 把两段不相干的 分支进行强行合并</p><p>提高本地修改<br>    首先将修改提高到master分支上，然后推送代码到服务器</p><p><strong>3、git pull</strong>的作用是从一个仓库或者本地的分支拉取并且整合代码。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull [&lt;options&gt;] [&lt;repository&gt; [&lt;refspec&gt;…]]</span><br></pre></td></tr></table></figure><p><strong>实例：</strong>默认使用方式</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git pull</span></span><br></pre></td></tr></table></figure><p>按照<code>git branch</code> 设置的默认跟踪的服务器和分支来拉取。</p><p><strong>实例：</strong> 拉取远程服务器<code>origin</code>的<code>master</code>分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master</span><br></pre></td></tr></table></figure><p><strong>删除远程分支</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote rm origin</span><br></pre></td></tr></table></figure><h2 id="克隆远程仓库"><a href="#克隆远程仓库" class="headerlink" title="克隆远程仓库"></a>克隆远程仓库</h2><p>已经初始化完成的仓库<br>        已执行<br>            Initialize this repository with a README<br><strong>克隆远程仓库：</strong>（直接在当前目录新建远程仓库的项目文件）<br>        git clone （HTTPS）<a href="https://github.com/NicolasCoder/crm.git" target="_blank" rel="noopener">https://github.com/NicolasCoder/crm.git</a></p><h1 id="GIT的分支管理策略"><a href="#GIT的分支管理策略" class="headerlink" title="GIT的分支管理策略"></a>GIT的分支管理策略</h1><h2 id="1-基础操作"><a href="#1-基础操作" class="headerlink" title="1).基础操作"></a>1).基础操作</h2><p>1、查看当前仓库中可用的分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure><p>2、创建新的分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch 分支名</span><br></pre></td></tr></table></figure><p>3、切换分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout 分支名</span><br></pre></td></tr></table></figure><p>要想进行开发，一定不能再master中开发，必须在子分支开发<br>回到master进行合并分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge dev</span><br></pre></td></tr></table></figure><p>​    合并后提示Fast-forward<br>​        快速合并方式<br>一般开发分支和master分支都在服务器上</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin 分支名</span><br></pre></td></tr></table></figure><p>删除分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d 分支名</span><br></pre></td></tr></table></figure><p>删除远程分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin --delete 分支名</span><br></pre></td></tr></table></figure><p>推送空的分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin:dev</span><br></pre></td></tr></table></figure><h2 id="2）合并操作"><a href="#2）合并操作" class="headerlink" title="2）合并操作"></a>2）合并操作</h2><p>冲突解决<br>    创建并切换到dev分支</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -<span class="selector-tag">b</span> dev</span><br></pre></td></tr></table></figure><p>两个分支修改了同一文件<br>        提交到master后会提示conflict和文件名<br>            打开文件会发现相应的冲突都写在了里面<br>            修改后再次提交即可<br><strong>分支合并模式</strong><br>    通过图形化的方式查看所有分支合并记录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --graph --pretty=oneline</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Fast forwaed(默认)合并</span><br></pre></td></tr></table></figure><p>​        不会产生新的提交点<br>添加参数 -no-ff(Not Fast Forward)<br>​        </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge --no-ff -m "use no-ff merge" dev</span><br></pre></td></tr></table></figure><p><strong>–no-ff的作用：</strong></p><p>git merge –no-ff 可以保存你之前的分支历史。能够更好的查看 merge历史，以及branch 状态。</p><p>git merge 则不会显示 feature，只保留单条分支记录。</p><p>​    master不予许修改，dev分支如果有多人共享，需要在创建自己的分支在进行开发，合并时使用no-ff方式<br>bug分支,暂挂工作区<br>​    有错误的代码不能保存在暂存区<br>​    保存当前工作区的状态<br>​        git stash<br>​    查看所有暂时挂起的工作区<br>​        git stash list<br>​    两步<br>​        恢复挂起的工作区<br>​            git stash apply<br>​        清除保存的工作区<br>​            git stash drop<br>​    一步<br>​        恢复并清除保存区<br>​            git stash pop<br>feature,扩展分支<br>​    已经开发，但不准备使用的功能等<br>​    强制删除有不同修改的分支<br>​        git branch -D feature<br>补丁<br>​    比较分支区别<br>​        git diff master &gt; patch<br>​        通过命令行的管道流，将diff保存再来patch文件里<br>​    通过补丁合并分支<br>​        git apply patch<br>​        当项目很大的时候，效率更高<br>​        不便于开发者沟通<br>​    git format-patch -M master<br>​        通知master<br>​    应用分支补丁<br>​        git am （补丁路劲）”E:\gitpro\0001-git-apply-patch.patch”</p><h1 id="gitignore的操作"><a href="#gitignore的操作" class="headerlink" title=".gitignore的操作"></a>.gitignore的操作</h1><p>目的是忽略指定类型的文件或者某个文件夹</p><ol><li>a、新建.gitignore文件：</li><li>b、输入要忽略的文件（可用通配符）</li><li>利用<code>git status</code> 查看，可以看出排除了写入的文件，避免了其提交</li></ol><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">HELP.md</span><br><span class="line">target/</span><br><span class="line">!.mvn/<span class="keyword">wrapper</span>/maven-<span class="keyword">wrapper</span>.jar</span><br><span class="line">!**/src/main<span class="comment">/**</span></span><br><span class="line"><span class="comment">!**/</span>src/test<span class="comment">/**</span></span><br><span class="line"><span class="comment">###忽略配置文件###</span></span><br><span class="line"><span class="comment">judge.properties</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### IntelliJ IDEA ###</span></span><br><span class="line"><span class="comment">.idea</span></span><br><span class="line"><span class="comment">*.iws</span></span><br><span class="line"><span class="comment">*.iml</span></span><br><span class="line"><span class="comment">*.ipr</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### NetBeans ###</span></span><br><span class="line"><span class="comment">/nbproject/private/</span></span><br><span class="line"><span class="comment">/nbbuild/</span></span><br><span class="line"><span class="comment">/dist/</span></span><br><span class="line"><span class="comment">/nbdist/</span></span><br><span class="line"><span class="comment">/.nb-gradle/</span></span><br><span class="line"><span class="comment">build/</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### VS Code ###</span></span><br><span class="line"><span class="comment">.vscode/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;&lt;p&gt;特点：&lt;/p&gt;&lt;p&gt;分布式版本控制系统&lt;br&gt;优势：&lt;br&gt;    SVN在开发过程中必须保证需要与SVN服务器连接才能使用，需要联网&lt;/p&gt;&lt;h1 id=&quot;基础操作&quot;&gt;&lt;a href=&quot;#基础操作&quot; class=&quot;headerlink&quot; title=&quot;基础操作&quot;&gt;&lt;/a&gt;基础操作&lt;/h1&gt;&lt;h2 id=&quot;1、设置全局信息&quot;&gt;&lt;a href=&quot;#1、设置全局信息&quot; class=&quot;headerlink&quot; title=&quot;1、设置全局信息&quot;&gt;&lt;/a&gt;1、设置全局信息&lt;/h2&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;设置开发者的用户名&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	git config --global user.name nicolas&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;设置开发者邮箱&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	git config --global user.email 1162314270@qq.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;取得全部的全局信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	git config --list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	git config -l&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="学习笔记" scheme="https://codeofli.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>linux</title>
    <link href="https://codeofli.github.io/2019/10/linux/linux/"/>
    <id>https://codeofli.github.io/2019/10/linux/linux/</id>
    <published>2019-10-12T06:20:26.000Z</published>
    <updated>2019-11-13T12:19:13.699Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="3-VM和Linux系统-CentOS-安装"><a href="#3-VM和Linux系统-CentOS-安装" class="headerlink" title="3.VM和Linux系统(CentOS)安装"></a>3.VM和Linux系统(CentOS)安装</h1><p>3.1安装vm和Centos</p><p>学习Linux需要一个环境，我们需要创建一个虚拟机，然后在虚拟机上安装一个Centos系统来学习。</p><p>1)先安装virtualmachine,vm12</p><p>2)再安装Linux(CentOS6.8)</p><p>3)原理示意图，这里我们画图说明一下VM和CentOS的关系。</p><a id="more"></a><p>3.3VM安装的步骤</p><p>1)去BIOS里修改设置开启虚拟化设备支持（f2,f10）</p><p>2)安装虚拟机软件（vm12）看老师的具体演示：因为老师的电脑上已经安装了VM12，因此我先卸载然后再安装。</p><p>3.4CentOS安装的步骤</p><p>1)创建虚拟机(空间)这里在配置网络连接时，有三种形式，需要大家伙注意：</p><p><img src="/2019/10/linux/linux/1565526076287.png" alt="虚拟机连接网络三种方式"></p><h2 id="3-5CentOS的终端使用和联网"><a href="#3-5CentOS的终端使用和联网" class="headerlink" title="3.5CentOS的终端使用和联网"></a>3.5CentOS的终端使用和联网</h2><p>1)终端的使用，点击鼠标右键，即可选择打开终端</p><p>2)配置网络，可以上网。点击上面右侧的；两个计算机图片，选择启用eth0,即可成功连接到网络，就可以上网。</p><p><img src="/2019/10/linux/linux/centos%E8%81%94%E7%BD%91" alt="1565532090697"></p><h2 id="3-7vmtools的安装和使用"><a href="#3-7vmtools的安装和使用" class="headerlink" title="3.7vmtools的安装和使用"></a>3.7vmtools的安装和使用</h2><p>3.7.1安装vmtools的步骤说明</p><p>1.进入centos</p><p>2.点击vm菜单的-&gt;installvmwaretools</p><p>3.centos会出现一个vm的安装包</p><p>4.点击右键解压,得到一个安装文件</p><p>5.进入该vm解压的目录，该文件在/root/桌面/vmware-tools-distrib/下</p><p>6.安装./vmware-install.pl</p><p>7.全部使用默认设置即可8.需要reboot重新启动即可生效</p><p>3.7.2使用vmtools来设置windows和linux的共享文件夹</p><p>1)菜单-&gt;vm-&gt;setting,如图设置即可注意:设置选项为alwaysenable,这样可以读写了</p><p>2)windows和centos可共享d:/share目录可以读写文件了</p><p>3)在centos的/mnt/hgfs/下</p><h1 id="4-Linux的目录结构"><a href="#4-Linux的目录结构" class="headerlink" title="4.Linux的目录结构"></a>4.Linux的目录结构</h1><p>4.1基本介绍</p><p>linux的文件系统是采用级层式的树状目录结构，在此结构中的最上层是根目录“/”，然后在此目录下再创建其他的目录。深刻理解linux树状文件目录是非常重要的，这里我给大家说明一下。</p><p>记住一句经典的话：==在Linux世界里，一切皆文件。==</p><p><img src="/2019/10/linux/linux/linux%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png" alt="1565662869703"></p><p>具体的目录结构:</p><p><strong>/bin   [重点]   (/usr/bin、/usr/local/bin)</strong></p><p>•是Binary的缩写, 这个目录存放着最经常使用的命令</p><p><strong>/home [重点]</strong></p><p>•存放普通用户的主目录，在Linux中每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的。</p><p><strong>/root [重点]</strong></p><p>•该目录为系统管理员，也称作超级权限者的用户主目录。</p><p><strong>/sbin(/usr/sbin、/usr/local/sbin)</strong></p><p>•s就是Super User的意思，这里存放的是系统管理员使用的系统管理程序。</p><p><strong>/lib</strong></p><p>•系统开机所需要最基本的动态连接共享库，其作用类似于Windows里的DLL文件。几乎所有的应用程序都需要用到这些共享库。</p><p><strong>/lost+found</strong></p><p>•这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。</p><p><strong>/etc [重点](etcetera,等等)</strong></p><p>•所有的系统管理所需要的配置文件和子目录my.conf </p><p><strong>/usr  [重点]</strong></p><p>•这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似与windows下的program files目录。</p><p><strong>/boot [重点]</strong></p><p>•存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件</p><p><strong>/srv</strong></p><p>•service缩写，该目录存放一些服务启动之后需要提取的数据。</p><p><strong>/sys</strong></p><p>•这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统sysfs</p><p><strong>/tmp</strong></p><p>•这个目录是用来存放一些临时文件的。</p><p><strong>/dev</strong> </p><p>•类似于windows的设备管理器，把所有的硬件用文件的形式存储。</p><p><strong>/media [重点]</strong></p><p>•linux系统会自动识别一些设备，例如U盘、光驱等等，当识别后，linux会把识别的设备挂载到这个目录下。</p><p><strong>/mnt [重点]</strong></p><p>•系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将外部的存储挂载在/mnt/上，然后进入该目录就可以查看里的内容了。d:/myshare</p><p><strong>/var [重点]</strong></p><p>•这个目录中存放着在不断扩充着的东西，习惯将经常被修改的目录放在这个目录下。包括各种日志文件。</p><p><strong>/opt</strong>     </p><p>•这是给<strong>主机额外安装软件所摆放的目录</strong>。如安装ORACLE数据库就可放到该目录下。默认为空。</p><p><strong>/usr/local [重点]</strong> </p><p>•这是另一个给主机额外安装软件所安装的目录。一般是通过编译源码方式安装的程序</p><p><strong>/selinux [security-enhanced linux] 360</strong></p><p>•SELinux是一种安全子系统,它能控制程序只能访问特定文件。</p><h2 id="4-3Linux目录总结"><a href="#4-3Linux目录总结" class="headerlink" title="4.3Linux目录总结"></a>4.3Linux目录总结</h2><p>1)linux的目录中有且只要一个根目录/<br>2)linux的各个目录存放的内容是规划好，不用乱放文件。<br>3)linux是以文件的形式管理我们的设备，因此linux系统，一切皆为文件。</p><p>4)linux的各个文件目录下存放什么内容，大家必须有一个认识。<br>5)学习后，你脑海中应该有一颗linux目录树</p><h1 id="5、远程登录Linux系统"><a href="#5、远程登录Linux系统" class="headerlink" title="5、远程登录Linux系统"></a>5、远程登录Linux系统</h1><p>5.1为什么需要远程登录Linux</p><p>5.1.1示意图</p><p><img src="/2019/10/linux/linux/%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95linux%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="1565664273564"></p><p>为什么需要远程登录Linux<br>说明: 公司开发时候，具体的情况是这样的</p><p>1) linux服务器是开发小组共享的.<br>2) 正式上线的项目是运行在公网的.<br>3) 因此程序员需要远程登录到centos进行项目管理或者开发.<br>4) 画出简单的网络拓扑示意图(帮助理解)<br>5) 远程登录客户端有Xshell5，Xftp5 , 我们学习使用Xshell5 和Xftp , 其它的远程工具大同小异.</p><p><strong>远程登录Linux-Xshell5介绍:</strong></p><p>说明:<br>Xshell 是目前最好的远程登录到Linux操作的软件，流畅的速度并且完美解决了中文乱码的问题，是目前程序员首选的软件。Xshell[1]是一个强大的安全终端模拟软件，它支持SSH1, SSH2, 以及Microsoft Windows 平台的TELNET 协议。<br>Xshell可以在Windows界面下用来访问远端不同系统下的服务器，从而比较好的达到远程控制终端的目的。</p><p><strong>特别说明：</strong>如果希望安装好XShell5就可以远程访问Linux系统的话，需要有一个前提，就是Linux启用了SSHD服务，该服务会监听22号端口。</p><p><strong>==终端setup指令查看系统服务中ssh是否开启==</strong></p><p><strong>如果都有，还是不行，就重新建立连接</strong></p><h2 id="5-3安装XShell5并使用"><a href="#5-3安装XShell5并使用" class="headerlink" title="5.3安装XShell5并使用"></a>5.3安装XShell5并使用</h2><p>5.3.2XShell5的关键配置</p><p><img src="/2019/10/linux/linux/xshell%E6%96%B0%E5%BB%BA%E5%9B%9E%E8%AF%9D.png" alt="1565666681964"></p><p>5.3.3XShel5远程登录到Linux后，就可以使用指令来操作Linux系统</p><h2 id="5-4远程上传下载文件Xftp5"><a href="#5-4远程上传下载文件Xftp5" class="headerlink" title="5.4远程上传下载文件Xftp5"></a>5.4远程上传下载文件Xftp5</h2><p>5.4.1XFtp5软件介绍</p><p>是一个基于windows平台的功能强大的SFTP、FTP文件传输软件。使用了Xftp以后，windows用户能安全地在UNIX/Linux和WindowsPC之间传输文件。</p><p>5.4.2XFtp5软件的安装这个看老师的演示即可.<br>5.4.3Xftp5的配置和使用</p><h1 id="6-vi和vim编辑器"><a href="#6-vi和vim编辑器" class="headerlink" title="6.vi和vim编辑器"></a>6.vi和vim编辑器</h1><p>6.1vi和vim的基本介绍<br>所有的Linux系统都会内建vi文本编辑器。<br>Vim具有程序编辑的能力，可以看做是Vi的增强版本，可以主动的以字体颜色辨别语法的正确性，方便程序设计。代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。</p><h2 id="6-2vi和vim的三种常见模式"><a href="#6-2vi和vim的三种常见模式" class="headerlink" title="6.2vi和vim的三种常见模式"></a>6.2vi和vim的三种常见模式</h2><p><strong>6.2.1正常模式</strong></p><p>在正常模式下，我们可以使用快捷键。以vim打开一个档案就直接进入一般模式了(这是默认的模式)。在这个模式中，你可以使用『上下左右』按键来移动光标，你可以使用『删除字符』或『删除整行』来处理档案内容，也可以使用『复制、贴上』来处理你的文件数据。<strong>6.2.2插入模式/编辑模式</strong></p><p>在模式下，程序员可以输入内容。按下i,I,o,O,a,A,r,R等任何一个字母之后才会进入编辑模式,一般来说按i即可</p><p><strong>6.2.3命令行模式</strong></p><p>在这个模式当中，可以提供你相关指令，完成读取、存盘、替换、离开vim、显示行号等的动作则是在此模式中达成的！</p><h2 id="6-4vi和vim三种模式的相互转化图"><a href="#6-4vi和vim三种模式的相互转化图" class="headerlink" title="6.4vi和vim三种模式的相互转化图"></a>6.4vi和vim三种模式的相互转化图</h2><p><img src="/2019/10/linux/linux/vi%E5%92%8Cvim%E4%B8%89%E7%A7%8D%E6%A8%A1%E5%BC%8F%E7%9A%84%E7%9B%B8%E4%BA%92%E8%BD%AC%E5%8C%96%E5%9B%BE.png" alt="1565770723325"></p><p><strong>快捷键使用练习:</strong></p><p>1) 拷贝当前行yy , 拷贝当前行向下的5行5yy，并粘贴。</p><p>2) 删除当前行dd  , 删除当前行向下的5行 5+dd</p><p>3) 在<strong>文件中查找某个单词</strong>[命令行下/关键字，回车查找,  输入n 就是查找下一个]</p><p>4) <strong>设置文件的行号，取消文件的行号.</strong></p><p>[命令行下: set nu 和:set nonu]</p><p>5) 编辑/etc/profile 文件，使用快捷键到底文档的最末行[G]和最首行[gg]</p><p>6) 在一个文件中输入”hello” ,然后又撤销这个动作u7) 编辑/etc/profile 文件，并将光标移动到20行shift+g8) 更多的看整理的文档</p><p>7)编辑/etc/profile文件，并将光标移动到第20行shift+g</p><p>第一步：显示行号:setnu</p><p>第二步：输入20这个数</p><p>第三步:输入（G）shift+g，</p><p>：20在按gg</p><p><strong>uu回退</strong></p><h2 id="6-6vim和vi的快捷键键盘一览图"><a href="#6-6vim和vi的快捷键键盘一览图" class="headerlink" title="6.6vim和vi的快捷键键盘一览图"></a>6.6vim和vi的快捷键键盘一览图</h2><p><img src="/2019/10/linux/linux/vim%E5%92%8Cvi%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE%E9%94%AE%E7%9B%98%E4%B8%80%E8%A7%88%E5%9B%BE.png" alt="1565771568531"></p><h1 id="7、实操篇开机、重启和用户登录注销"><a href="#7、实操篇开机、重启和用户登录注销" class="headerlink" title="7、实操篇开机、重启和用户登录注销"></a>7、实操篇开机、重启和用户登录注销</h1><p>7.1关机&amp;重启命令</p><p>7.1.1基本介绍</p><p><strong>shutdown</strong></p><p>shutdown-hnow:表示立即关机</p><p>shutdown-h1:表示1分钟后关机</p><p>shutdown-rnow:立即重启</p><p>halt</p><p>就是直接使用，效果等价于关机</p><p>reboot就是重启系统。</p><p>sync：把内存的数据同步到磁盘</p><p>7.1.2注意细节</p><p>当我们关机或者重启时，都应该先执行以下sync指令，把内存的数据写入磁盘，防止数据丢失。</p><p>7.2用户登录和注销</p><p>7.2.1基本介绍</p><p>1)登录时尽量少用root帐号登录，因为它是系统管理员，最大的权限，避免操作失误。可以利用普通用户登录，登录后再用”su-用户名’命令来切换成系统管理员身份.</p><p>2)在提示符下输入logout即可注销用户</p><p>7.2.2使用细节</p><p>1)logout注销指令在图形运行级别无效，在运行级别3下有效.</p><p>2)运行级别这个概念，后面给大家介绍</p><h1 id="8-实操篇用户管理"><a href="#8-实操篇用户管理" class="headerlink" title="8.实操篇用户管理"></a>8.实操篇用户管理</h1><p>8.1基本介绍</p><p>给大家画一个示意图，帮助大家理解用户管理的规则。</p><p><img src="/2019/10/linux/linux/%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86.png" alt="1565781941709"></p><p>说明</p><p>1)Linux系统是一个多用户多任务的操作系统，任何一个要使用系统资源的用户，都必须首先向系统管理员申请一个账号，然后以这个账号的身份进入系统。</p><p>2)Linux的用户需要至少要属于一个组。</p><h2 id="查看所有用户名"><a href="#查看所有用户名" class="headerlink" title="查看所有用户名"></a>查看所有用户名</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]# more /etc/passwd</span><br><span class="line">[root@hapdoop1 ~]# more /etc/passwd | cut -f 1 -d :</span><br><span class="line">root</span><br><span class="line">bin</span><br><span class="line">daemon</span><br><span class="line">adm</span><br><span class="line">lp</span><br><span class="line">sync</span><br><span class="line">shutdown</span><br><span class="line">halt</span><br><span class="line">mail</span><br><span class="line">uucp</span><br><span class="line">operator</span><br><span class="line">games</span><br><span class="line">gopher</span><br><span class="line">ftp</span><br><span class="line">nobody</span><br><span class="line">dbus</span><br><span class="line">usbmuxd</span><br><span class="line">rtkit</span><br><span class="line">avahi-autoipd</span><br><span class="line">vcsa</span><br><span class="line">abrt</span><br><span class="line">haldaemon</span><br><span class="line">ntp</span><br><span class="line">apache</span><br><span class="line">saslauth</span><br><span class="line">postfix</span><br><span class="line">gdm</span><br><span class="line">pulse</span><br><span class="line">sshd</span><br><span class="line">tcpdump</span><br><span class="line">xm</span><br><span class="line">fox</span><br><span class="line">tom</span><br></pre></td></tr></table></figure><p>8.2添加用户</p><p>8.2.1基本语法</p><p>useradd [选项] 用户名</p><p>8.2.2实际案例</p><p>特别说明：<strong>==cd表示changedirectory==</strong>,切换目录.</p><p>8.2.3细节说明</p><p>1)<strong>当创建用户成功后，(加上-m参数)会自动的创建和用户同名的家目录</strong></p><p><strong>==没有-m参数不会有缺省目录==</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@iZuf6i77uwsb2oiszspgvkZ:~# useradd -m nicolas</span><br></pre></td></tr></table></figure><p>2)也可以通过useradd-d指定目录新的用户名，给新创建的用户指定家目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 home]# useradd -d /home/dog xh</span><br></pre></td></tr></table></figure><p>指定/修改密码基本语法</p><p>passwd    用户名</p><p>删除用户基本语法userdel   用户名</p><p>应用案例1)删除用户xiaoming，但是要保留家目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]# userdel xm</span><br></pre></td></tr></table></figure><p>2)删除用户以及用户主目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 home]# userdel -r xh</span><br></pre></td></tr></table></figure><p>8.4.3思考题在删除用户时，我们一般不会将家目录删除。</p><p>8.5查询用户信息</p><p>8.5.1基本语法</p><p>id 用户名</p><p>应用实例案例1：请查询root信息8.5.3</p><p>![1565783310913](linux/id username.png)</p><p>细节说明</p><p>1)当用户不存在时，返回”无此用户”</p><h2 id="8-6切换用户"><a href="#8-6切换用户" class="headerlink" title="8.6切换用户"></a>8.6切换用户</h2><p>8.6.1介绍(substitute user)</p><p>在操作Linux中，如果当前用户的权限不够，可以通过su-指令，切换到高权限用户，比如root</p><p>8.6.2基本语法(run a shell with substitute user and group IDs)</p><p>su– 切换用户名</p><p>8.6.3应用实例</p><p>1)创建一个用户zf,，指定密码，然后切换到zf.</p><p><img src="/2019/10/linux/linux/su-%E5%88%87%E6%8D%A2%E7%94%A8%E6%88%B7" alt="1565785356718"></p><p>细节说明</p><p>1)从权限高的用户切换到权限低的用户，不需要输入密码，反之需要。</p><p>2)当需要返回到原来用户时，使用exit指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]# whoami</span><br><span class="line">root</span><br></pre></td></tr></table></figure><p>8.7用户组</p><p>8.7.1介绍类似于角色，系统可以对有共性的多个用户进行统一的管理。</p><p><strong>8.7.2增加组</strong></p><p>groupadd 组名</p><p>案例演示</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]# groupadd wudang</span><br></pre></td></tr></table></figure><p><strong>8.7.4删除组指令</strong></p><p>(基本语法)groupdel 组名</p><p>8.7.5案例演示</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]# groupdel wudang</span><br></pre></td></tr></table></figure><h2 id="8-8增加用户时直接加上组"><a href="#8-8增加用户时直接加上组" class="headerlink" title="8.8增加用户时直接加上组"></a>8.8增加用户时直接加上组</h2><p>8.8.1指令(基本语法)</p><p>useradd -g 用户组 用户名</p><p>8.8.2案例演示</p><p>增加一个用户zwj,直接将他指定到wudang步骤看演示：</p><p>![1565786129905](linux/useradd -g)</p><p>8.9修改用户的组</p><p>8.9.1指令(基本语法)</p><p>usermod -g 用户组 用户名</p><p>8.9.2案例演示创建一个shaolin组，让将zwj用户修改到shaolin</p><p>![1565786180228](linux/usermod -g.png)</p><p><strong>8.10/etc/passwd文件</strong></p><p>用户（user）的配置文件，记录用户的各种信息</p><p>每行的含义：用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录Shell</p><p><img src="/2019/10/linux/linux/1565792119178.png" alt="1565792119178"></p><p>8.11/etc/shadow文件</p><p>口令的配置文件</p><p>每行的含义：登录名:加密口令:最后一次修改时间:最小时间间隔:最大时间间隔:警告时间:不活动时间:失效时间:标志</p><p>8.12/etc/group文件</p><p>组(group)的配置文件，记录Linux包含的组的信息</p><p>每行含义：组名:口令:组标识号:组内用户列表</p><p><img src="/2019/10/linux/linux/1565792160979.png" alt="1565792160979"></p><h1 id="9、实操篇实用指令"><a href="#9、实操篇实用指令" class="headerlink" title="9、实操篇实用指令"></a>9、实操篇实用指令</h1><h2 id="9-1指定运行级别"><a href="#9-1指定运行级别" class="headerlink" title="9.1指定运行级别"></a>9.1指定运行级别</h2><p><strong>运行级别说明：</strong></p><p>0：关机</p><p>1：单用户【找回丢失密码】</p><p>2：多用户状态没有网络服务</p><p>3：多用户状态有网络服务4：系统未使用保留给用户</p><p>5：图形界面</p><p>6：系统重启</p><p>常用运行级别是3和5，要修改默认的运行级别可改文件/etc/inittab的id:5:initdefault:这一行中的数字运行级别的示意图：</p><p><img src="/2019/10/linux/linux/1565792596928.png" alt="1565792596928"></p><p>9.2切换到指定运行级别的指令</p><p>9.2.1基本语法</p><p>init[012356]</p><p><img src="/2019/10/linux/linux/1565792796464.png" alt="1565792796464"></p><p>9.2.2应用实例案例</p><p>1：通过init来切换不同的运行级别，比如动5-&gt;3，然后关机</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">init3</span><br><span class="line"></span><br><span class="line">init5</span><br><span class="line"></span><br><span class="line">init0</span><br></pre></td></tr></table></figure><p>9.2.3面试题</p><p>  <strong>如何找回root密码</strong>，如果我们不小心，忘记root密码，怎么找回。</p><p>思路：进入到单用户模式，然后修改root密码。</p><p>因为进入单用户模式，root不需要密码就可以登录。演示一把（注意观察）：</p><p><strong>总结:</strong>开机-&gt;在引导时输入回车键-&gt;看到一个界面输入e-&gt;看到一个新的界面，选中第二行（编辑内核）在输入e-&gt;在这行最后输入1,再输入回车键-&gt;再次输入b,这时就会进入到单用户模式。这时，我们就进入到单用户模式，使用passwd指令来修改root密码。</p><p>2)请设置我们的运行级别，linux运行后，直接进入到命令行界面，即进入到3</p><p>运行级别vim/etc/inittab将id:5:initdefault:这一行中的数字,5这个数字改成对应的运行级别即可。</p><h2 id="9-3帮助指令"><a href="#9-3帮助指令" class="headerlink" title="9.3帮助指令"></a>9.3帮助指令</h2><p>9.3.1介绍</p><p>当我们对某个指令不熟悉时，我们可以使用Linux提供的帮助指令来了解这个指令的使用方法。</p><p><strong>9.3.2man(manual)</strong> 获得帮助信息</p><ul><li><p>基本语法</p></li><li><p>man [命令或配置文件]（功能描述：获得帮助信息）</p></li><li><p>应用实例案例：查看ls命令的帮助信息</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]# man ls</span><br></pre></td></tr></table></figure><p>9.3.3help指令</p><p> 基本语法</p><p>help命令（功能描述：获得shell内置命令的帮助信息）</p><p>应用实例案例：查看cd命令的帮助信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]# help cd</span><br></pre></td></tr></table></figure><h2 id="9-4文件目录类"><a href="#9-4文件目录类" class="headerlink" title="9.4文件目录类"></a>9.4文件目录类</h2><p>9.4.1pwd 指令(print name of current/working directory)</p><p>•基本语法</p><p>pwd (功能描述：显示当前工作目录的绝对路径)</p><p>•应用实例案例：显示当前工作目录的绝对路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]# pwd</span><br><span class="line">/root</span><br></pre></td></tr></table></figure><p>9.4.2ls指令 (list directory contents)</p><p>•基本语法</p><p>ls [选项] [目录或是文件]</p><p>•常用选项</p><p>-a：显示当前目录所有的文件和目录，包括隐藏的。</p><p>-l：以列表的方式显示信息</p><p>•应用实例案例:查看当前目录的所有内容信息</p><h3 id="9-4-3cd指令"><a href="#9-4-3cd指令" class="headerlink" title="9.4.3cd指令"></a>9.4.3cd指令</h3><p>•基本语法</p><p>cd [参数] (功能描述：切换到指定目录)</p><p>•常用参数</p><p>绝对路径和相对路径</p><p>如何理解绝对路径和相对路径：</p><p>cd~ 或者 cd：回到自己的家目录</p><p>cd.. : 回到当前目录的上一级目录</p><p>•应用实例</p><p>案例1：使用绝对路径切换到root目录</p><p>cd/root</p><p>案例2:</p><p>使用相对路径到/root目录</p><p>这里我们需要知道该用户目录在哪个目录下，才能写出这个指令，假设在/usr/lib</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd../../root</span><br></pre></td></tr></table></figure><p>案例3：表示回到当前目录的上一级目录cd..案例4：回到家目录</p><p>cd cd~</p><h3 id="9-4-4-mkdir指令"><a href="#9-4-4-mkdir指令" class="headerlink" title="9.4.4 mkdir指令"></a>9.4.4 mkdir指令</h3><p>mkdir指令用于创建目录(makedirectory)</p><p>基本语法</p><p>mkdir [选项] 要创建的目录</p><p>•常用选项</p><p>-p(–parents)：创建多级目录</p><p>•应用实例案例1:创建一个目录/home/dog</p><p><img src="/2019/10/linux/linux/1565837024122.png" alt="1565837024122"></p><p>案例2:创建多级目录/home/animal/tiger</p><p><img src="/2019/10/linux/linux/1565837051989.png" alt="1565837051989"></p><h3 id="9-4-5rmdir指令"><a href="#9-4-5rmdir指令" class="headerlink" title="9.4.5rmdir指令"></a>9.4.5rmdir指令</h3><p>介绍</p><p>rmdir指令删除空目录</p><p>基本语法</p><p>rmdir [选项] 要删除的空目录</p><p>应用实例案例1:删除一个目录/home/dog</p><p><img src="/2019/10/linux/linux/1565837251812.png" alt="1565837251812"></p><p>使用细节</p><p>rmdir删除的是空目录，如果目录下有内容时无法删除的。</p><p>提示：如果需要删除非空目录，需要使用rm-rf要删除的目录</p><p><img src="/2019/10/linux/linux/1565837276308.png" alt="1565837276308"></p><h3 id="9-4-6touch指令"><a href="#9-4-6touch指令" class="headerlink" title="9.4.6touch指令"></a>9.4.6touch指令</h3><p>touch指令 创建空文件</p><p>•基本语法</p><p>touch 文件名称</p><p>•应用实例案例</p><p>1:创建一个空文件hello.txt</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 home]# touch ok1.txt ok2.txt</span><br><span class="line">[root@hapdoop1 home]# ls</span><br><span class="line">ok1.txt  ok2.txt  xm</span><br></pre></td></tr></table></figure><h3 id="9-4-7cp指令-重要"><a href="#9-4-7cp指令-重要" class="headerlink" title="9.4.7cp指令[重要]"></a><strong>9.4.7cp指令[重要]</strong></h3><p>cp指令 拷贝文件到指定目录</p><p>•基本语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp [选项] source dest</span><br></pre></td></tr></table></figure><p>•常用选项-r：递归复制整个文件夹</p><p>•应用实例案例</p><p>1:将/home/aaa.txt拷贝到/home/bbb目录下[拷贝单个文件</p><p><img src="/2019/10/linux/linux/1565838042908.png" alt="1565838042908"></p><p>案例2:递归复制整个文件夹，举例将/home/test整个目录拷贝到/home/zwj目录</p><p><img src="/2019/10/linux/linux/1565838068157.png" alt="1565838068157"></p><p>•使用细节</p><p>强制覆盖不提示的方法：\cp</p><p><img src="/2019/10/linux/linux/1565838103619.png" alt="1565838103619"></p><p>9.4.8rm指令</p><p>rm 指令移除</p><p>【删除】文件或目录</p><p>•基本语法rm[选项]要删除的文件或目录</p><p>•常用选项</p><p>-r：递归删除整个文件夹</p><p>-f：强制删除不提示</p><p>•应用实例案例1:将/home/aaa.txt删除</p><p><img src="/2019/10/linux/linux/1565838446936.png" alt="1565838446936"></p><p>案例2:递归删除整个文件夹/bb</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 /]# rm -r bb/</span><br><span class="line">rm：是否删除目录 "bb"？y</span><br></pre></td></tr></table></figure><p>使用细节</p><p>强制删除不提示的方法：带上-f参数即可</p><p><img src="/2019/10/linux/linux/1565838608072.png" alt="1565838608072"></p><p>9.4.9mv指令</p><p>mv 移动文件与目录或重命名</p><p>•基本语法</p><p>mv oldNameFile newNameFile (功能描述：重命名)</p><p>mv /temp/movefile /targetFolder(功能描述：移动文件)</p><p>•应用实例</p><p>案例1:将/home/aaa.txt文件重新命名为pig.txt</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 home]# mv aaa.txt pig.txt</span><br><span class="line">[root@hapdoop1 home]# ls</span><br><span class="line">ok1.txt  ok2.txt  pig.txt  xm</span><br></pre></td></tr></table></figure><p>案例2:将/home/pig.txt文件移动到/root目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 home]# mv pig.txt /root</span><br><span class="line">[root@hapdoop1 home]# cd ~</span><br><span class="line">[root@hapdoop1 ~]# ls</span><br><span class="line">anaconda-ks.cfg  install.log.syslog  公共的   视频  下载</span><br><span class="line">hello.java       ok.txt              红1.jpg  图片  音乐</span><br><span class="line">install.log      pig.txt             模板     文档  桌面</span><br></pre></td></tr></table></figure><p>9.4.10 cat指令(concatenate)</p><p>cat查看文件内容，是以只读的方式打开。</p><p>•基本语法</p><p>cat [选项] 要查看的文件</p><p>•常用选项-n：显示行号</p><p>•应用实例</p><p>案例1:/etc/profile文件内容，并显示行号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]# cat -n /etc/profile | more</span><br></pre></td></tr></table></figure><p>•使用细节</p><p>cat只能浏览文件，而不能修改文件，为了浏览方便，一般会带上管道命令|more</p><p>cat文件名|more[分页浏览]</p><p>9.4.11more指令 </p><p>more指令是一个基于VI编辑器的文本过滤器，它以<strong>全屏幕的方式按页显示文本文件的内容</strong>。</p><p>more指令中内置了若干快捷键，详见操作说明</p><p>•基本语法 </p><p>more 要查看的文件</p><p>•操作说明</p><p>•应用实例案例:</p><p>采用more查看文件/etc/profile</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]# more /etc/profile</span><br></pre></td></tr></table></figure><p><img src="/2019/10/linux/linux/C:%5CUsers%5C11623%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1565839967183.png" alt="1565839967183"></p><p>9.4.12less指令</p><p>less指令用来<strong>分屏查看文件内容</strong>，它的功能与more指令类似，但是比more指令更加强大，支持各种显示终端。less指令在显示文件内容时，并不是一次将整个文件加载之后才显示，而是根据显示需要加载内容，对于<strong>显示大型文件具有较高的效率</strong>。</p><p>•基本语法</p><p>less 要查看的文件</p><p>•操作说明</p><p>•应用实例</p><p>案例:采用less查看一个大文件文件/opt/金庸-射雕英雄传txt精校版.txt</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 opt]# less 金庸-射雕英雄传txt精校版.txt</span><br></pre></td></tr></table></figure><p><img src="/2019/10/linux/linux/1565840469904.png" alt="1565840469904"></p><h3 id="9-4-13-gt-指令和-gt-gt-指令"><a href="#9-4-13-gt-指令和-gt-gt-指令" class="headerlink" title="9.4.13&gt;指令和&gt;&gt;指令"></a>9.4.13&gt;指令和&gt;&gt;指令</h3><p>介绍</p><p> 指令和&gt;&gt;指令<br> <strong>&gt; 输出重定向:会将原来的文件的内容覆盖</strong></p><p> &gt;&gt;追加：不会覆盖原来文件的内容，而是追加到文件的尾部。•</p><p>基本语法</p><p>1)ls-l&gt;文件（功能描述：列表的内容写入文件a.txt中（覆盖写））</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 home]# ls -l &gt; a.txt</span><br></pre></td></tr></table></figure><p>说明：ls-l&gt;a.txt,将ls-l的显示的内容覆盖写入到a.txt文件，如果该文件不存在，就创建该文件。</p><p>2)ls-al&gt;&gt;文件（功能描述：列表的内容追加到文件aa.txt的末尾）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 home]# ls -al &gt;&gt; a.txt</span><br></pre></td></tr></table></figure><p>3)cat文件1&gt;文件2（功能描述：将文件1的内容覆盖到文件2）<strong>相当于复制文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 home]# cat /etc/profile &gt; c.txt</span><br></pre></td></tr></table></figure><p>9.4.14echo指令</p><p>echo输出内容到控制台。</p><p>•基本语法echo[选项] [输出内容]</p><p>•应用实例</p><p>案例:使用echo指令输出环境变量,输出当前的环境路径。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]# echo $PATH</span><br><span class="line"></span><br><span class="line">[root@hapdoop1 ~]# echo "hello"</span><br></pre></td></tr></table></figure><p>9.4.15head指令</p><p>head用于显示文件的开头部分内容，默认情况下head指令显示文件的前10行内容</p><p>•基本语法</p><p>head 文件(功能描述：查看文件头10行内容)</p><p>head -n 5 文件   (功能描述：查看文件头5行内容，5可以是任意行数)</p><p>•应用实例</p><p>案例:查看/etc/profile的前面5行代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]# head -n 5 /etc/profile</span><br></pre></td></tr></table></figure><p>9.4.16tail指令</p><p>tail用于输出文件中尾部的内容，默认情况下tail指令显示文件的后10行内容。</p><p>•基本语法</p><p>1)tail 文件（功能描述：查看文件后10行内容）</p><p>2)tail -n 5 文件（功能描述：查看文件后5行内容，5可以是任意行数）3)tail -f 文件（功能描述：实时追踪该文档的所有更新，工作经常使用）</p><p>•应用实例</p><p>案例1:查看/etc/profile最后5行的代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]# tail -n 5 /etc/profile</span><br></pre></td></tr></table></figure><p>案例2:实时监控mydate.txt,看看到文件有变化时，是否看到，实时的追加日期</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 home]# tail -f mydate.txt</span><br></pre></td></tr></table></figure><p>9.4.17ln指令</p><p>软链接也叫符号链接，类似于windows里的快捷方式，主要存放了链接其他文件的路径</p><p>•基本语法</p><p>ln -s [原文件或目录] [软链接名]（功能描述：给原文件创建一个软链接）</p><p>•应用实例</p><p>案例1:在/home目录下创建一个软连接linkToRoot，连接到/root目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 home]# ln -s /root linkToRoot</span><br></pre></td></tr></table></figure><p>案例2:删除软连接linkToRoot</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 home]# rm linkToRoot</span><br></pre></td></tr></table></figure><p>•细节说明</p><p>当我们使用pwd指令查看目录时，仍然看到的是软链接所在目录。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 home]# cd linkToRoot/</span><br><span class="line">[root@hapdoop1 linkToRoot]# pwd</span><br><span class="line">/home/linkToRoot</span><br><span class="line">[root@hapdoop1 linkToRoot]# ls</span><br><span class="line">anaconda-ks.cfg  install.log.syslog  公共的   视频  下载</span><br><span class="line">hello.java       ok.txt              红1.jpg  图片  音乐</span><br><span class="line">install.log      pig.txt             模板     文档</span><br></pre></td></tr></table></figure><h3 id="9-4-18history指令"><a href="#9-4-18history指令" class="headerlink" title="9.4.18history指令"></a>9.4.18history指令</h3><p>查看已经执行过历史命令,也可以执行历史指令</p><p>•基本语法history（功能描述：查看已经执行过历史命令）</p><p>•应用实例案例1:显示所有的历史命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 home]# history</span><br></pre></td></tr></table></figure><p>案例2:显示最近使用过的10个指令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 home]# history 10</span><br></pre></td></tr></table></figure><p>案例3：执行历史编号为5的指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 home]# !111</span><br></pre></td></tr></table></figure><h2 id="9-5时间日期类"><a href="#9-5时间日期类" class="headerlink" title="9.5时间日期类"></a>9.5时间日期类</h2><p>9.5.1date指令</p><p>-显示当前日期</p><p>•基本语法</p><p>1)date（功能描述：显示当前时间）</p><p>2)date+%Y（功能描述：显示当前年份）</p><p>3)date+%m（功能描述：显示当前月份）</p><p>4)date+%d（功能描述：显示当前是哪一天）</p><p>5)date”+%Y-%m-%d%H:%M:%S”（功能描述：显示年月日时分秒）</p><p>•应用实例案例1:显示当前时间信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 home]# date</span><br><span class="line">2019年 08月 15日 星期四 17:57:34 CST</span><br></pre></td></tr></table></figure><p>案例2:显示当前时间年月日</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 home]# date "+%Y %m %d"</span><br><span class="line">2019 08 15</span><br></pre></td></tr></table></figure><p>案例3:显示当前时间年月日时分秒</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 home]# date "+%Y %m %d %H:%M:%S"</span><br><span class="line">2019 08 15 18:04:05</span><br></pre></td></tr></table></figure><p>9.5.2date指令</p><p>-设置日期</p><p>•基本语法</p><p>date -s 字符串时间</p><p>•应用实例</p><p>案例1:设置系统当前时间，比如设置成2018-10-1011:22:22</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 home]# date -s "2019-9-9 11:11:11"</span><br><span class="line">2019年 09月 09日 星期一 11:11:11 CST</span><br></pre></td></tr></table></figure><p>9.5.3cal指令(calendar)</p><p>查看日历指令</p><p>•基本语法cal[选项]（功能描述：不加选项，显示本月日历）</p><p>•应用实例案例1:显示当前日历</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 home]# cal</span><br></pre></td></tr></table></figure><p>案例2:显示2020年日历</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]# cal 2020</span><br></pre></td></tr></table></figure><h2 id="9-6搜索查找类"><a href="#9-6搜索查找类" class="headerlink" title="9.6搜索查找类"></a>9.6搜索查找类</h2><p>9.6.1find指令</p><p>find指令将从指定目录向下递归地遍历其各个子目录，将满足条件的文件或者目录显示在终端。</p><p>•基本语法</p><p>find [搜索范围] [选项]</p><p>•选项说明</p><p><img src="/2019/10/linux/linux/1565860782439.png" alt="1565860782439"></p><p>•应用实例</p><p>案例1:按文件名：根据名称查找/home目录下的hello.txt文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]# find /home -name hello.txt</span><br></pre></td></tr></table></figure><p>案例2：按拥有者：查找/opt目录下，用户名称为root的文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]# find /opt -user root</span><br></pre></td></tr></table></figure><p>案例3：查找整个linux系统下大于20m的文件（+n大于-n小于n等于）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]# find /opt -size +20M</span><br></pre></td></tr></table></figure><p>查询/目录下，所有.txt的文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]# find / -name \*.txt</span><br></pre></td></tr></table></figure><p>9.6.2locate指令</p><p>locaate指令可以快速定位文件路径。locate指令利用事先建立的系统中所有文件名称及路径的locate数据库实现快速定位给定的文件。Locate指令无需遍历整个文件系统，查询速度较快。为了保证查询结果的准确度，管理员必须定期更新locate时刻。</p><p>•基本语法</p><p>locate 搜索文件</p><p>•特别说明由于locate指令基于数据库进行查询，所以<strong>第一次运行前，必须使用updatedb指令创建locate数据库。</strong></p><p>•应用实例</p><p>案例1:请使用locate指令快速定位hello.txt文件所在目录</p><p><img src="/2019/10/linux/linux/1565861704260.png" alt="1565861704260"></p><h3 id="9-6-3grep指令和管道符号"><a href="#9-6-3grep指令和管道符号" class="headerlink" title="9.6.3grep指令和管道符号|"></a>9.6.3grep指令和管道符号|</h3><p><strong>grep过滤查找</strong>，管道符，“|”，表示将前一个命令的处理结果输出传递给后面的命令处理。</p><p>•基本语法</p><p>grep [选项] 查找内容源文件</p><p>•常用选项</p><p><img src="/2019/10/linux/linux/1565862055457.png" alt="1565862055457"></p><p>•应用实例</p><p>案例1:请在hello.txt文件中，查找”yes”所在行，并且显示行号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 home]# cat hello.txt | grep -n yes</span><br><span class="line"><span class="meta">#</span><span class="bash">不区分大小写</span></span><br><span class="line">[root@hapdoop1 home]# cat hello.txt | grep -ni yes</span><br></pre></td></tr></table></figure><h2 id="9-7压缩和解压类"><a href="#9-7压缩和解压类" class="headerlink" title="9.7压缩和解压类"></a>9.7压缩和解压类</h2><p>9.7.1gzip/gunzip指令</p><p>gzip用于压缩文件，gunzip用于解压的</p><p>•基本语法</p><p>gzip 文件（功能描述：压缩文件，只能将文件压缩为*.gz文件）</p><p>gunzip 文件.gz（功能描述：解压缩文件命令）</p><p>•应用实例</p><p>案例1:gzip压缩，将/home下的hello.txt文件进行压缩</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 home]# gzip hello.txt</span><br></pre></td></tr></table></figure><p>案例2:gunzip压缩，将/home下的hello.txt.gz文件进行解压缩</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 home]# gunzip hello.txt.gz</span><br></pre></td></tr></table></figure><p>细节说明</p><p>当我们使用gzip对文件进行压缩后，不会保留原来的文件。</p><p>9.7.2 zip/unzip指令</p><p>zip用于压缩文件，unzip用于解压的，这个在项目打包发布中很有用的</p><p>•基本语法</p><p>zip [选项] XXX.zip 将要压缩的内容（功能描述：压缩文件和目录的命令）unzip [选项] XXX.zip（功能描述：解压缩文件）</p><p>•zip常用选项</p><p>-r：递归压缩，即压缩目录</p><p>unzip的常用选项</p><p>-d &lt;目录&gt;：指定解压后文件的存放目录</p><p>•应用实例</p><p>案例1:将/home下的所有文件进行压缩成mypackage.zip</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 home]# zip -r mypackge.zip /home/</span><br></pre></td></tr></table></figure><p>案例2:将mypackge.zip解压到/opt/tmp目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 home]# unzip -d /opt/tmp/ mypackge.zip</span><br></pre></td></tr></table></figure><h3 id="9-7-3tar指令"><a href="#9-7-3tar指令" class="headerlink" title="9.7.3tar指令"></a>9.7.3tar指令</h3><p>tar指令是打包指令，最后打包后的文件是.tar.gz的文件。</p><p>•基本语法</p><p>tar [选项] XXX.tar.gz 打包的内容(功能描述：打包目录，压缩后的文件格式.tar.gz)</p><p>•选项说明</p><p>v(verbose)</p><p>z(gzip)</p><p>f(file)</p><p>c(file)</p><p>x(extract)</p><p><img src="/2019/10/linux/linux/1565873174567.png" alt="1565873174567"></p><p>•应用实例</p><p>案例1:压缩多个文件，将/home/a1.txt和/home/a2.txt压缩成a.tar.gz</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 home]# tar -zcvf a.tar.gz ok1.txt ok2.txt</span><br></pre></td></tr></table></figure><p>案例3:将a.tar.gz解压到当前目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 home]# tar -zxvf a.tar.gz</span><br></pre></td></tr></table></figure><p>案例4:将myhome.tar.gz解压到/opt/目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 home]# tar -zxvf a.tar.gz -C /opt</span><br></pre></td></tr></table></figure><h1 id="10-组管理和权限管理"><a href="#10-组管理和权限管理" class="headerlink" title="10.组管理和权限管理"></a>10.组管理和权限管理</h1><p>10.1Linux组</p><p>基本介绍</p><p>在linux中的每个用户必须属于一个组，不能独立于组外。在linux中每个文件有所有者、所在组、其它组的概念。</p><p>1)所有者</p><p>2)所在组</p><p>3)其它组</p><p>4)改变用户所在的组</p><p><img src="/2019/10/linux/linux/1565875927535.png" alt="1565875927535"></p><p>10.2文件/目录所有者</p><p>一般为文件的创建者,谁创建了该文件，就自然的成为该文件的所有者。10.2.1查看文件的所有者</p><p>1)指令：ls -ahl</p><p>2)应用实例：创建一个组police,再创建一个用户tom,将tom放在police组,然后使用tom来创建一个文件ok.txt，看看情况如何</p><p><img src="/2019/10/linux/linux/1565875980700.png" alt="1565875980700"></p><p><img src="/2019/10/linux/linux/1565875994021.png" alt="1565875994021"></p><p><img src="/2019/10/linux/linux/imgs%5C1565876017558.png" alt="1565876017558"></p><h2 id="10-3组的创建"><a href="#10-3组的创建" class="headerlink" title="10.3组的创建"></a>10.3组的创建</h2><p>10.3.1基本指令</p><p>groupadd 组名</p><p>10.3.2应用实例:</p><p>创建一个组,monster</p><p>创建一个用户fox，并放入到monster组中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]# groupadd monster</span><br><span class="line">[root@hapdoop1 ~]# useradd -g monster fox</span><br></pre></td></tr></table></figure><h2 id="10-4文件-目录所在组"><a href="#10-4文件-目录所在组" class="headerlink" title="10.4文件/目录所在组"></a>10.4文件/目录所在组</h2><p>当某个用户创建了一个文件后，默认这个文件的所在组就是该用户所在的组。### 10.4.1查看文件/目录所在组</p><p>•基本指令</p><p>ls –ahl</p><h3 id="10-4-2修改文件所在的组"><a href="#10-4-2修改文件所在的组" class="headerlink" title="10.4.2修改文件所在的组"></a>10.4.2修改文件所在的组</h3><p>•基本指令</p><p> chgrp 组名 文件名</p><p>•应用实例</p><p>使用root用户创建文件orange.txt,看看当前这个文件属于哪个组，然后将这个文件所在组，修改到police组。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]# chgrp police orange.txt </span><br><span class="line">[root@hapdoop1 ~]# ls -ahl</span><br><span class="line">-rw-r--r--.  1 root police   12 9月  16 02:17 orange.txt</span><br></pre></td></tr></table></figure><p>10.5其它组</p><p>除文件的所有者和所在组的用户外，系统的其它用户都是文件的其它组.</p><p>10.6改变用户所在组</p><p>在添加用户时，可以指定将该用户添加到哪个组中，同样的用root的管理权限可以改变某个用户所在的组。</p><p>10.6.1改变用户所在组</p><p>1)usermod –g 组名 用户名</p><p>2)usermod –d 目录名 用户名 改变该用户登陆的初始目录。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]# usermod -g  bandit fox</span><br></pre></td></tr></table></figure><h2 id="10-7权限的基本介绍"><a href="#10-7权限的基本介绍" class="headerlink" title="10.7权限的基本介绍"></a>10.7权限的基本介绍</h2><p>ls -l中显示的内容如下：</p><p>-rwxrw-r–1rootroot1213Feb209:39abc</p><p>0-9位说明</p><p>1)第0位确定文件类型(d,-,l,c,b)</p><p>2)第1-3位确定所有者（该文件的所有者）拥有该文件的权限。—User</p><p>3)第4-6位确定所属组（同用户组的）拥有该文件的权限，—Group</p><p>4)第7-9位确定其他用户拥有该文件的权限—Other</p><p><img src="/2019/10/linux/linux/1565876081126.png" alt="1565876081126"></p><h2 id="10-8rwx权限详解"><a href="#10-8rwx权限详解" class="headerlink" title="10.8rwx权限详解"></a>10.8rwx权限详解</h2><p><strong>10.8.1rwx作用到文件</strong></p><p>1)[r]代表可读(read):可以读取,查看 ： 数字4</p><p>2)[w]代表可写(write):可以修改,但是不代表可以删除该文件,删除一个文件的前提条件是对该文件所在的目录有写权限，才能删除该文件. ：数字2</p><p>3)[x]代表可执行(execute):可以被执行 ：数字1</p><p><strong>10.8.2rwx作用到目录</strong></p><p>1)[r]代表可读(read):可以读取，ls查看目录内容</p><p>2)[w]代表可写(write):可以修改,目录内创建+删除+重命名目录</p><p>3)[x]代表可执行(execute):可以进入该目录10.9文件及目录权限实际案例ls-l中显示的内容如下：(记住)-rwxrw-r–1rootroot1213Feb209:39abc</p><p>10个字符确定不同用户能对文件干什么</p><p><strong>第一个字符代表文件类型：文件(-),目录(d),链接(l)</strong></p><p>其余字符每3个一组(rwx)读(r)写(w)执行(x)</p><p>第一组rwx:文件拥有者的权限是读、写和执行</p><p>第二组rw-:与文件拥有者同一组的用户的权限是读、写但不能执行</p><p>第三组r–:不与文件拥有者同组的其他用户的权限是读不能写和执行</p><p>可用数字表示为:r=4,w=2,x=1因此rwx=4+2+1=7</p><p>1                     文件：硬连接数或目录：子目录数</p><p>root                 用户root组</p><p>1213                文件大小(字节)，如果是文件夹，显示4096字节</p><p>Feb209:39        最后修改日期</p><p>abc                    文件名</p><h3 id="10-9文件及目录权限"><a href="#10-9文件及目录权限" class="headerlink" title="10.9文件及目录权限"></a>10.9文件及目录权限</h3><p>ls-l中显示的内容如下：(记住)</p><p>-rwxrw-r–1rootroot1213Feb209:39abc</p><h2 id="10-10修改权限-chmod"><a href="#10-10修改权限-chmod" class="headerlink" title="10.10修改权限-chmod"></a>10.10修改权限-chmod</h2><p>10.10.1基本说明：</p><p>通过chmod指令，可以修改文件或者目录的权限</p><p>10.10.2第一种方式：+、-、=变更权限</p><p>u:所有者g:所有组o:其他人a:所有人(u、g、o的总和)</p><p>1)chmod u=rwx,g=rx,o=x文件目录名</p><p>2)chmod o+w 文件目录名</p><p>3)chmod a-x 文件目录名</p><p>•案例演示</p><p>1)给abc文件的所有者读写执行的权限，给所在组读执行权限，给其它组读执行权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]# chmod u=rwx,g=x,o=rx abc</span><br><span class="line">[root@hapdoop1 ~]# ls -l</span><br><span class="line">总用量 136</span><br><span class="line">drwx--xr-x. 2 root root    4096 9月  16 02:34 abc</span><br></pre></td></tr></table></figure><p>2)给abc文件的所有用户添加读的权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]# chmod a+r abc</span><br></pre></td></tr></table></figure><p>10.10.3第二种方式：通过数字变更权限</p><p>规则：r=4 w=2 x=1 ,rwx=4+2+1=7</p><p>chmod u=rwx, g=rx, o=x文件目录名</p><p>相当于 chmod 751 文件目录名</p><p>•案例演示</p><p>要求：将/home/abc.txt文件的权限修改成rwxr-xr-x,使用给数字的方式实现：rwx=4+2+1=7</p><p>r-x=4+1=5</p><p>r-x=4+1=5</p><p>指令：chmod755/home/abc.txt</p><h2 id="10-11修改文件所有者-chown"><a href="#10-11修改文件所有者-chown" class="headerlink" title="10.11修改文件所有者-chown"></a>10.11修改文件所有者-chown</h2><p>(chmod - <strong>change</strong> file <strong>mode</strong> bits)</p><p>10.11.1基本介绍</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown newowner file 改变文件的所有者</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown  [-R]  newowner:newgroupfile  改变用户的所有者和所有组 [-R] 如果是目录则使其下所有子文件或目录递归生效</span><br></pre></td></tr></table></figure><p>10.11.2案例演示：</p><p>1)请将/home/abc.txt文件的所有者修改成tom</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]# chown fox abc.txt</span><br></pre></td></tr></table></figure><p>2)请将/home/kkk目录下所有的文件和目录的所有者都修改成tom</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]# chown -R tom kkk/</span><br></pre></td></tr></table></figure><h2 id="10-13最佳实践-警察和土匪游戏"><a href="#10-13最佳实践-警察和土匪游戏" class="headerlink" title="10.13最佳实践-警察和土匪游戏"></a>10.13最佳实践-警察和土匪游戏</h2><p>police，bandit</p><p>jack,jerry:警察</p><p>xh,xq:土匪</p><p>(1)创建组</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]# groupadd police</span><br><span class="line">[root@hapdoop1 ~]# groupadd bandit</span><br></pre></td></tr></table></figure><p>(2)创建用户</p><h1 id="11-crond任务调度"><a href="#11-crond任务调度" class="headerlink" title="11.crond任务调度"></a>11.crond任务调度</h1><p>11.1原理示意图</p><p><img src="/2019/10/linux/linux/1566443136248.png" alt="1566443136248"></p><p><img src="/2019/10/linux/linux/1566443160749.png" alt="1566443160749"></p><p>crontab进行定时任务的设置。</p><p>1.2概述</p><p>任务调度：是指系统在某个时间执行的特定的命令或程序。</p><p>任务调度分类：</p><p>1.系统工作：有些重要的工作必须周而复始地执行。如病毒扫描等</p><p>2.个别用户工作：个别用户可能希望执行某些程序，比如对mysql数据库的备份。</p><p>11.3基本语法</p><p>crontab [选项]</p><p>11.3.1常用选项</p><p><img src="/2019/10/linux/linux/1566443233289.png" alt="1566443233289"></p><p>11.4快速入门</p><p>11.4.1任务的要求</p><p>设置任务调度文件：/etc/crontab</p><p>设置个人任务调度。执行crontab–e命令。</p><p>接着输入任务到调度文件如：<em>/1ls–l/etc/&gt;/tmp/to.txt意思说每小时的每分钟执行ls–l/etc/&gt;/tmp/to.txt命令</em></p><p><em>11.4.2步骤如下</em></p><p>1)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]# crontab -e</span><br></pre></td></tr></table></figure><p>2) */1 * * * * ls -l /etc &gt;&gt; /tmp/to.txt</p><p>3)当保存退出后就程序。</p><p>4)在每一分钟都会自动的调用</p><p>ls -l /etc &gt;&gt; /tmp/to.txt</p><p>11.4.3参数细节说明</p><p><img src="/2019/10/linux/linux/1566443808504.png" alt="1566443808504"></p><p><img src="/2019/10/linux/linux/1566443825065.png" alt="1566443825065"></p><p><img src="/2019/10/linux/linux/1566443838977.png" alt="1566443838977"></p><p>11.5.1</p><p>案例1：每隔1分钟，就将当前的日期信息，追加到/tmp/mydate文件中</p><p>1)先编写一个文件/home/mytask1.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date &gt;&gt; /tmp/mydate</span><br></pre></td></tr></table></figure><p>2)给mytask1.sh一个可以执行权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 home]# chmod 774 mytask1.sh</span><br></pre></td></tr></table></figure><p>3)crontab-e</p><p>4)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*/1 * * * * /home/mytask1.sh</span><br></pre></td></tr></table></figure><p>11.5.2</p><p>案例2：每隔1分钟，将当前日期和日历都追加到/home/mycal文件中</p><p>1)先编写一个文件/home/mytask2.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">date &gt;&gt; /tmp/mycal</span><br><span class="line">cal &gt;&gt; /tmp/mycal</span><br></pre></td></tr></table></figure><p>2)给mytask2.sh一个可以执行权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 home]# chmod 774 mytask2.sh</span><br></pre></td></tr></table></figure><p>3)crontab -e</p><p>4)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*/1 * * * * /home/mytask2.sh</span><br></pre></td></tr></table></figure><p>11.5.3</p><p>案例3:每天凌晨2:00将mysql数据库testdb，备份到文件中mydb.bak。</p><p>1)先编写一个文件/home/mytask2.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/mysql/bin/mysqldump -u root-proot testdb&gt;/tmp/mydb.bak</span><br></pre></td></tr></table></figure><p>2)给mytask3.sh一个可以执行权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 home]# chmod 774 mytask2.sh</span><br></pre></td></tr></table></figure><p>3)crontab -e</p><p>4)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 2 * * */home/mytask3.sh</span><br></pre></td></tr></table></figure><p>11.6crond相关指令:</p><p>1)conrtab–r：终止任务调度。</p><p>2)crontab–l：列出当前有那些任务调度</p><p>3)service crond restart [重启任务调度]</p><h1 id="12-Linux磁盘分区、挂载"><a href="#12-Linux磁盘分区、挂载" class="headerlink" title="12.Linux磁盘分区、挂载"></a>12.Linux磁盘分区、挂载</h1><h2 id="12-1分区基础知识"><a href="#12-1分区基础知识" class="headerlink" title="12.1分区基础知识"></a>12.1分区基础知识</h2><p>12.1.1分区的方式：</p><p>1)mbr分区:</p><p>1.最多支持四个主分区</p><p>2.系统只能安装在主分区</p><p>3.扩展分区要占一个主分区4.MBR最大只支持2TB，但拥有最好的兼容性</p><p>2)gpt分区:</p><p>1.支持无限多个主分区（但操作系统可能限制，比如windows下最多128个分区）</p><p>2.最大支持18EB的大容量（1EB=1024PB，1PB=1024TB）3.windows764位以后支持gpt</p><p>12.1.2windows下的磁盘分区</p><p><img src="/2019/10/linux/linux/1566455383816.png" alt="1566455383816"></p><h2 id="12-2Linux分区"><a href="#12-2Linux分区" class="headerlink" title="12.2Linux分区"></a>12.2Linux分区</h2><p>12.2.1原理介绍</p><p>1)Linux来说无论有几个分区，分给哪一目录使用，它归根结底就只有一个根目录，一个独立且唯一的文件结构,Linux中每个分区都是用来组成整个文件系统的一部分。</p><p>2)Linux采用了一种叫“载入”的处理方法，它的整个文件系统中包含了一整套的文件和目录，且将一个分区和一个目录联系起来。这时要载入的一个分区将使它的存储空间在一个目录下获得。</p><p>3)示意图</p><p><img src="/2019/10/linux/linux/1566455612778.png" alt="1566455612778"></p><p>12.2.2硬盘说明</p><p>1)Linux硬盘分IDE硬盘和SCSI硬盘，目前基本上是SCSI硬盘</p><p>2)对于IDE硬盘，驱动器标识符为“hdx<del>”,其中“hd”表明分区所在设备的类型，这里是指IDE硬盘了。“x”为盘号（a为基本盘，b为基本从属盘，c为辅助主盘，d为辅助从属盘）,“</del>”代表分区，前四个分区用数字1到4表示，它们是主分区或扩展分区，从5开始就是逻辑分区。例，hda3表示为第一个IDE硬盘上的第三个主分区或扩展分区,hdb2表示为第二个IDE硬盘上的第二个主分区或扩展分区。</p><p>3)对于SCSI硬盘则标识为“sdx~”，SCSI硬盘是用“sd”来表示分区所在设备的类型的，其余则和IDE硬盘的表示方法一样</p><p>12.2.3使用lsblk指令查看当前系统的分区情况</p><p><img src="/2019/10/linux/linux/1566455656227.png" alt="1566455656227"></p><p><img src="/2019/10/linux/linux/1566455673574.png" alt="1566455673574"></p><h2 id="12-5磁盘情况查询"><a href="#12-5磁盘情况查询" class="headerlink" title="12.5磁盘情况查询"></a>12.5磁盘情况查询</h2><p>12.5.1查询系统整体磁盘使用情况</p><p>基本语法</p><p>df -h</p><p>应用实例</p><p>查询系统整体磁盘使用情况</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]# df -lh</span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/sda3        18G  4.2G   13G  26% /</span><br><span class="line">tmpfs          1003M   80K 1003M   1% /dev/shm</span><br><span class="line">/dev/sda1       190M   39M  142M  22% /boot</span><br><span class="line">/dev/sr0        3.7G  3.7G     0 100% /media/CentOS_6.8_Final</span><br></pre></td></tr></table></figure><p>12.5.2查询指定目录的磁盘占用情况</p><p>•基本语法</p><p>du -h/目录查询指定目录的磁盘占用情况，默认为当前目录</p><p>-s指定目录占用大小汇总</p><p>-h带计量单位</p><p>-a含文件</p><p>–max-depth=1子目录深度</p><p>-c列出明细的同时，增加汇总值</p><p>•应用实例查询/opt目录的磁盘占用情况，深度为1</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]# du -ach --max-depth=1 /opt</span><br><span class="line">4.0K/opt/Hello.java</span><br><span class="line">64K/opt/tmp</span><br><span class="line">147M/opt/jdk-7u79-linux-x64.gz</span><br><span class="line">35M/opt/mysql-5.6.14.tar.gz</span><br><span class="line">8.6M/opt/apache-tomcat-7.0.70.tar.gz</span><br><span class="line">298M/opt/jdk1.7.0_79</span><br><span class="line">4.0K/opt/rh</span><br><span class="line">4.0K/opt/Hello.class</span><br><span class="line">0/opt/ok2.txt</span><br><span class="line">28M/opt/金庸-射雕英雄传txt精校版.txt</span><br><span class="line">69M/opt/VMwareTools-10.0.5-3228253.tar.gz</span><br><span class="line">15M/opt/apache-tomcat-7.0.70</span><br><span class="line">214M/opt/vmware-tools-distrib</span><br><span class="line">0/opt/ok1.txt</span><br><span class="line">274M/opt/eclipse-jee-mars-2-linux-gtk-x86_64.tar.gz</span><br><span class="line">1.1G/opt</span><br><span class="line">1.1G总用量</span><br></pre></td></tr></table></figure><h2 id="12-6磁盘情况-工作实用指令"><a href="#12-6磁盘情况-工作实用指令" class="headerlink" title="12.6磁盘情况-工作实用指令"></a>12.6磁盘情况-工作实用指令</h2><p>1)统计/home文件夹下文件的个数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 home]# ll /home | grep "^-" | wc -l</span><br><span class="line">11</span><br></pre></td></tr></table></figure><p>2)统计/home文件夹下目录的个数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 home]# ll /home | grep "^d" | wc -l</span><br><span class="line">3</span><br></pre></td></tr></table></figure><p>3)统计/home文件夹下文件的个数，包括子文件夹里的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 home]# ls -lR /home | grep "^-" | wc -l</span><br><span class="line">11</span><br></pre></td></tr></table></figure><p>4)统计文件夹下目录的个数，包括子文件夹里的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 home]# ls -lR /home | grep "^d" | wc -l</span><br><span class="line">3</span><br></pre></td></tr></table></figure><p>5)以树状显示目录结构</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 home]# yum install tree</span><br><span class="line">[root@hapdoop1 home]# tree</span><br><span class="line">.</span><br><span class="line">├── a.tar.gz</span><br><span class="line">├── a.txt</span><br><span class="line">├── c.txt</span><br><span class="line">├── fox</span><br><span class="line">├── hello.txt</span><br><span class="line">├── mydate.txt</span><br><span class="line">├── mydate.txt~</span><br><span class="line">├── mypackge.zip</span><br><span class="line">├── mytask1.sh</span><br><span class="line">├── mytask2.sh</span><br><span class="line">├── ok1.txt</span><br><span class="line">├── ok2.txt</span><br><span class="line">├── tom</span><br><span class="line">└── xm</span><br></pre></td></tr></table></figure><h1 id="13、实操篇网络配置"><a href="#13、实操篇网络配置" class="headerlink" title="13、实操篇网络配置"></a>13、实操篇网络配置</h1><p>13.1Linux网络配置</p><p>原理图(含虚拟机)</p><p>目前我们的网络配置采用的是NAT。</p><p><img src="/2019/10/linux/linux/1566461905906.png" alt="1566461905906"></p><p>13.2查看网络IP和网关</p><p>13.2.1查看虚拟网络编辑器</p><p><img src="/2019/10/linux/linux/1566461935674.png" alt="1566461935674"></p><p>13.2.2修改ip地址(修改虚拟网络的ip)</p><p><img src="/2019/10/linux/linux/1566461976494.png" alt="1566461976494"></p><p>3.2.3查看网关</p><p><img src="/2019/10/linux/linux/1566462004597.png" alt="1566462004597"></p><p>13.2.4查看windows环境的中VMnet8网络配置(ipconfig指令)</p><p>1)使用ipconfig查看</p><p>2)界面查看</p><p><img src="/2019/10/linux/linux/1566462037006.png" alt="1566462037006"></p><p>13.3ping测试主机之间网络连通</p><p>13.3.1基本语法ping目的主机（功能描述：测试当前服务器是否可以连接目的主机）</p><p>13.3.2应用实例测试当前服务器是否可以连接百度</p><p>[root@hadoop100桌面]#ping<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 home]# vim /etc/sysconfig/network-scripts/ifcfg-eth0</span><br></pre></td></tr></table></figure><p>13.4linux网络环境配置</p><p>13.4.1第一种方法(自动获取)</p><p><img src="/2019/10/linux/linux/1566464269470.png" alt="1566464269470"></p><p>缺点:linux启动后会自动获取IP,缺点是每次自动获取的ip地址可能不一样。这个不适用于做服务器，因为我们的服务器的ip需要时固定的。</p><p><strong>13.4.2第二种方法(指定固定的ip)</strong></p><p>说明直接修改配置文件来指定IP,并可以连接到外网(程序员推荐)，编辑vi/etc/sysconfig/network-scripts/ifcfg-eth0</p><p>要求：将ip地址配置的静态的，ip地址为192.168.184.130</p><p><img src="/2019/10/linux/linux/1566464329056.png" alt="1566464329056"></p><p>修改后，一定要重启服务</p><p>1)service network restart</p><p>2)reboot重启系统 不推荐</p><p><img src="/2019/10/linux/linux/1566464369323.png" alt="1566464369323"></p><h1 id="14、实操篇进程管理"><a href="#14、实操篇进程管理" class="headerlink" title="14、实操篇进程管理"></a>14、实操篇进程管理</h1><h2 id="14-1进程的基本介绍"><a href="#14-1进程的基本介绍" class="headerlink" title="14.1进程的基本介绍"></a>14.1进程的基本介绍</h2><p>1)在LINUX中，每个执行的程序（代码）都称为一个进程。每一个进程都分配一个ID号。</p><p>2)每一个进程，都会对应一个父进程，而这个父进程可以复制多个子进程。例如www服务器。</p><p>3)每个进程都可能以两种方式存在的。前台与后台，所谓前台进程就是用户目前的屏幕上可以进行操作的。后台进程则是实际在操作，但由于屏幕上无法看到的进程，通常使用后台方式执行。</p><p>4)一般系统的服务都是以后台进程的方式存在，而且都会常驻在系统中。直到关机才才结束。</p><h2 id="14-2显示系统执行的进程ps"><a href="#14-2显示系统执行的进程ps" class="headerlink" title="14.2显示系统执行的进程ps"></a>14.2显示系统执行的进程ps</h2><p>14.2.1说明：</p><p>查看进行使用的指令是ps,一般来说使用的参数是ps-aux</p><p><img src="/2019/10/linux/linux/1566464950771.png" alt="1566464950771"></p><p><img src="/2019/10/linux/linux/1566464975777.png" alt="1566464975777"></p><p>14.2.2ps指令详解</p><p>1)指令：ps –aux| grep xxx，比如我看看有没有sshd服务</p><p>2)指令说明</p><p>•SystemV展示风格•USER：用户名称</p><p>•PID：进程号•%CPU：进程占用CPU的百分比</p><p>•%MEM：进程占用物理内存的百分比</p><p>•VSZ：进程占用的虚拟内存大小（单位：KB）</p><p>•RSS：进程占用的物理内存大小（单位：KB）</p><p>•TT：终端名称,缩写</p><p>.•STAT：进程状态，其中S-睡眠，s-表示该进程是会话的先导进程，N-表示进程拥有比普通优先级更低的优先级，R-正在运行，D-短期等待，Z-僵死进程，T-被跟踪或者被停止等等</p><p>•STARTED：进程的启动时间</p><p>•TIME：CPU时间，即进程使用CPU的总时间•COMMAND：启动进程所用的命令和参数，如果过长会被截断显示</p><p>14.2.3应用实例</p><p>要求：以全格式显示当前所有的进程，查看进程的父进程。</p><p><img src="/2019/10/linux/linux/1566465056050.png" alt="1566465056050"></p><p>•ps -ef是以全格式显示当前所有的进程</p><p> -e显示所有进程(every)。</p><p> -f全格式(Do <strong>full-format</strong> listing)。</p><p>•ps -ef|grep xxx</p><p>•是BSD风格</p><p>•UID：用户ID</p><p>•PID：进程ID</p><p>•PPID：父进程ID</p><p>•C：CPU用于计算执行优先级的因子。数值越大，表明进程是CPU密集型运算，执行优先级会降低；数值越小，表明进程是I/O密集型运算，执行优先级会提高•STIME：进程启动的时间</p><p>•TTY：完整的终端名称</p><p>•TIME：CPU时间</p><p>•CMD：启动进程所用的命令和参数</p><p>思考题，如果我们希望查看sshd进程的父进程号是多少，应该怎样查询？</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]# ps -ef | grep sshd</span><br><span class="line">root      14263      1  0 (ppid) 05:34 ?        00:00:00 /usr/sbin/sshd</span><br><span class="line">root      16269  14263  0 06:07 ?        00:00:00 sshd: root@pts/1 </span><br><span class="line">root      16321  16273  0 06:19 pts/1    00:00:00 grep sshd</span><br></pre></td></tr></table></figure><h2 id="14-3终止进程kill和killall"><a href="#14-3终止进程kill和killall" class="headerlink" title="14.3终止进程kill和killall"></a>14.3终止进程kill和killall</h2><p>14.3.1介绍:</p><p>若是某个进程执行一半需要停止时，或是已消了很大的系统资源时，此时可以考虑停止该进程。使用kill命令来完成此项任务。</p><p>14.3.2基本语法：</p><p>kill [选项] 进程号（功能描述：通过进程号杀死进程）</p><p>killall进程名称（功能描述：通过进程名称杀死进程，也支持通配符，这在系统因负载过大而变得很慢时很有用）</p><p>14.3.3常用选项：</p><p>-9:表示强迫进程立即停止</p><p>14.3.4最佳实践：</p><p>案例1：踢掉某个非法登录用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]# ps -aux | grep sshd</span><br><span class="line">Warning: bad syntax, perhaps a bogus '-'? See /usr/share/doc/procps-3.2.8/FAQ</span><br><span class="line">root      14263  0.0  0.0  66236  1200 ?        Ss   05:34   0:00 /usr/sbin/sshd</span><br><span class="line">root      16269  0.0  0.2 102084  4156 ?        Ss   06:07   0:00 sshd: root@pts/1 </span><br><span class="line">root      16357  0.4  0.1 102084  4040 ?        Ss   06:28   0:00 sshd: fox [priv] </span><br><span class="line">fox       16361  0.1  0.0 102084  1904 ?        S    06:28   0:00 sshd: fox@pts/2  </span><br><span class="line">root      16387  0.0  0.0 103332   860 pts/1    S+   06:29   0:00 grep sshd</span><br><span class="line">[root@hapdoop1 ~]# kill 16361</span><br></pre></td></tr></table></figure><p>案例2:终止远程登录服务sshd,在适当时候再次重启sshd服</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]# ps -aux | grep sshd</span><br><span class="line">Warning: bad syntax, perhaps a bogus '-'? See /usr/share/doc/procps-3.2.8/FAQ</span><br><span class="line">root      14263  0.0  0.0  66236  1200 ?        Ss   05:34   0:00 /usr/sbin/sshd</span><br><span class="line">root      16269  0.0  0.2 102084  4156 ?        Ss   06:07   0:00 sshd: root@pts/1 </span><br><span class="line">root      16357  0.4  0.1 102084  4040 ?        Ss   06:28   0:00 sshd: fox [priv] </span><br><span class="line">fox       16361  0.1  0.0 102084  1904 ?        S    06:28   0:00 sshd: fox@pts/2  </span><br><span class="line">root      16387  0.0  0.0 103332   860 pts/1    S+   06:29   0:00 grep sshd</span><br><span class="line">[root@hapdoop1 ~]# kill 14263</span><br></pre></td></tr></table></figure><p>案例3:终止多个gedit编辑器【killall,通过进程名称来终止进程】</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 桌面]# killall gedit</span><br></pre></td></tr></table></figure><p>案例4：强制杀掉一个终端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 桌面]# ps -aux |grep bash</span><br><span class="line">Warning: bad syntax, perhaps a bogus '-'? See /usr/share/doc/procps-3.2.8/FAQ</span><br><span class="line">root      15158  0.0  0.0 108348  1840 pts/0    Ss   05:37   0:00 /bin/bash</span><br><span class="line">root      16273  0.0  0.0 108348  1820 pts/1    Ss+  06:07   0:00 -bash</span><br><span class="line">root      16398  0.0  0.0 108428  1828 pts/2    Ss+  06:33   0:00 /bin/bash</span><br><span class="line">root      16411  0.0  0.0 108348  1788 pts/3    Ss   06:33   0:00 /bin/bash</span><br><span class="line">root      16438  0.0  0.0 103328   856 pts/3    S+   06:37   0:00 grep bash</span><br><span class="line">[root@hapdoop1 桌面]# kill -9 16398</span><br></pre></td></tr></table></figure><h2 id="14-4查看进程树pstree"><a href="#14-4查看进程树pstree" class="headerlink" title="14.4查看进程树pstree"></a>14.4查看进程树pstree</h2><p>14.4.1基本语法：</p><p>pstree [选项] ,可以更加直观的来看进程信息</p><p>14.4.2常用选项：</p><p>-p:显示进程的PID</p><p>-u:显示进程的所属用户</p><p>14.4.3应用实例：</p><p>案例1：请你树状的形式显示进程的pid</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]# pstree -p</span><br><span class="line">init(1)─┬─ManagementAgent(13688)─┬─&#123;ManagementAgen&#125;(13706)</span><br><span class="line">        │                        └─&#123;ManagementAgen&#125;(13707)</span><br><span class="line">        ├─NetworkManager(14070)─┬─dhclient(16203)</span><br><span class="line">        │                       └─&#123;NetworkManager&#125;(14099)</span><br><span class="line">        ├─VGAuthService(13576)</span><br><span class="line">        ├─abrtd(14468)</span><br><span class="line">        ├─acpid(14133)</span><br><span class="line">        ├─atd(14495)</span><br></pre></td></tr></table></figure><h2 id="14-5服务-Service-管理"><a href="#14-5服务-Service-管理" class="headerlink" title="14.5服务(Service)管理"></a>14.5服务(Service)管理</h2><p>4.5.1介绍:</p><p>服务(service)本质就是进程，但是是运行在后台的，通常都会监听某个端口，等待其它程序的请求，比如(mysql,sshd防火墙等)，因此我们又称为守护进程，是Linux中非常重要的知识点。</p><p>【原理图】</p><p><img src="/2019/10/linux/linux/1566482705612.png" alt="1566482705612"></p><p>14.5.2service管理指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service 服务名 [start|stop|restart|reload|status]</span><br></pre></td></tr></table></figure><p>在CentOS7.0后不再使用service,而是systemctl</p><p>14.5.3使用案例：</p><p>1)查看当前防火墙的状况，关闭防火墙和重启防火墙。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]# service iptables status</span><br><span class="line">表格：filter</span><br><span class="line">Chain INPUT (policy ACCEPT)</span><br><span class="line">num  target     prot opt source               destination         </span><br><span class="line">1    ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0           state RELATED,ESTABLISHED </span><br><span class="line">2    ACCEPT     icmp --  0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">3    ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">4    ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0           state NEW tcp dpt:22 </span><br><span class="line">5    ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0           state NEW tcp dpt:8080 </span><br><span class="line">6    REJECT     all  --  0.0.0.0/0            0.0.0.0/0           reject-with icmp-host-prohibited </span><br><span class="line"></span><br><span class="line">Chain FORWARD (policy ACCEPT)</span><br><span class="line">num  target     prot opt source               destination         </span><br><span class="line">1    REJECT     all  --  0.0.0.0/0            0.0.0.0/0           reject-with icmp-host-prohibited </span><br><span class="line"></span><br><span class="line">Chain OUTPUT (policy ACCEPT)</span><br><span class="line">num  target     prot opt source               destination</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]# service iptables stop</span><br><span class="line">iptables：将链设置为政策 ACCEPT：filter                    [确定]</span><br><span class="line">iptables：清除防火墙规则：                                 [确定]</span><br><span class="line">iptables：正在卸载模块：                                   [确定]</span><br><span class="line">[root@hapdoop1 ~]# service iptables status</span><br><span class="line">iptables：未运行防火墙。</span><br><span class="line">[root@hapdoop1 ~]# service iptables start</span><br><span class="line">iptables：应用防火墙规则：                                 [确定]</span><br><span class="line">[root@hapdoop1 ~]# service iptables status</span><br><span class="line">表格：filter</span><br><span class="line">Chain INPUT (policy ACCEPT)</span><br></pre></td></tr></table></figure><p>14.5.4细节讨论：</p><p>1)关闭或者启用防火墙后，立即生效。[telnet测试某个端口即可]windows</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">Users</span>\11623&gt;<span class="title">Telnet</span> 192.168.163.129 22</span></span><br></pre></td></tr></table></figure><p>2)这种方式只是临时生效，当重启系统后，还是回归以前对服务的设置。如果希望设置某个服务自启动或关闭永久生效，要使用chkconfig指令，马上讲</p><p>14.5.5查看服务名:</p><p>方式1：使用setup-&gt;系统服务就可以看到。</p><p><img src="/2019/10/linux/linux/1566483352808.png" alt="1566483352808"></p><p>方式2:/etc/init.d/服务名称</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@hapdoop1 ~]#  ll /etc/init.d/</span><br><span class="line">总用量 376</span><br><span class="line">-rwxr-xr-x. 1 root root  1288 5月  12 2016 abrt-ccpp</span><br><span class="line">-rwxr-xr-x. 1 root root  1628 5月  12 2016 abrtd</span><br><span class="line">-rwxr-xr-x. 1 root root  1642 5月  12 2016 abrt-oops</span><br><span class="line">-rwxr-xr-x. 1 root root  1818 2月  17 2016 acpid</span><br></pre></td></tr></table></figure><p>14.5.6服务的运行级别(runlevel):</p><p>查看或者修改默认级别：vi/etc/inittab</p><p>Linux系统有7种运行级别(runlevel)：常用的是级别3和5</p><p>•运行级别0：系统停机状态，系统默认运行级别不能设为0，否则不能正常启动</p><p>•运行级别1：单用户工作状态，root权限，用于系统维护，禁止远程登陆</p><p>•运行级别2：多用户状态(没有NFS)，不支持网络</p><p>•运行级别3：完全的多用户状态(有NFS)，登陆后进入控制台命令行模式</p><p>•运行级别4：系统未使用，保留</p><p>•运行级别5：X11控制台，登陆后进入图形GUI模式</p><p>•运行级别6：系统正常关闭并重启，默认运行级别不能设为6，否则不能正常启动</p><p>14.5.7开机的流程说明</p><p><img src="/2019/10/linux/linux/1566484075622.png" alt="1566484075622"></p><p>14.5.8chkconfig指令</p><p>介绍</p><p>通过chkconfig命令可以给每个服务的各个运行级别设置自启动/关闭</p><p>基本语法</p><p>1)查看服务chkconfig –list| grep xxx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]# chkconfig --list </span><br><span class="line">NetworkManager 0:关闭1:关闭2:启用3:启用4:启用5:启用6:关闭</span><br><span class="line">abrt-ccpp      0:关闭1:关闭2:关闭3:启用4:关闭5:启用6:关闭</span><br><span class="line">abrtd          0:关闭1:关闭2:关闭3:启用4:关闭5:启用6:关闭</span><br><span class="line">....</span><br><span class="line">[root@hapdoop1 ~]# chkconfig --list | grep ssh</span><br><span class="line">sshd           0:关闭1:关闭2:启用3:启用4:启用5:启用6:关闭</span><br></pre></td></tr></table></figure><p>2)chkconfig 服务名 –list</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]# chkconfig iptables --list</span><br><span class="line">iptables       0:关闭1:关闭2:启用3:启用4:启用5:启用6:关闭</span><br></pre></td></tr></table></figure><p>3)chkconfig –level 5 服务名 on/off</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]# chkconfig --list | grep ssh</span><br><span class="line">sshd           0:关闭1:关闭2:启用3:启用4:启用5:启用6:关闭</span><br><span class="line">[root@hapdoop1 ~]# chkconfig --level 5 sshd off</span><br><span class="line">[root@hapdoop1 ~]# chkconfig sshd --list</span><br><span class="line">sshd           0:关闭1:关闭2:启用3:启用4:启用5:关闭6:关闭</span><br></pre></td></tr></table></figure><p>14.5.9应用实例：</p><p>1)案例1：请显示当前系统所有服务的各个运行级别的运行状态bash&gt;chkconfig–list</p><p>2)案例2：请查看sshd服务的运行状态bash&gt;servicesshdstatus</p><p>3)案例3：将sshd服务在运行级别5下设置为不自动启动，看看有什么效果？bash&gt;chkconfig–level5sshdoff</p><p>4)案例4：当运行级别为5时，关闭防火墙。bash&gt;chkconfig–level5iptablesoff</p><p>5)案例5：在所有运行级别下，关闭防火墙bash&gt;chkconfigiptablesoff</p><p>6)案例6：在所有运行级别下，开启防火墙bash&gt;chkconfigiptableson</p><p>14.5.10•使用细节</p><p>1)chkconfig重新设置服务后自启动或关闭，需要重启机器reboot才能生效.</p><h2 id="14-6动态监控进程"><a href="#14-6动态监控进程" class="headerlink" title="14.6动态监控进程"></a>14.6动态监控进程</h2><p>14.6.1介绍：</p><p>top与ps命令很相似。它们都用来显示正在执行的进程。Top与ps最大的不同之处，在于top在执行一段时间可以更新正在运行的的进程。</p><p>14.6.2基本语法：</p><p>top [选项]</p><p>14.6.3 选项说明：</p><p><img src="/2019/10/linux/linux/1566485165661.png" alt="1566485165661"></p><p>14.6.4应用实例：</p><p>案例1.监视特定用户top：输入此命令，按回车键，查看执行的进程。</p><p>u：然后输入“u”回车，再输入用户名，即可</p><p><img src="/2019/10/linux/linux/1566485234799.png" alt="1566485234799"></p><p>案例2：终止指定的进程。</p><p>top：输入此命令，按回车键，查看执行的进程。</p><p>k：然后输入“k”回车，再输入要结束的进程ID号</p><p><img src="/2019/10/linux/linux/1566485265213.png" alt="1566485265213"></p><p>案例3:指定系统状态更新的时间(每隔10秒自动更新，默认是3秒)：</p><p>bash&gt;top -d 10</p><p>14.6.5查看系统网络情况netstat(重要)</p><p>•基本语法</p><p>netstat[选项]</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -anp</span><br></pre></td></tr></table></figure><p>•选项说明</p><p>-an按一定顺序排列输出</p><p>-p显示哪个进程在调用</p><p>•应用案例</p><p>查看系统所有的网络服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]# netstat -anp | more</span><br><span class="line">Active Internet connections (servers and established)</span><br><span class="line">Proto Recv-Q Send-Q Local Address               Foreign Address             State       PID/Program na</span><br><span class="line">me   </span><br><span class="line">tcp        0      0 0.0.0.0:22                  0.0.0.0:*                   LISTEN      14263/sshd</span><br></pre></td></tr></table></figure><p>请查看服务名为sshd的服务的信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]# netstat  -anp |grep sshd </span><br><span class="line">tcp        0      0 0.0.0.0:22                  0.0.0.0:*                   LISTEN      14263/sshd          </span><br><span class="line">tcp        0      0 127.0.0.1:6010              0.0.0.0:*                   LISTEN      16552/sshd          </span><br><span class="line">tcp        0      0 192.168.163.129:22          192.168.163.1:61806         ESTABLISHED 16552/sshd          </span><br><span class="line">tcp        0      0 :::22                       :::*                        LISTEN      14263/sshd          </span><br><span class="line">tcp        0      0 ::1:6010                    :::*                        LISTEN      16552/sshd          </span><br><span class="line">unix  2      [ ]         DGRAM                    48552  16552/sshd</span><br></pre></td></tr></table></figure><h1 id="16-JavaEE篇搭建"><a href="#16-JavaEE篇搭建" class="headerlink" title="16.JavaEE篇搭建"></a>16.JavaEE篇搭建</h1><p>JavaEE环境</p><p>16.1概述16.1.1示意图：</p><p><img src="/2019/10/linux/linux/1565878374722.png" alt="1565878374722"></p><h2 id="16-2安装JDK"><a href="#16-2安装JDK" class="headerlink" title="16.2安装JDK"></a>16.2安装JDK</h2><p>16.2.1看老师演示，一会整理笔记：</p><p>16.2.2安装步骤</p><p>0)先将软件通过xftp5上传到/opt下</p><p>1)解压缩到/opt</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nicolas@ubuntu:~$ sudo tar -zxvf jdk-8u221-linux-x64.tar.gz -C /opt/jvm</span><br></pre></td></tr></table></figure><p>2)配置环境变量的配置文件vim/etc/profile</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">unset i</span><br><span class="line">unset -f pathmunge</span><br><span class="line"></span><br><span class="line">JAVA_HOME=/opt/jdk1.7.0_79</span><br><span class="line">PATH=/opt/jdk1.7.0_79/bin:$PATH</span><br><span class="line">export JAVA_HOME PATH</span><br></pre></td></tr></table></figure><p>3)需要注销用户，环境变量才能生效。如果是在3运行级别，logout如果是在5运行级别，</p><p>4)在任何目录下就可以使用java和javac</p><p>16.2.3测试是否安装成功</p><p>编写一个简单的Hello.java输出”hello,world!”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"hello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 opt]# vim Hello.java</span><br><span class="line">[root@hapdoop1 opt]# javac Hello.java </span><br><span class="line">[root@hapdoop1 opt]# java Hello</span><br><span class="line">hello</span><br></pre></td></tr></table></figure><h2 id="16-3安装tomcat"><a href="#16-3安装tomcat" class="headerlink" title="16.3安装tomcat"></a>16.3安装tomcat</h2><p>16.3.1步骤:</p><p>1)解压缩到/opt</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 bin]# tar -zxvf apache-tomcat-7.0.70.tar.gz</span><br></pre></td></tr></table></figure><p>2)启动tomcat./startup.sh</p><p>先进入到tomcat的bin目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 bin]# cd apache-tomcat-7.0.70/bin/</span><br><span class="line">[root@hapdoop1 bin]# ./startup.sh</span><br></pre></td></tr></table></figure><p>使用Linux本地的浏览是可以访问到tomcat</p><p>3)开放端口8080,这样外网才能访问到tomcat</p><p>vim /etc/sysconfig/iptables</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPT</span><br><span class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 8080 -j ACCEPT</span><br></pre></td></tr></table></figure><p>重启防火墙</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 bin]# service iptables restart</span><br><span class="line">iptables：将链设置为政策 ACCEPT：filter                    [确定]</span><br><span class="line">iptables：清除防火墙规则：                                 [确定]</span><br><span class="line">iptables：正在卸载模块：                                   [确定]</span><br><span class="line">iptables：应用防火墙规则：                                 [确定]</span><br><span class="line">[root@hapdoop1 bin]# service iptables status</span><br><span class="line">表格：filter</span><br><span class="line">Chain INPUT (policy ACCEPT)</span><br><span class="line">num  target     prot opt source               destination         </span><br><span class="line">1    ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0           state RELATED,ESTABLISHED </span><br><span class="line">2    ACCEPT     icmp --  0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">3    ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">4    ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0           state NEW tcp dpt:22 </span><br><span class="line">5    ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0           state NEW tcp dpt:8080 </span><br><span class="line">6    REJECT     all  --  0.0.0.0/0            0.0.0.0/0           reject-with icmp-host-prohibited </span><br><span class="line"></span><br><span class="line">Chain FORWARD (policy ACCEPT)</span><br><span class="line">num  target     prot opt source               destination         </span><br><span class="line">1    REJECT     all  --  0.0.0.0/0            0.0.0.0/0           reject-with icmp-host-prohibited </span><br><span class="line"></span><br><span class="line">Chain OUTPUT (policy ACCEPT)</span><br><span class="line">num  target     prot opt source               destination</span><br></pre></td></tr></table></figure><h2 id="16-4Eclipse的安装"><a href="#16-4Eclipse的安装" class="headerlink" title="16.4Eclipse的安装"></a>16.4Eclipse的安装</h2><p>16.4.1步骤:</p><p>1)解压缩到/opt</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nicolas@ubuntu:~$ sudo tar -zxvf eclipse-java-2019-06-R-linux-gtk-x86_64.tar.gz -C /opt</span><br></pre></td></tr></table></figure><p>2)启动eclipse，配置jre和server</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nicolas@ubuntu:/opt/sts-4.3.2.RELEASE$ sudo mkdir /opt/sts-4.3.2.RELEASE/jre</span><br><span class="line">nicolas@ubuntu:/opt/sts-4.3.2.RELEASE$ sudo ln -s /opt/jvm/jdk1.8.0_221/bin/ /opt/sts-4.3.2.RELEASE/jre/</span><br></pre></td></tr></table></figure><p>启动方法1:创建一个快捷方式</p><p>启动方式2:进入到eclipse解压后的文件夹，然后执行./eclipse即可</p><p>3)编写jsp页面,并测试成功!</p><h1 id="18-Python篇开发平台Ubuntu"><a href="#18-Python篇开发平台Ubuntu" class="headerlink" title="18. Python篇开发平台Ubuntu"></a>18. Python篇开发平台Ubuntu</h1><h2 id="18-1Ubuntu的介绍Ubuntu"><a href="#18-1Ubuntu的介绍Ubuntu" class="headerlink" title="18.1Ubuntu的介绍Ubuntu"></a>18.1Ubuntu的介绍Ubuntu</h2><p>（友帮拓、优般图、乌班图）是一个以桌面应用为主的开源GNU/Linux操作系统，Ubuntu是基于GNU/Linux，支持x86、amd64（即x64）和ppc架构，由全球化的专业开发团队（CanonicalLtd）打造的。</p><p>专业的Python开发者一般会选择Ubuntu这款Linux系统作为生产平台.</p><p>温馨提示：Ubuntu和Centos都是基于GNU/Linux内核的，因此基本使用和Centos是几乎一样的，它们的各种指令可以通用，同学们在学习和使用Ubuntu的过程中，会发现各种操作指令在前面学习CentOS都使用过。只是界面和预安装的软件有所差别。</p><p>Ubuntu下载地址：<a href="http://cn.ubuntu.com/download/" target="_blank" rel="noopener">http://cn.ubuntu.com/download/</a></p><p><strong>ubuntu的root密码：abc123</strong></p><h2 id="18-2Ubuntu的安装"><a href="#18-2Ubuntu的安装" class="headerlink" title="18.2Ubuntu的安装"></a>18.2Ubuntu的安装</h2><p>18.2.1安装的步骤</p><p>18.2.2设置Ubuntu支持中文</p><p>默认安装的ubuntu中只有英文语言，因此是不能显示汉字的。要正确显示汉字，需要安装中文语言包。安装中文支持步骤</p><p>1.单击左侧图标栏打开SystemSettings（系统设置）菜单，点击打开LanguageSupport（语言支持）选项卡。</p><p>2.<strong>点击Install/RemoveLanguages</strong>，在弹出的选项卡中下拉找到<strong>Chinese(Simplified)</strong>，即中文简体，在后面的选项框中打勾。然后点击ApplyChanges提交，系统会自动联网下载中文语言包。（保证ubuntu是联网的）。</p><p>3.这时“汉语（中国）”在最后一位因为当前第一位是”English”，所以默认显示都是英文。我们如果希望默认显示用中文，则应该将“汉语（中国）”设置为第一位。设置方法是拖动，鼠标单击“汉语（中国）”，当底色变化（表示选中了）后，按住鼠标左键不松手，<strong>向上拖动放置到第一位。</strong></p><p>4.设置后不会即刻生效，需要下一次登录时才会生效。</p><p><strong>==如果中文包下载时间过长，可以给ubuntu换源（阿里源）；==</strong></p><h2 id="18-3Ubuntu的roo用户"><a href="#18-3Ubuntu的roo用户" class="headerlink" title="18.3Ubuntu的roo用户"></a>18.3Ubuntu的roo用户</h2><p>18.3.1介绍</p><p>安装ubuntu成功后，<strong>都是普通用户权限</strong>，并没有最高root权限，如果需要使用root权限的时候，通常都会在命令前面加上sudo。</p><p>有的时候感觉很麻烦。我们一般使用su命令来直接切换到root用户的，但是如果没有给root设置初始密码，就会抛出su:Authentication failure这样的问题。所以，我们只要给root用户设置一个初始密码就好了。</p><p>18.3.2 给root用户设置密码并使用</p><p>1)输入sudo passwd命令，输入一般用户密码并设定root用户密码。</p><p>2)设定root密码成功后，输入su命令，并输入刚才设定的root密码，就可以切换成root了。提示符$代表一般用户，提示符#代表root用户。3)输入exit命令，退出root并返回一般用户4)以后就可以使用root用户了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">nicolas@ubuntu:~$ sudo passwd</span><br><span class="line">[sudo] nicolas 的密码： </span><br><span class="line">对不起，请重试。</span><br><span class="line">[sudo] nicolas 的密码： </span><br><span class="line">对不起，请重试。</span><br><span class="line">[sudo] nicolas 的密码： </span><br><span class="line">输入新的 UNIX 密码： </span><br><span class="line">重新输入新的 UNIX 密码： </span><br><span class="line">passwd：已成功更新密码</span><br></pre></td></tr></table></figure><p>18.4Ubuntu下开发Python</p><p>18.4.1说明安装好Ubuntu后，默认就已经安装好Python的开发环境[Python2.7和Python3.5]</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">nicolas@ubuntu:~$ python</span><br><span class="line">Python 2.7.12 (default, Nov 19 2016, 06:48:10) </span><br><span class="line">[GCC 5.4.0 20160609] on linux2</span><br><span class="line">Type "help", "copyright", "credits" or "license" for more information.</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; </span></span><br><span class="line">nicolas@ubuntu:~$ python3</span><br><span class="line">Python 3.5.2 (default, Nov 17 2016, 17:05:23) </span><br><span class="line">[GCC 5.4.0 20160609] on linux</span><br><span class="line">Type "help", "copyright", "credits" or "license" for more information.</span><br></pre></td></tr></table></figure><p>18.4.2在Ubuntu下开发一个Python程序</p><p>1)vim hello.py[编写hello.py]</p><p>提示：如果Ubuntu没有vim我们可以根据提示信息安装一个vim</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install vim</span><br></pre></td></tr></table></figure><h1 id="19-Python篇apt软件管理和远程登录"><a href="#19-Python篇apt软件管理和远程登录" class="headerlink" title="19.Python篇apt软件管理和远程登录"></a>19.Python篇apt软件管理和远程登录</h1><h2 id="19-1apt介绍"><a href="#19-1apt介绍" class="headerlink" title="19.1apt介绍"></a>19.1apt介绍</h2><p>apt是Advanced Packaging Tool的简称，是一款安装包管理工具。在Ubuntu下，我们可以使用apt命令可用于软件包的安装、删除、清理等，类似于Windows中的软件管理工具。</p><p>unbuntu软件管理的原理示意图：</p><p><img src="/2019/10/linux/linux/imgs%5C1566129158215.png" alt="1566129158215"></p><p>19.2Ubuntu软件操作的相关命令</p><p>sudo apt-get update更新源</p><p>sudo apt-get install package安装包</p><p>sudo apt-get remove package删除包</p><p>sudo apt-cache search  package搜索软件包</p><p>sudo apt-cache show package 获取包的相关信息，如说明、大小、版本等sudo apt-get install package–reinstall重新安装包</p><p>sudoapt-get-finstall修复安装</p><p>sudoapt-getremovepackage–purge删除包，包括配置文件等</p><p>sudoapt-getbuild-deppackage安装相关的编译环境</p><p>sudoapt-getupgrade更新已安装的包</p><p>sudoapt-getdist-upgrade升级系统</p><p>sudoapt-cachedependspackage了解使用该包依赖那些包</p><p>sudoapt-cacherdependspackage查看该包被哪些包依赖</p><p>sudoapt-getsourcepackage下载该包的源代码</p><h2 id="19-3更新Ubuntu软件下载地址"><a href="#19-3更新Ubuntu软件下载地址" class="headerlink" title="19.3更新Ubuntu软件下载地址"></a>19.3更新Ubuntu软件下载地址</h2><p>19.3.1原理示意图</p><p><img src="/2019/10/linux/linux/1566129449920.png" alt="1566129449920"></p><p>19.3.2寻找国内镜像源</p><p><a href="https://mirrors.tuna.tsinghua.edu.cn/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/</a></p><p>所谓的镜像源：可以理解为提供下载软件的地方，比如Android手机上可以下载软件的安卓市场；iOS手机上可以下载软件的AppStore</p><p>19.3.3 备份Ubuntu默认的源地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">nicolas@ubuntu:/etc/apt$ sudo cp /etc/apt/sources.list /etc/apt/sources.list.backup #拷贝</span><br><span class="line">root@ubuntu:/etc/apt# echo '' &gt; sources.list #清空</span><br><span class="line">root@ubuntu:/etc/apt# vim sources.list #拷贝清华镜像</span><br><span class="line">root@ubuntu:/etc/apt# exit</span><br><span class="line">exit</span><br><span class="line">nicolas@ubuntu:~$ sudo apt-get update #更新ubuntu软件列表</span><br></pre></td></tr></table></figure><h2 id="19-5使用ssh远程登录Ubuntu"><a href="#19-5使用ssh远程登录Ubuntu" class="headerlink" title="19.5使用ssh远程登录Ubuntu"></a>19.5使用ssh远程登录Ubuntu</h2><p>19.5.1ssh介绍</p><p>SSH为SecureShell的缩写，由IETF的网络工作小组（NetworkWorkingGroup）所制定；SSH为建立在应用层和传输层基础上的安全协议。</p><p>SSH是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议。常用于远程登录，以及用户之间进行资料拷贝。几乎所有UNIX平台—包括HP-UX、Linux、AIX、Solaris、DigitalUNIX、Irix，以及其他平台，都可运行SSH。</p><p>使用SSH服务，需要安装相应的服务器和客户端。客户端和服务器的关系：如果，A机器想被B机器远程控制，那么，A机器需要安装SSH服务器，B机器需要安装SSH客户端。和CentOS不一样，Ubuntu默认没有安装SSHD服务，因此，我们不能进行远程登录。</p><h2 id="19-6使用ssh远程登录Ubuntu"><a href="#19-6使用ssh远程登录Ubuntu" class="headerlink" title="19.6使用ssh远程登录Ubuntu"></a>19.6使用ssh远程登录Ubuntu</h2><p>19.6.1安装SSH和启用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nicolas@ubuntu:~$ sudo apt-get install openssh-server</span><br></pre></td></tr></table></figure><p>执行上面指令后，在当前这台Linux上就安装了SSH服务端和客户端。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nicolas@ubuntu:~$ service sshd restart</span><br></pre></td></tr></table></figure><p>执行上面的指令，就启动了sshd服务。会监听端口22</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">nicolas@ubuntu:~$ netstat -anp | more</span><br><span class="line">（并非所有进程都能被检测到，所有非本用户的进程信息将不会显示，如果想看到所有信息，则必须切换到 root 用户）</span><br><span class="line">激活Internet连接 (服务器和已建立连接的)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       </span><br><span class="line">PID/Program name</span><br><span class="line">tcp        0      0 127.0.1.1:53            0.0.0.0:*               LISTEN      </span><br><span class="line">-               </span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      </span><br><span class="line">-               </span><br><span class="line">tcp6       0      0 :::22                   :::*                    LISTEN      </span><br><span class="line">-               </span><br><span class="line">udp        0      0 0.0.0.0:631             0.0.0.0:*                           </span><br><span class="line">-               </span><br><span class="line">udp        0      0 0.0.0.0:36829           0.0.0.0:*                           </span><br><span class="line">-               </span><br><span class="line">udp        0      0 127.0.1.1:53            0.0.0.0:*                           </span><br><span class="line">-               </span><br><span class="line">udp        0      0 0.0.0.0:68              0.0.0.0:*                           </span><br><span class="line">-               </span><br><span class="line">udp        0      0 0.0.0.0:5353            0.0.0.0:*                           </span><br><span class="line">-               </span><br><span class="line">udp6       0      0 :::50035                :::*                                </span><br><span class="line">-               </span><br><span class="line">udp6       0      0 :::5353                 :::*                                </span><br><span class="line">-               </span><br><span class="line">--更多--</span><br></pre></td></tr></table></figure><p>19.6.2在Windows使用XShell5/XFTP5登录Ubuntu</p><p>前面我们已经安装了XShell5，直接使用即可。</p><p>注意：使用atguigu用户登录，需要的时候再su-切换成root用户</p><p>19.6.3从linux系统客户机远程登陆linux</p><p>系统服务机首先，我们需要在linux的系统客户机也要安装openssh-server</p><p>•基本语法：ssh 用户名@IP</p><p>例如：<a href="mailto:sshatguigu@192.168.188.131" target="_blank" rel="noopener">sshatguigu@192.168.188.131</a>使用ssh访问，如访问出现错误。可查看是否有该文件～/.ssh/known_ssh尝试删除该文件解决。</p><p>•登出登出命令：exit或者logout</p><h1 id="nohup"><a href="#nohup" class="headerlink" title="nohup"></a>nohup</h1><p>nohup </p><p>命令运行由 Command参数和任何相关的 Arg参数指定的命令，忽略所有挂断（SIGHUP）信号。在注销后使用 nohup 命令运行后台中的程序。要运行后台中的 nohup 命令，添加 &amp; （ 表示“and”的符号）到命令的尾部。</p><p><strong>nohup 是 no hang up 的缩写，就是不挂断的意思。</strong></p><p>nohup命令：</p><p>如果你正在运行一个进程，而且你觉得在退出帐户时该进程还不会结束，那么可以使用nohup命令。该命令可以在你退出帐户/关闭终端之后继续运行相应的进程。</p><p>在缺省情况下该作业的所有输出都被重定向到一个名为nohup.out的文件中。</p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><ol><li>nohup command &gt; myout.file 2&gt;&amp;1 &amp;   </li></ol><p>在上面的例子中，0 – stdin (standard input)，1 – stdout (standard output)，2 – stderr (standard error) ；</p><p>2&gt;&amp;1是将标准错误（2）重定向到标准输出（&amp;1），标准输出（&amp;1）再被重定向输入到myout.file文件中。</p><p>\2. 0 22 * * * /usr/bin/python /home/pu/download_pdf/download_dfcf_pdf_to_oss.py &gt; /home/pu/download_pdf/download_dfcf_pdf_to_oss.log 2&gt;&amp;1</p><p>这是放在crontab中的定时任务，晚上22点时候怕这个任务，启动这个python的脚本，并把日志写在download_dfcf_pdf_to_oss.log文件中</p><h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><h2 id="每次进入命令都要重新source-etc-profile-才能生效"><a href="#每次进入命令都要重新source-etc-profile-才能生效" class="headerlink" title="每次进入命令都要重新source /etc/profile 才能生效"></a>每次进入命令都要重新source /etc/profile 才能生效</h2><p>如java命令</p><h3 id="1、也可以放在-bashrc里面。或者在-bashrc里面加一句source-etc-profile"><a href="#1、也可以放在-bashrc里面。或者在-bashrc里面加一句source-etc-profile" class="headerlink" title="1、也可以放在/.bashrc里面。或者在/.bashrc里面加一句source /etc/profile"></a>1、也可以放在<del>/.bashrc里面。或者在</del>/.bashrc里面加一句source /etc/profile</h3><h3 id="2、你可以把这几条命令写在-etc-bash里面-就会自动执行了"><a href="#2、你可以把这几条命令写在-etc-bash里面-就会自动执行了" class="headerlink" title="2、你可以把这几条命令写在 /etc/bash里面   就会自动执行了"></a>2、你可以把这几条命令写在 /etc/bash里面   就会自动执行了</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;&lt;h1 id=&quot;3-VM和Linux系统-CentOS-安装&quot;&gt;&lt;a href=&quot;#3-VM和Linux系统-CentOS-安装&quot; class=&quot;headerlink&quot; title=&quot;3.VM和Linux系统(CentOS)安装&quot;&gt;&lt;/a&gt;3.VM和Linux系统(CentOS)安装&lt;/h1&gt;&lt;p&gt;3.1安装vm和Centos&lt;/p&gt;&lt;p&gt;学习Linux需要一个环境，我们需要创建一个虚拟机，然后在虚拟机上安装一个Centos系统来学习。&lt;/p&gt;&lt;p&gt;1)先安装virtualmachine,vm12&lt;/p&gt;&lt;p&gt;2)再安装Linux(CentOS6.8)&lt;/p&gt;&lt;p&gt;3)原理示意图，这里我们画图说明一下VM和CentOS的关系。&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://codeofli.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="linux" scheme="https://codeofli.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>springBoot高级</title>
    <link href="https://codeofli.github.io/2019/10/java-note/springBoot-high/"/>
    <id>https://codeofli.github.io/2019/10/java-note/springBoot-high/</id>
    <published>2019-10-09T07:43:44.000Z</published>
    <updated>2019-11-12T02:56:58.306Z</updated>
    
    <content type="html"><![CDATA[<p><strong>spring boot高级</strong></p><p>[TOC]</p><h1 id="一-Spring-Boot与缓存"><a href="#一-Spring-Boot与缓存" class="headerlink" title="一.Spring Boot与缓存"></a>一.Spring Boot与缓存</h1><h2 id="1、JSR107"><a href="#1、JSR107" class="headerlink" title="1、JSR107"></a>1、JSR107</h2><p>Java Caching定义了5个核心接口，分别是<strong>CachingProvider</strong>, <strong>CacheManager</strong>, <strong>Cache</strong>, <strong>Entry</strong> 和 <strong>Expiry</strong>。</p><p>•<strong>CachingProvider</strong>定义了创建、配置、获取、管理和控制多个<strong>CacheManager</strong>。一个应用可以在运行期访问多个CachingProvider。</p><a id="more"></a><p>•<strong>CacheManager</strong>定义了创建、配置、获取、管理和控制多个唯一命名的<strong>Cache</strong>，这些Cache存在于CacheManager的上下文中。一个CacheManager仅被一个CachingProvider所拥有。</p><p>•<strong>Cache</strong>是一个类似Map的数据结构并临时存储以Key为索引的值。一个Cache仅被一个CacheManager所拥有。</p><p>•<strong>Entry</strong>是一个存储在Cache中的key-value对。</p><p>•<strong>Expiry</strong> 每一个存储在Cache中的条目有一个定义的有效期。一旦超过这个时间，条目为过期的状态。一旦过期，条目将不可访问、更新和删除。缓存有效期可以通过ExpiryPolicy设置。</p><table><thead><tr><th><strong>Cache</strong></th><th><strong>缓存接口，定义缓存操作。实现有：RedisCache、EhCacheCache、ConcurrentMapCache等</strong></th></tr></thead><tbody><tr><td><strong>CacheManager</strong></td><td><strong>缓存管理器，管理各种缓存（**</strong>Cache<strong>**）组件</strong></td></tr><tr><td><strong>@Cacheable</strong></td><td><strong>主要针对方法配置，能够根据方法的请求参数对其结果进行缓存</strong></td></tr><tr><td><strong>@**</strong>CacheEvict**</td><td><strong>清空缓存</strong></td></tr><tr><td><strong>@CachePut</strong></td><td><strong>保证方法被调用，又希望结果被缓存。</strong></td></tr><tr><td><strong>@EnableCaching</strong></td><td><strong>开启基于注解的缓存</strong></td></tr><tr><td><strong>keyGenerator</strong></td><td><strong>缓存数据时key生成策略</strong></td></tr><tr><td><strong>serialize</strong></td><td><strong>缓存数据时value序列化策略</strong></td></tr></tbody></table><ul><li>一、搭建基本环境</li><li>1、导入数据库文件 创建出department和employee表</li><li>2、创建javaBean封装数据</li><li>3、整合MyBatis操作数据库</li><li>1.配置数据源信息</li><li>2.使用注解版的MyBatis；</li><li>1）、@MapperScan指定需要扫描的mapper接口所在的包</li></ul><h2 id="2、快速体验缓存"><a href="#2、快速体验缓存" class="headerlink" title="2、快速体验缓存"></a>2、快速体验缓存</h2><p><strong>==注意：cache注解（CachePut、Cacheable、@CachePut）的key保持一致，这样才能在cachemap中拿到同一个数据==</strong></p><h3 id="CacheConfig注解"><a href="#CacheConfig注解" class="headerlink" title="@CacheConfig注解"></a>@CacheConfig注解</h3><p><strong>抽取缓存的公共配置</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CacheConfig</span>(cacheNames=<span class="string">"emp"</span>,cacheManager = <span class="string">"employeeCacheManager"</span>) <span class="comment">//抽取缓存的公共配置</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeService</span> </span>&#123;</span><br></pre></td></tr></table></figure><h3 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h3><ul><li><p>==<strong>1、开启基于注解的缓存 @EnableCaching</strong>==</p></li><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="meta">@MapperScan</span>(value = <span class="string">"com.yoj.web.dao"</span>)</span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">YojApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(YojApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li></li><li><p>2、标注缓存注解即可</p></li><li><p>@Cacheable</p></li><li><p>@CacheEvict</p></li><li><p>@CachePut</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 默认使用的是ConcurrentMapCacheManager==ConcurrentMapCache；将数据保存在ConcurrentMap&lt;Object, Object&gt;中</span></span><br><span class="line"><span class="comment"> * 开发中使用缓存中间件；redis、memcached、ehcache；</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><ul><li><p>service层使用cache注解</p></li><li><p>缓存中能使用的spel表达式</p></li><li><p><strong>Cache*</strong> <strong><em>SpEL</em></strong> <strong><em>available metadata</em></strong></p></li></ul><table><thead><tr><th><strong>名字</strong></th><th><strong>位置</strong></th><th><strong>描述</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td>methodName</td><td>root object</td><td>当前被调用的方法名</td><td>#root.methodName</td></tr><tr><td>method</td><td>root object</td><td>当前被调用的方法</td><td>#root.method.name</td></tr><tr><td>target</td><td>root object</td><td>当前被调用的目标对象</td><td>#root.target</td></tr><tr><td>targetClass</td><td>root object</td><td>当前被调用的目标对象类</td><td>#root.targetClass</td></tr><tr><td>args</td><td>root object</td><td>当前被调用的方法的参数列表</td><td>#root.args[0]</td></tr><tr><td>caches</td><td>root object</td><td>当前方法调用使用的缓存列表（如@Cacheable(value={“cache1”,   “cache2”})），则有两个cache</td><td>#root.caches[0].name</td></tr><tr><td><em>argument name</em></td><td>evaluation context</td><td>方法参数的名字. 可以直接 #参数名 ，也可以使用 #p0或#a0 的形式，0代表参数的索引；</td><td>#iban 、 #a0 、  #p0</td></tr><tr><td>result</td><td>evaluation context</td><td>方法执行后的返回值（仅当方法执行之后的判断有效，如‘unless’，’cache put’的表达式 ’cache evict’的表达式beforeInvocation=false）</td><td>#result</td></tr></tbody></table><h3 id="Cacheable注解"><a href="#Cacheable注解" class="headerlink" title="@Cacheable注解"></a>@Cacheable注解</h3><h4 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h4><ul><li><p>1、自动配置类；CacheAutoConfiguration</p></li><li><p>2、缓存的配置类(11)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.cache.GenericCacheConfiguration</span><br><span class="line">org.springframework.boot.autoconfigure.cache.JCacheCacheConfiguration</span><br><span class="line">org.springframework.boot.autoconfigure.cache.EhCacheCacheConfiguration</span><br><span class="line">org.springframework.boot.autoconfigure.cache.HazelcastCacheConfiguration</span><br><span class="line">org.springframework.boot.autoconfigure.cache.InfinispanCacheConfiguration</span><br><span class="line">org.springframework.boot.autoconfigure.cache.CouchbaseCacheConfiguration</span><br><span class="line">org.springframework.boot.autoconfigure.cache.RedisCacheConfiguration</span><br><span class="line">org.springframework.boot.autoconfigure.cache.CaffeineCacheConfiguration</span><br><span class="line">org.springframework.boot.autoconfigure.cache.GuavaCacheConfiguration</span><br><span class="line">org.springframework.boot.autoconfigure.cache.SimpleCacheConfiguration【默认】</span><br><span class="line">org.springframework.boot.autoconfigure.cache.NoOpCacheConfiguration</span><br></pre></td></tr></table></figure><ul><li>3、哪个配置类默认生效：SimpleCacheConfiguration；</li></ul></li><li><p>4、给容器中注册了一个CacheManager：ConcurrentMapCacheManager</p></li><li><ul><li>5、可以获取和创建ConcurrentMapCache类型的缓存组件；他的作用将数据保存在ConcurrentMap中；</li></ul></li></ul><h4 id="运行流程：-ConcurrentMapCacheManager-class"><a href="#运行流程：-ConcurrentMapCacheManager-class" class="headerlink" title="运行流程：(ConcurrentMapCacheManager.class)"></a>运行流程：(ConcurrentMapCacheManager.class)</h4><p>   @Cacheable：<br>   1、方法运行之前，先去<strong>查询Cache（缓存组件）</strong>，按照cacheNames指定的名字获取；<br>   （CacheManager先获取相应的缓存），第一次获取缓存如果没有Cache组件会自动创建。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Cache <span class="title">getCache</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    Cache cache = <span class="keyword">this</span>.cacheMap.get(name);</span><br><span class="line">    <span class="keyword">if</span> (cache == <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.dynamic) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>.cacheMap) &#123;</span><br><span class="line">            cache = <span class="keyword">this</span>.cacheMap.get(name);</span><br><span class="line">            <span class="keyword">if</span> (cache == <span class="keyword">null</span>) &#123;</span><br><span class="line">                cache = createConcurrentMapCache(name);</span><br><span class="line">                <span class="keyword">this</span>.cacheMap.put(name, cache);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cache;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   2、去Cache中查找缓存的内容，使用一个key，默认就是方法的参数；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">lookup</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.store.get(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   key是按照某种策略生成的；默认是使用keyGenerator生成的，默认使用SimpleKeyGenerator生成key；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheAspectSupport</span> <span class="keyword">extends</span> <span class="title">AbstractCacheInvoker</span></span></span><br><span class="line"><span class="class"><span class="title">protected</span> <span class="title">Object</span> <span class="title">generateKey</span>(@<span class="title">Nullable</span> <span class="title">Object</span> <span class="title">result</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.hasText(<span class="keyword">this</span>.metadata.operation.getKey())) &#123;</span><br><span class="line">        EvaluationContext evaluationContext = createEvaluationContext(result);</span><br><span class="line">        <span class="keyword">return</span> evaluator.key(<span class="keyword">this</span>.metadata.operation.getKey(), <span class="keyword">this</span>.metadata.methodKey, evaluationContext);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.metadata.keyGenerator.generate(<span class="keyword">this</span>.target, <span class="keyword">this</span>.metadata.method, <span class="keyword">this</span>.args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   SimpleKeyGenerator生成key的默认策略；<br>   如果没有参数；key=new SimpleKey()；<br>   如果有一个参数：key=参数的值<br>   如果有多个参数：key=new SimpleKey(params)；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleKeyGenerator</span> <span class="keyword">implements</span> <span class="title">KeyGenerator</span> </span>&#123;  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Generate a key based on the specified parameters.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">generateKey</span><span class="params">(Object... params)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (params.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> SimpleKey.EMPTY;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (params.length == <span class="number">1</span>) &#123;</span><br><span class="line">        Object param = params[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span> (param != <span class="keyword">null</span> &amp;&amp; !param.getClass().isArray()) &#123;</span><br><span class="line">            <span class="keyword">return</span> param;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SimpleKey(params);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   3、没有查到缓存就调用目标方法；<br>     4、将目标方法返回的结果，放进缓存中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(Object key, @Nullable Object value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.store.put(key, toStoreValue(value));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   @Cacheable标注的方法执行之前先来检查缓存中有没有这个数据，默认按照参数的值作为key去查询缓存，<br>     如果没有就运行方法并将结果放入缓存；以后再来调用就可以直接使用缓存中的数据；<br>   ==<strong>核心：</strong>==<br>   1）、使用CacheManager【ConcurrentMapCacheManager】按照名字得到Cache【ConcurrentMapCache】组件<br>     2）、key使用keyGenerator生成的，默认是SimpleKeyGenerator</p><h3 id="几个属性："><a href="#几个属性：" class="headerlink" title="几个属性："></a>几个属性：</h3><ul><li><p>cacheNames/value：指定缓存组件的名字;将方法的返回结果放在哪个缓存中，是数组的方式，可以指定多个缓存；</p></li><li><p>key：缓存数据使用的key；可以用它来指定。默认是使用方法参数的值  1-方法的返回值</p><pre><code>编写SpEL； #i d;参数id的值   #a0  #p0  #root.args[0]     getEmp[2] ： **key = &quot;#root.methodName+&apos;[&apos;+#id+&apos;]&apos;&quot;**</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Cacheable</span>(cacheNames = &#123;<span class="string">"emp"</span>&#125;,key = <span class="string">"#root.methodName+'['+#id+']'"</span>)</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>keyGenerator：key的生成器；可以自己指定key的生成器的组件id</p><pre><code>key/keyGenerator：二选一使用;</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCacheConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"myKeyGenerator"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> KeyGenerator <span class="title">keyGenerator</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> KeyGenerator()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">generate</span><span class="params">(Object target, Method method, Object... params)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> method.getName()+<span class="string">"["</span>+ Arrays.asList(params).toString()+<span class="string">"]"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line"> <span class="meta">@Cacheable</span>(cacheNames = &#123;<span class="string">"emp"</span>&#125;,keyGenerator = <span class="string">"myKeyGenerator"</span>)</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>cacheManager：指定缓存管理器；或者cacheResolver指定获取解析器</p></li><li><p>condition：指定符合条件的情况下才缓存；</p><pre><code>,condition = &quot;#id&gt;0&quot; condition = &quot;#a0&gt;1&quot;：第一个参数的值 &gt;1的时候才进行缓存</code></pre></li><li><p>unless:否定缓存；当unless指定的条件为true，方法的返回值就不会被缓存；可以获取到结果进行判断</p><pre><code>unless = &quot;#result == null&quot;unless = &quot;#a0==2&quot;:如果第一个参数的值是2，结果不缓存；</code></pre></li><li><p>sync：是否使用异步模式,启用sync就不能使用unless属性了</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CacheConfig</span>(cacheNames=<span class="string">"emp"</span><span class="comment">/*,cacheManager = "employeeCacheManager"*/</span>) <span class="comment">//抽取缓存的公共配置</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    EmployeeMapper employeeMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将方法的运行结果进行缓存；以后再要相同的数据，直接从缓存中获取，不用调用方法；</span></span><br><span class="line"><span class="comment">     * CacheManager管理多个Cache组件的，对缓存的真正CRUD操作在Cache组件中，每一个缓存组件有自己唯一一个名字；</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     *   </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Cacheable</span>(value = &#123;<span class="string">"emp"</span>&#125;<span class="comment">/*,keyGenerator = "myKeyGenerator",condition = "#a0&gt;1",unless = "#a0==2"*/</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Employee <span class="title">getEmp</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"查询"</span>+id+<span class="string">"号员工"</span>);</span><br><span class="line">        Employee emp = employeeMapper.getEmpById(id);</span><br><span class="line">        <span class="keyword">return</span> emp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// @Caching 定义复杂的缓存规则</span></span><br><span class="line">    <span class="meta">@Caching</span>(</span><br><span class="line">         cacheable = &#123;</span><br><span class="line">             <span class="meta">@Cacheable</span>(<span class="comment">/*value="emp",*/</span>key = <span class="string">"#lastName"</span>)</span><br><span class="line">         &#125;,</span><br><span class="line">         put = &#123;</span><br><span class="line">             <span class="meta">@CachePut</span>(<span class="comment">/*value="emp",*/</span>key = <span class="string">"#result.id"</span>),</span><br><span class="line">             <span class="meta">@CachePut</span>(<span class="comment">/*value="emp",*/</span>key = <span class="string">"#result.email"</span>)</span><br><span class="line">         &#125;</span><br><span class="line">    )</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Employee <span class="title">getEmpByLastName</span><span class="params">(String lastName)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> employeeMapper.getEmpByLastName(lastName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CachePut注解"><a href="#CachePut注解" class="headerlink" title="@CachePut注解"></a>@CachePut注解</h3><p>@CachePut：既调用方法，又更新缓存数据；同步更新缓存<br>  修改了数据库的某个数据，同时更新缓存；<br>  <strong>运行时机：</strong><br>1、先调用目标方法<br>2、将目标方法的结果缓存起来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试步骤：</span></span><br><span class="line"><span class="comment"> *  1、查询1号员工；查到的结果会放在缓存中；</span></span><br><span class="line"><span class="comment"> *          key：1  value：lastName：张三</span></span><br><span class="line"><span class="comment"> *  2、以后查询还是之前的结果</span></span><br><span class="line"><span class="comment"> *  3、更新1号员工；【lastName:zhangsan；gender:0】</span></span><br><span class="line"><span class="comment"> *          将方法的返回值也放进缓存了；</span></span><br><span class="line"><span class="comment"> *          key：传入的employee对象  值：返回的employee对象；</span></span><br><span class="line"><span class="comment"> *  4、查询1号员工？</span></span><br><span class="line"><span class="comment"> *      应该是更新后的员工；</span></span><br><span class="line"><span class="comment"> *          key = "#employee.id":使用传入的参数的员工id；</span></span><br><span class="line"><span class="comment"> *          key = "#result.id"：使用返回后的id</span></span><br><span class="line"><span class="comment"> *             <span class="doctag">@Cacheable</span>的key是不能用#result</span></span><br><span class="line"><span class="comment"> *      为什么是没更新前的？【1号员工没有在缓存中更新】</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@CachePut</span>(<span class="comment">/*value = "emp",*/</span>key = <span class="string">"#result.id"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Employee <span class="title">updateEmp</span><span class="params">(Employee employee)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"updateEmp:"</span>+employee);</span><br><span class="line">    employeeMapper.updateEmp(employee);</span><br><span class="line">    <span class="keyword">return</span> employee;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CacheEvict注解"><a href="#CacheEvict注解" class="headerlink" title="@CacheEvict注解"></a>@CacheEvict注解</h3><p><strong>evict：驱逐，逐出</strong></p><p>@CacheEvict：缓存清除</p><ul><li>key：指定要清除的数据</li><li>-allEntries = true：指定清除这个缓存中所有的数据</li><li>beforeInvocation = false：缓存的清除是否在方法之前执行<br>默认代表缓存清除操作是在方法执行之后执行;如果出现异常缓存就不会清除</li><li>beforeInvocation = true：<br>代表清除缓存操作是在方法运行之前执行，无论方法是否出现异常，缓存都清除</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CacheEvict</span>(value=<span class="string">"emp"</span>,beforeInvocation = <span class="keyword">true</span><span class="comment">/*key = "#id",*/</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteEmp</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"deleteEmp:"</span>+id);</span><br><span class="line">    <span class="comment">//employeeMapper.deleteEmpById(id);</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">10</span>/<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Caching注解"><a href="#Caching注解" class="headerlink" title="@Caching注解"></a>@Caching注解</h3><p>定义复杂的缓存规则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @Caching 定义复杂的缓存规则</span></span><br><span class="line"> <span class="meta">@Caching</span>(</span><br><span class="line">      cacheable = &#123;</span><br><span class="line">          <span class="meta">@Cacheable</span>(<span class="comment">/*value="emp",*/</span>key = <span class="string">"#lastName"</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      put = &#123;</span><br><span class="line">          <span class="meta">@CachePut</span>(<span class="comment">/*value="emp",*/</span>key = <span class="string">"#result.id"</span>),</span><br><span class="line">          <span class="meta">@CachePut</span>(<span class="comment">/*value="emp",*/</span>key = <span class="string">"#result.email"</span>)</span><br><span class="line">      &#125;</span><br><span class="line"> )</span><br><span class="line"> <span class="function"><span class="keyword">public</span> Employee <span class="title">getEmpByLastName</span><span class="params">(String lastName)</span></span>&#123;</span><br><span class="line">     <span class="keyword">return</span> employeeMapper.getEmpByLastName(lastName);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springboot01cache.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.springboot01cache.bean.Employee;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.springboot01cache.mapper.EmployeeMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@CacheConfig</span>(cacheNames = <span class="string">"emp"</span><span class="comment">/*,cacheManager = "employeeCacheManager"*/</span>) <span class="comment">//抽取缓存的公共配置</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    EmployeeMapper employeeMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将方法的运行结果进行缓存；以后再要相同的数据，直接从缓存中获取，不用调用方法；</span></span><br><span class="line"><span class="comment">     * CacheManager管理多个Cache组件的，对缓存的真正CRUD操作在Cache组件中，每一个缓存组件有自己唯一一个名字；</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 原理：</span></span><br><span class="line"><span class="comment">     * 1、自动配置类；CacheAutoConfiguration</span></span><br><span class="line"><span class="comment">     * 2、缓存的配置类</span></span><br><span class="line"><span class="comment">     * org.springframework.boot.autoconfigure.cache.GenericCacheConfiguration</span></span><br><span class="line"><span class="comment">     * org.springframework.boot.autoconfigure.cache.JCacheCacheConfiguration</span></span><br><span class="line"><span class="comment">     * org.springframework.boot.autoconfigure.cache.EhCacheCacheConfiguration</span></span><br><span class="line"><span class="comment">     * org.springframework.boot.autoconfigure.cache.HazelcastCacheConfiguration</span></span><br><span class="line"><span class="comment">     * org.springframework.boot.autoconfigure.cache.InfinispanCacheConfiguration</span></span><br><span class="line"><span class="comment">     * org.springframework.boot.autoconfigure.cache.CouchbaseCacheConfiguration</span></span><br><span class="line"><span class="comment">     * org.springframework.boot.autoconfigure.cache.RedisCacheConfiguration</span></span><br><span class="line"><span class="comment">     * org.springframework.boot.autoconfigure.cache.CaffeineCacheConfiguration</span></span><br><span class="line"><span class="comment">     * org.springframework.boot.autoconfigure.cache.GuavaCacheConfiguration</span></span><br><span class="line"><span class="comment">     * org.springframework.boot.autoconfigure.cache.SimpleCacheConfiguration【默认】</span></span><br><span class="line"><span class="comment">     * org.springframework.boot.autoconfigure.cache.NoOpCacheConfiguration</span></span><br><span class="line"><span class="comment">     * 3、哪个配置类默认生效：SimpleCacheConfiguration；</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 4、给容器中注册了一个CacheManager：ConcurrentMapCacheManager</span></span><br><span class="line"><span class="comment">     * 5、可以获取和创建ConcurrentMapCache类型的缓存组件；他的作用将数据保存在ConcurrentMap中；</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 运行流程：</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Cacheable</span>： 1、方法运行之前，先去查询Cache（缓存组件），按照cacheNames指定的名字获取；</span></span><br><span class="line"><span class="comment">     * （CacheManager先获取相应的缓存），第一次获取缓存如果没有Cache组件会自动创建。</span></span><br><span class="line"><span class="comment">     * 2、去Cache中查找缓存的内容，使用一个key，默认就是方法的参数；</span></span><br><span class="line"><span class="comment">     * key是按照某种策略生成的；默认是使用keyGenerator生成的，默认使用SimpleKeyGenerator生成key；</span></span><br><span class="line"><span class="comment">     * SimpleKeyGenerator生成key的默认策略；</span></span><br><span class="line"><span class="comment">     * 如果没有参数；key=new SimpleKey()；</span></span><br><span class="line"><span class="comment">     * 如果有一个参数：key=参数的值</span></span><br><span class="line"><span class="comment">     * 如果有多个参数：key=new SimpleKey(params)；</span></span><br><span class="line"><span class="comment">     * 3、没有查到缓存就调用目标方法；</span></span><br><span class="line"><span class="comment">     * 4、将目标方法返回的结果，放进缓存中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Cacheable</span>标注的方法执行之前先来检查缓存中有没有这个数据，默认按照参数的值作为key去查询缓存， 如果没有就运行方法并将结果放入缓存；以后再来调用就可以直接使用缓存中的数据；</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 核心：</span></span><br><span class="line"><span class="comment">     * 1）、使用CacheManager【ConcurrentMapCacheManager】按照名字得到Cache【ConcurrentMapCache】组件</span></span><br><span class="line"><span class="comment">     * 2）、key使用keyGenerator生成的，默认是SimpleKeyGenerator</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 几个属性：</span></span><br><span class="line"><span class="comment">     * cacheNames/value：指定缓存组件的名字;将方法的返回结果放在哪个缓存中，是数组的方式，可以指定多个缓存；</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * key：缓存数据使用的key；可以用它来指定。默认是使用方法参数的值  1-方法的返回值</span></span><br><span class="line"><span class="comment">     * 编写SpEL； #i d;参数id的值   #a0  #p0  #root.args[0]</span></span><br><span class="line"><span class="comment">     * getEmp[2]</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * keyGenerator：key的生成器；可以自己指定key的生成器的组件id</span></span><br><span class="line"><span class="comment">     * key/keyGenerator：二选一使用;</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * cacheManager：指定缓存管理器；或者cacheResolver指定获取解析器</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * condition：指定符合条件的情况下才缓存；</span></span><br><span class="line"><span class="comment">     * ,condition = "#id&gt;0"</span></span><br><span class="line"><span class="comment">     * condition = "#a0&gt;1"：第一个参数的值》1的时候才进行缓存</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * unless:否定缓存；当unless指定的条件为true，方法的返回值就不会被缓存；可以获取到结果进行判断</span></span><br><span class="line"><span class="comment">     * unless = "#result == null"</span></span><br><span class="line"><span class="comment">     * unless = "#a0==2":如果第一个参数的值是2，结果不缓存；</span></span><br><span class="line"><span class="comment">     * sync：是否使用异步模式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Cacheable</span>(value = &#123;<span class="string">"emp"</span>&#125;<span class="comment">/*,keyGenerator = "myKeyGenerator",condition = "#a0&gt;1",unless = "#a0==2"*/</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Employee <span class="title">getEmp</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"查询"</span> + id + <span class="string">"号员工"</span>);</span><br><span class="line">        Employee emp = employeeMapper.getEmpById(id);</span><br><span class="line">        <span class="keyword">return</span> emp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@CachePut</span>：既调用方法，又更新缓存数据；同步更新缓存 修改了数据库的某个数据，同时更新缓存；</span></span><br><span class="line"><span class="comment">     * 运行时机：</span></span><br><span class="line"><span class="comment">     * 1、先调用目标方法</span></span><br><span class="line"><span class="comment">     * 2、将目标方法的结果缓存起来</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 测试步骤：</span></span><br><span class="line"><span class="comment">     * 1、查询1号员工；查到的结果会放在缓存中；</span></span><br><span class="line"><span class="comment">     * key：1  value：lastName：张三</span></span><br><span class="line"><span class="comment">     * 2、以后查询还是之前的结果</span></span><br><span class="line"><span class="comment">     * 3、更新1号员工；【lastName:zhangsan；gender:0】</span></span><br><span class="line"><span class="comment">     * 将方法的返回值也放进缓存了；</span></span><br><span class="line"><span class="comment">     * key：传入的employee对象  值：返回的employee对象；</span></span><br><span class="line"><span class="comment">     * 4、查询1号员工？</span></span><br><span class="line"><span class="comment">     * 应该是更新后的员工；</span></span><br><span class="line"><span class="comment">     * key = "#employee.id":使用传入的参数的员工id；</span></span><br><span class="line"><span class="comment">     * key = "#result.id"：使用返回后的id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Cacheable</span>的key是不能用#result 为什么是没更新前的？【1号员工没有在缓存中更新】</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@CachePut</span>(value = <span class="string">"emp"</span>, key = <span class="string">"#result.id"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Employee <span class="title">updateEmp</span><span class="params">(Employee employee)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"updateEmp:"</span> + employee);</span><br><span class="line">        employeeMapper.updateEmp(employee);</span><br><span class="line">        <span class="keyword">return</span> employee;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@CacheEvict</span>：缓存清除 key：指定要清除的数据</span></span><br><span class="line"><span class="comment">     * allEntries = true：指定清除这个缓存中所有的数据</span></span><br><span class="line"><span class="comment">     * beforeInvocation = false：缓存的清除是否在方法之前执行</span></span><br><span class="line"><span class="comment">     * 默认代表缓存清除操作是在方法执行之后执行;如果出现异常缓存就不会清除</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * beforeInvocation = true：</span></span><br><span class="line"><span class="comment">     * 代表清除缓存操作是在方法运行之前执行，无论方法是否出现异常，缓存都清除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@CacheEvict</span>(value = <span class="string">"emp"</span>, beforeInvocation = <span class="keyword">true</span><span class="comment">/*key = "#id",*/</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteEmp</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"deleteEmp:"</span> + id);</span><br><span class="line">        <span class="comment">//employeeMapper.deleteEmpById(id);</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">10</span> / <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// @Caching 定义复杂的缓存规则</span></span><br><span class="line">    <span class="meta">@Caching</span>(</span><br><span class="line">            cacheable = &#123;</span><br><span class="line">                    <span class="meta">@Cacheable</span>(<span class="comment">/*value="emp",*/</span>key = <span class="string">"#lastName"</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">            put = &#123;</span><br><span class="line">                    <span class="meta">@CachePut</span>(<span class="comment">/*value="emp",*/</span>key = <span class="string">"#result.id"</span>),</span><br><span class="line">                    <span class="meta">@CachePut</span>(<span class="comment">/*value="emp",*/</span>key = <span class="string">"#result.email"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">    )</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Employee <span class="title">getEmpByLastName</span><span class="params">(String lastName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> employeeMapper.getEmpByLastName(lastName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-整合redis作为缓存"><a href="#3-整合redis作为缓存" class="headerlink" title="3.整合redis作为缓存"></a>3.整合redis作为缓存</h2><p> Redis 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。</p><p> 原理：CacheManager===Cache 缓存组件来实际给缓存中存取数据<br> 1）、引入redis的starter，容器中保存的是 RedisCacheManager；<br> 2）、RedisCacheManager 帮我们创建 RedisCache 来作为缓存组件；RedisCache通过操作redis缓存数据的<br> 3）、默认保存数据 kv 都是Object；利用序列化保存；如何保存为json<br> 1、引入了redis的starter，cacheManager变为 RedisCacheManager；<br> 2、默认创建的 RedisCacheManager 操作redis的时候使用的是 RedisTemplate&lt;Object, Object&gt;<br> 3、RedisTemplate&lt;Object, Object&gt; 是 默认使用jdk的序列化机制<br> 4）、自定义CacheManager；</p><h3 id="1、安装redis：使用docker；"><a href="#1、安装redis：使用docker；" class="headerlink" title="1、安装redis：使用docker；"></a>1、安装redis：使用docker；</h3><p><strong>启动redis，默认端口6379</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@MiWiFi-R3A-srv ~]# docker run -d -p 6379:6379 --name myredis redis</span><br><span class="line">ba86c7f5d285b74828df3ec4f0179cfcd3682dc58f2cfabe354a63336d94919e</span><br><span class="line"><span class="meta">#</span><span class="bash">开启持久化</span></span><br><span class="line">docker run  -d -p 6379:6379 --name persistent-redis redis --appendonly yes</span><br><span class="line"></span><br><span class="line">docker run --name="redis-2" -d -p 6378:6379 -v /home/fr/redis:/opt royfans/redis:v1 /usr/local/redis/bin/redis-server /usr/local/redis/redis.conf --appendonly yes</span><br></pre></td></tr></table></figure><p>==<strong>注意</strong>==：<strong>如果不开启持久化，会导致一段时间不用缓存之后，连接不上redis</strong></p><p><strong>start with persistent storage</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -v /myredis/conf/redis.conf:/home/ubuntu/redis/redis.conf -d -p 6379:6379 --name config-redis redis --appendonly yes</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run --name some-redis -d redis redis-server --appendonly yes</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -v /myredis/conf/redis.conf:/usr/<span class="built_in">local</span>/etc/redis/redis.conf --name myredis redis redis-server /usr/<span class="built_in">local</span>/etc/redis/redis.conf</span></span><br></pre></td></tr></table></figure><p>Where /myredis/conf/ is a local directory containing your redis.conf file. Using this method means that there is no need for you to have a Dockerfile for your redis container.</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">这个问题我们在项目中遇到同样的问题，目前已经解决了。最终得到的答案是： 服务器不稳定造成的。</span><br><span class="line">您可以尝试这样解决：</span><br><span class="line"><span class="number">1.</span>推荐使用生产环境的服务器，并且将redis 绑定生产环境的ip;因为云服务器的ip 地址是很稳定的，而本地服务的ip地址经常是变动的；经 </span><br><span class="line">   过测试，这种每过<span class="number">10</span>分就会重新请求连接，还会发生重试失败的情况，就是因为服务器不稳定造成的；</span><br><span class="line"><span class="number">2.</span>如果你在生产环境中，使用docker 部署，建议 不要在docker容器中 安装redis; 因为docker 容器 默认分配的ip 地址，也可能是变化的；</span><br><span class="line">  您可以直接将redis 安装在 服务器目录下，即可；</span><br></pre></td></tr></table></figure><p>redis desktop manager连接</p><p>![1565350310934](redis desktop manager连接.png)</p><h3 id="2、引入redis的starter"><a href="#2、引入redis的starter" class="headerlink" title="2、引入redis的starter"></a>2、引入redis的starter</h3><p>1.引入spring-boot-starter-data-redis</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入redis--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3、配置redis"><a href="#3、配置redis" class="headerlink" title="3、配置redis"></a>3、配置redis</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#指定主机端口号</span></span><br><span class="line"><span class="meta">spring.redis.host</span>=<span class="string">192.168.31.39</span></span><br></pre></td></tr></table></figure><h3 id="4、测试缓存"><a href="#4、测试缓存" class="headerlink" title="4、测试缓存"></a>4、测试缓存</h3><p>3.使用RestTemplate操作redis</p><p>1.redisTemplate.opsForValue();//操作字符串</p><p>2.redisTemplate.opsForHash();//操作hash</p><p>3.redisTemplate.opsForList();//操作list</p><p>4.redisTemplate.opsForSet();//操作set</p><p>5.redisTemplate.opsForZSet();//操作有序set</p><p>4.配置缓存、CacheManagerCustomizers</p><p>5.测试使用缓存、切换缓存、 CompositeCacheManager</p><p><strong>==stringRedisTemplate==</strong></p><p>//操作k-v都是字符串的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">StringRedisTemplate stringRedisTemplate;  <span class="comment">//操作k-v都是字符串的</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Redis常见的五大数据类型</span></span><br><span class="line"><span class="comment">     *  String（字符串）、List（列表）、Set（集合）、Hash（散列）、ZSet（有序集合）</span></span><br><span class="line"><span class="comment">     *  stringRedisTemplate.opsForValue()[String（字符串）]</span></span><br><span class="line"><span class="comment">     *  stringRedisTemplate.opsForList()[List（列表）]</span></span><br><span class="line"><span class="comment">     *  stringRedisTemplate.opsForSet()[Set（集合）]</span></span><br><span class="line"><span class="comment">     *  stringRedisTemplate.opsForHash()[Hash（散列）]</span></span><br><span class="line"><span class="comment">     *  stringRedisTemplate.opsForZSet()[ZSet（有序集合）]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//给redis中保存数据</span></span><br><span class="line">    <span class="comment">//stringRedisTemplate.opsForValue().append("msg","hello");</span></span><br><span class="line">    <span class="comment">//获取数据</span></span><br><span class="line">    <span class="comment">//String msg = stringRedisTemplate.opsForValue().get("msg");</span></span><br><span class="line">    <span class="comment">//System.out.println(msg);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存list集合数据</span></span><br><span class="line">    stringRedisTemplate.opsForList().leftPush(<span class="string">"mylist"</span>,<span class="string">"1"</span>);</span><br><span class="line">    stringRedisTemplate.opsForList().leftPush(<span class="string">"mylist"</span>,<span class="string">"2"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>==redisTemplate==</strong></p><p>k-v都是对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Autowired</span></span><br><span class="line">    RedisTemplate redisTemplate; <span class="comment">//k-v都是对象的</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RedisTemplate&lt;Object,Object&gt; empRedisTemplate; <span class="comment">//自定义缓存规则配置的redisTemplate</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//测试保存对象</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Employee empById = employeeMapper.getEmpById(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//默认如果保存对象，使用jdk序列化机制，序列化后的数据保存到redis中</span></span><br><span class="line">        <span class="comment">//redisTemplate.opsForValue().set("emp-01",empById);</span></span><br><span class="line">        <span class="comment">//1、将数据以json的方式保存</span></span><br><span class="line">        <span class="comment">//(1)自己将对象转为json</span></span><br><span class="line">        <span class="comment">//(2)redisTemplate默认的序列化规则；改变默认的序列化规则；</span></span><br><span class="line">        empRedisTemplate.opsForValue().set(<span class="string">"emp-01"</span>,empById);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="5-使用Json格式序列化对象"><a href="#5-使用Json格式序列化对象" class="headerlink" title="5.使用Json格式序列化对象"></a>5.使用Json格式序列化对象</h3><p>1.使用setKey和value的Serializer方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">redisTemplate.setValueSerializer(<span class="keyword">new</span> Jackson2JsonRedisSerializer&lt;Employee&gt;(Employee.class));</span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> Jackson2JsonRedisSerializer&lt;Employee&gt;(Employee.class));</span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">"emp-02"</span>,empById);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRedisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="title">empRedisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> UnknownHostException </span>&#123;</span><br><span class="line">        RedisTemplate&lt;Object, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        Jackson2JsonRedisSerializer&lt;Employee&gt; serializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer&lt;Employee&gt;(Employee.class);</span><br><span class="line">        template.setDefaultSerializer(serializer);</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="2-0配置redis的CacheManager"><a href="#2-0配置redis的CacheManager" class="headerlink" title="2.0配置redis的CacheManager"></a>2.0配置redis的CacheManager</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  cache:</span></span><br><span class="line"><span class="attr">    redis:</span></span><br><span class="line"><span class="attr">      timeToLive:</span> <span class="number">1000000</span> <span class="comment">#毫秒</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springboot01cache.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonAutoDetect;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.PropertyAccessor;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.CacheManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.cache.RedisCacheConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.cache.RedisCacheManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.RedisSerializationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.RedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.Duration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRedisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @Bean</span></span><br><span class="line"><span class="comment">//    public RedisTemplate&lt;Object, Object&gt; empRedisTemplate(RedisConnectionFactory redisConnectionFactory)</span></span><br><span class="line"><span class="comment">//            throws UnknownHostException &#123;</span></span><br><span class="line"><span class="comment">//        RedisTemplate&lt;Object, Object&gt; template = new RedisTemplate&lt;&gt;();</span></span><br><span class="line"><span class="comment">//        template.setConnectionFactory(redisConnectionFactory);</span></span><br><span class="line"><span class="comment">//        Jackson2JsonRedisSerializer&lt;Employee&gt; serializer = new Jackson2JsonRedisSerializer&lt;Employee&gt;(Employee.class);</span></span><br><span class="line"><span class="comment">//        template.setDefaultSerializer(serializer);</span></span><br><span class="line"><span class="comment">//        return template;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Duration timeToLive = Duration.ZERO;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTimeToLive</span><span class="params">(Duration timeToLive)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.timeToLive = timeToLive;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CacheManager <span class="title">cacheManager</span><span class="params">(RedisConnectionFactory factory)</span> </span>&#123;</span><br><span class="line">        RedisSerializer&lt;String&gt; redisSerializer = <span class="keyword">new</span> StringRedisSerializer();</span><br><span class="line">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer(Object.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//解决查询缓存转换异常的问题</span></span><br><span class="line">        ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 配置序列化（解决乱码的问题）</span></span><br><span class="line">        RedisCacheConfiguration config = RedisCacheConfiguration.defaultCacheConfig()</span><br><span class="line">                .entryTtl(timeToLive)</span><br><span class="line">                .serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(redisSerializer))</span><br><span class="line">                .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(jackson2JsonRedisSerializer))</span><br><span class="line">                .disableCachingNullValues();</span><br><span class="line"></span><br><span class="line">        RedisCacheManager cacheManager = RedisCacheManager.builder(factory)</span><br><span class="line">                .cacheDefaults(config)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> cacheManager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-注意"><a href="#4-注意" class="headerlink" title="4.注意"></a>4.注意</h2><h2 id="1-CachePut-获取就是返回的值"><a href="#1-CachePut-获取就是返回的值" class="headerlink" title="1.@CachePut 获取就是返回的值"></a>1.@CachePut 获取就是返回的值</h2><p>所有想要存入缓存的都是返回的值</p><h2 id="my-redis"><a href="#my-redis" class="headerlink" title="my_redis"></a>my_redis</h2><h3 id="设置缓存时间"><a href="#设置缓存时间" class="headerlink" title="设置缓存时间"></a>设置缓存时间</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stringRedisTemplate.opsForValue().set(email, checkCode,<span class="number">60</span>*<span class="number">10</span>,TimeUnit.SECONDS);<span class="comment">//向redis里存入数据和设置缓存时间</span></span><br></pre></td></tr></table></figure><h3 id="删除缓存byKey"><a href="#删除缓存byKey" class="headerlink" title="删除缓存byKey"></a>删除缓存byKey</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stringRedisTemplate.delete(user.getEmail());</span><br></pre></td></tr></table></figure><h3 id="检查时间"><a href="#检查时间" class="headerlink" title="检查时间"></a>检查时间</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stringRedisTemplate.hasKey(<span class="string">"546545"</span>);<span class="comment">//检查key是否存在，返回boolean值</span></span><br></pre></td></tr></table></figure><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="redis一段时间之后不连接就连不上"><a href="#redis一段时间之后不连接就连不上" class="headerlink" title="redis一段时间之后不连接就连不上"></a>redis一段时间之后不连接就连不上</h3><p><strong>==内存原因，设置maxmemory和替换算法==</strong></p><p>  在Linux上，如果开了redis的守护进程，kill -9和redis-cli shutdown 命令是无法杀掉 redis 进程的 ，杀掉就会重新启动一个新的进程</p><p>最后在网上找到这个命令：</p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/redis-<span class="built_in">server</span> <span class="keyword">stop</span></span><br></pre></td></tr></table></figure><h1 id="二-Spring-Boot与消息"><a href="#二-Spring-Boot与消息" class="headerlink" title="二.Spring Boot与消息"></a>二.Spring Boot与消息</h1><p>JMS、AMQP、RabbitMQ</p><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><p>1.大多应用中，可通过消息服务中间件来提升系统异步通信、扩展解耦能力</p><p>2.消息服务中两个重要概念：</p><p>​       <strong>消息代理（message broker）和目的地（destination）</strong></p><p>当消息发送者发送消息以后，将由消息代理接管，消息代理保证消息传递到指定目的地。</p><p>3.消息队列主要有两种形式的目的地</p><p> 1.队列（queue）：点对点消息通信（point-to-point）</p><p> 2.主题（topic）：发布（publish）/订阅（subscribe）消息通信</p><p>4.点对点式：</p><p>–消息发送者发送消息，消息代理将其放入一个队列中，消息接收者从队列中获取消息内容，消息读取后被移出队列</p><p>–消息只有唯一的发送者和接受者，但并不是说只能有一个接收者</p><p>5.发布订阅式：</p><p>–发送者（发布者）发送消息到主题，多个接收者（订阅者）监听（订阅）这个主题，那么就会在消息到达时同时收到消息</p><p>6.JMS（Java Message Service）JAVA消息服务：</p><p>–基于JVM消息代理的规范。ActiveMQ、HornetMQ是JMS实现</p><p>7.AMQP（Advanced Message Queuing Protocol）</p><p>–高级消息队列协议，也是一个消息代理的规范，兼容JMS</p><p>–RabbitMQ是AMQP的实现</p><table><thead><tr><th></th><th>JMS</th><th>AMQP</th></tr></thead><tbody><tr><td>定义</td><td>Java   api</td><td>网络线级协议</td></tr><tr><td>跨语言</td><td>否</td><td>是</td></tr><tr><td>跨平台</td><td>否</td><td>是</td></tr><tr><td>Model</td><td>提供两种消息模型：   （1）、Peer-2-Peer   （2）、Pub/sub</td><td>提供了五种消息模型：   （1）、direct   exchange   （2）、fanout   exchange   （3）、topic   change   （4）、headers   exchange   （5）、system   exchange   本质来讲，后四种和JMS的pub/sub模型没有太大差别，仅是在路由机制上做了更详细的划分；</td></tr><tr><td>支持消息类型</td><td>多种消息类型：   TextMessage   MapMessage   BytesMessage   StreamMessage   ObjectMessage   Message   （只有消息头和属性）</td><td>byte[]   当实际应用时，有复杂的消息，可以将消息序列化后发送。</td></tr><tr><td>综合评价</td><td>JMS   定义了JAVA   API层面的标准；在java体系中，多个client均可以通过JMS进行交互，不需要应用修改代码，但是其对跨平台的支持较差；</td><td>AMQP定义了wire-level层的协议标准；天然具有跨平台、跨语言特性。</td></tr></tbody></table><p>8.Spring支持</p><p><strong>–spring-jms提供了对JMS的支持</strong></p><p><strong>–spring-rabbit提供了对AMQP的支持</strong></p><p><strong>–需要ConnectionFactory的实现来连接消息代理</strong></p><p><strong>–提供JmsTemplate、RabbitTemplate来发送消息</strong></p><p><strong>–@JmsListener（JMS）、@RabbitListener（AMQP）注解在方法上监听消息代理发布的消息</strong></p><p><strong>–@EnableJms、@EnableRabbit开启支持</strong></p><p>9.Spring Boot自动配置</p><p>–<strong>JmsAutoConfiguration</strong></p><p>–<strong>RabbitAutoConfiguration</strong></p><h2 id="二、RabbitMQ简介"><a href="#二、RabbitMQ简介" class="headerlink" title="二、RabbitMQ简介"></a>二、RabbitMQ简介</h2><p><strong>RabbitMQ简介：</strong></p><p>RabbitMQ是一个由erlang开发的AMQP(Advanved Message Queue Protocol)的开源实现。</p><p><strong>核心概念</strong></p><p><strong>Message</strong></p><p>消息，消息是不具名的，它由消息头和消息体组成。消息体是不透明的，而消息头则由一系列的可选属性组成，这些属性包括routing-key（路由键）、priority（相对于其他消息的优先权）、delivery-mode（指出该消息可能需要持久性存储）等。</p><p><strong>Publisher</strong></p><p>消息的生产者，也是一个向交换器发布消息的客户端应用程序。</p><p><strong>Exchange</strong></p><p>交换器，用来接收生产者发送的消息并将这些消息路由给服务器中的队列。</p><p>Exchange有4种类型：direct(默认)，fanout, topic, 和headers，不同类型的Exchange转发消息的策略有所区别</p><p>三、Spring Boot与检索</p><h1 id="四-Spring-Boot与任务"><a href="#四-Spring-Boot与任务" class="headerlink" title="四.Spring Boot与任务"></a>四.Spring Boot与任务</h1><h2 id="异步任务、定时任务、邮件任务"><a href="#异步任务、定时任务、邮件任务" class="headerlink" title="异步任务、定时任务、邮件任务"></a>异步任务、定时任务、邮件任务</h2><h2 id="一、异步任务"><a href="#一、异步任务" class="headerlink" title="一、异步任务"></a>一、异步任务</h2><p>在Java应用中，绝大多数情况下都是通过同步的方式来实现交互处理的；但是在处理与第三方系统交互的时候，容易造成响应迟缓的情况，之前大部分都是使用多线程来完成此类任务，其实，在Spring 3.x之后，就已经内置了@Async来完美解决这个问题。</p><p><strong>两个注解：</strong></p><p>@EnableAysnc、@Aysnc</p><p><strong>springbootApplication添加@EnableAysnc注解</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableAsync</span>  <span class="comment">//开启异步注解功能</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Springboot04TaskApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Springboot04TaskApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>编写异步方法，同时执行</strong>，并不会等3s才有success</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//告诉Spring这是一个异步方法</span></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"处理数据中..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、定时任务"><a href="#二、定时任务" class="headerlink" title="二、定时任务"></a>二、定时任务</h2><p>@EnableScheduling //开启基于注解的定时任务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableScheduling</span> <span class="comment">//开启基于注解的定时任务</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Springboot04TaskApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Springboot04TaskApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>编写定时方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduledService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * second(秒), minute（分）, hour（时）, day of month（日）, month（月）, day of week（周几）.</span></span><br><span class="line"><span class="comment">     * 0 * * * * MON-FRI</span></span><br><span class="line"><span class="comment">     *  【0 0/5 14,18 * * ?】 每天14点整，和18点整，每隔5分钟执行一次</span></span><br><span class="line"><span class="comment">     *  【0 15 10 ? * 1-6】 每个月的周一至周六10:15分执行一次</span></span><br><span class="line"><span class="comment">     *  【0 0 2 ? * 6L】每个月的最后一个周六凌晨2点执行一次</span></span><br><span class="line"><span class="comment">     *  【0 0 2 LW * ?】每个月的最后一个工作日凌晨2点执行一次</span></span><br><span class="line"><span class="comment">     *  【0 0 2-4 ? * 1#1】每个月的第一个周一凌晨2点到4点期间，每个整点都执行一次；</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//    @Scheduled(cron = "0 * * * * MON-SAT")</span></span><br><span class="line"><span class="comment">//    @Scheduled(cron = "0,1,2,3,4 * * * * MON-SAT")</span></span><br><span class="line">   <span class="comment">// @Scheduled(cron = "0-4 * * * * MON-SAT")</span></span><br><span class="line">    <span class="meta">@Scheduled</span>(cron = <span class="string">"0/4 * * * * MON-SAT"</span>)  <span class="comment">//每4秒执行一次</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello ... "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>两个注解：@EnableScheduling、@Scheduled</strong></p><p><strong>cron表达式：</strong></p><table><thead><tr><th><strong>字段</strong></th><th><strong>允许值</strong></th><th><strong>允许的特殊字符</strong></th></tr></thead><tbody><tr><td>秒</td><td>0-59</td><td>, -   * /</td></tr><tr><td>分</td><td>0-59</td><td>, -   * /</td></tr><tr><td>小时</td><td>0-23</td><td>, -   * /</td></tr><tr><td>日期</td><td>1-31</td><td>, -   * ? / L W C</td></tr><tr><td>月份</td><td>1-12</td><td>, -   * /</td></tr><tr><td>星期</td><td>0-7或SUN-SAT   0,7是SUN</td><td>, -   * ? / L C #</td></tr></tbody></table><table><thead><tr><th><strong>特殊字符</strong></th><th><strong>代表含义</strong></th></tr></thead><tbody><tr><td>,</td><td>枚举</td></tr><tr><td>-</td><td>区间</td></tr><tr><td>*</td><td>任意</td></tr><tr><td>/</td><td>步长</td></tr><tr><td>?</td><td>日/星期冲突匹配</td></tr><tr><td>L</td><td>最后</td></tr><tr><td>W</td><td>工作日</td></tr><tr><td>C</td><td>和calendar联系后计算过的值</td></tr><tr><td>#</td><td>星期，4#2，第2个星期四</td></tr></tbody></table><h2 id="三、邮件任务"><a href="#三、邮件任务" class="headerlink" title="三、邮件任务"></a>三、邮件任务</h2><p>•邮件发送需要引入spring-boot-starter-mail</p><p>•Spring Boot 自动配置MailSenderAutoConfiguration</p><p>•定义MailProperties内容，配置在application.yml中</p><p>•自动装配JavaMailSender</p><p>•测试邮件发送</p><p><strong>1.导入依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2.配置信息</strong></p><p>1)首先在qq邮箱开通相关的服务</p><p><img src="/2019/10/java-note/springBoot-high/E:%5CDesktop%5Cspringboot%E9%AB%98%E7%BA%A7%5Cimgs%5C1569337676687.png" alt="1569337676687"></p><p><img src="/2019/10/java-note/springBoot-high/E:%5CDesktop%5Cspringboot%E9%AB%98%E7%BA%A7%5Cimgs%5C1569337715201.png" alt="1569337715201"></p><p><strong>拿到的授权码即为password</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.mail.username</span>=<span class="string">1162314270@qq.com</span></span><br><span class="line"><span class="meta">spring.mail.password</span>=<span class="string">kykperaulxvigjbh</span></span><br><span class="line"><span class="meta">spring.mail.host</span>=<span class="string">smtp.qq.com</span></span><br><span class="line"><span class="comment">#503错误，我的没有这个错</span></span><br><span class="line"><span class="comment">#spring.mail.properties.mail.smtp.ssl.enable=true</span></span><br><span class="line"><span class="comment">#ggjhtotqoeahihgb</span></span><br><span class="line"><span class="comment">#cnfyhrjcbacvgjaf</span></span><br><span class="line"><span class="comment">#kykperaulxvigjbh</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Springboot04TaskApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JavaMailSenderImpl mailSender;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SimpleMailMessage message = <span class="keyword">new</span> SimpleMailMessage();</span><br><span class="line">        <span class="comment">//邮件设置</span></span><br><span class="line">        message.setSubject(<span class="string">"通知-今晚开会"</span>);</span><br><span class="line">        message.setText(<span class="string">"今晚7:30开会"</span>);</span><br><span class="line"></span><br><span class="line">        message.setTo(<span class="string">"407820388@qq.com"</span>);</span><br><span class="line">        message.setFrom(<span class="string">"1162314270@qq.com"</span>);</span><br><span class="line"></span><br><span class="line">        mailSender.send(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> <span class="keyword">throws</span>  Exception</span>&#123;</span><br><span class="line">        <span class="comment">//1、创建一个复杂的消息邮件</span></span><br><span class="line">        MimeMessage mimeMessage = mailSender.createMimeMessage();</span><br><span class="line">        MimeMessageHelper helper = <span class="keyword">new</span> MimeMessageHelper(mimeMessage, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//邮件设置</span></span><br><span class="line">        helper.setSubject(<span class="string">"通知-今晚开会"</span>);</span><br><span class="line">        helper.setText(<span class="string">"&lt;b style='color:red'&gt;今天 7:30 开会&lt;/b&gt;"</span>,<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        helper.setTo(<span class="string">"407820388@qq.com"</span>);</span><br><span class="line">        helper.setFrom(<span class="string">"1162314270@qq.com"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//上传文件</span></span><br><span class="line">        helper.addAttachment(<span class="string">"1.jpg"</span>,<span class="keyword">new</span> File(<span class="string">"E:\\pictures\\desktop view.png"</span>));</span><br><span class="line">        helper.addAttachment(<span class="string">"2.jpg"</span>,<span class="keyword">new</span> File(<span class="string">"E:\\pictures\\e.png"</span>));</span><br><span class="line"></span><br><span class="line">        mailSender.send(mimeMessage);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="五-Spring-Boot与安全"><a href="#五-Spring-Boot与安全" class="headerlink" title="五.Spring Boot与安全"></a>五.Spring Boot与安全</h1><h2 id="一、安全"><a href="#一、安全" class="headerlink" title="一、安全"></a>一、安全</h2><p>Spring Security是针对Spring项目的安全框架，也是Spring Boot底层安全模块默认的技术选型。他可以实现强大的web安全控制。对于安全控制，我们仅需引入spring-boot-starter-security模块，进行少量的配置，即可实现强大的安全管理。</p><p> 几个类：</p><p>WebSecurityConfigurerAdapter：自定义Security策略</p><p>AuthenticationManagerBuilder：自定义认证策略</p><p>@EnableWebSecurity：开启WebSecurity模式</p><h3 id="“认证”和“授权”"><a href="#“认证”和“授权”" class="headerlink" title="“认证”和“授权”"></a>“认证”和“授权”</h3><p>•应用程序的两个主要区域是“认证”和“授权”（或者访问控制）。这两个主要区域是Spring Security 的两个目标。</p><p>•<strong>“认证”（Authentication）</strong>，是建立一个他声明的主体的过程（一个“主体”一般是指用户，设备或一些可以在你的应用程序中执行动作的其他系统）。</p><p>•“<strong>授权”（Authorization）</strong>指确定一个主体是否允许在你的应用程序执行一个动作的过程。为了抵达需要授权的店，主体的身份已经有认证过程建立。</p><p>•这个概念是通用的而不只在Spring Security中。</p><h2 id="二、Web-amp-安全"><a href="#二、Web-amp-安全" class="headerlink" title="二、Web&amp;安全"></a>二、Web&amp;安全</h2><p>1.登陆/注销</p><p>–HttpSecurity配置登陆、注销功能</p><p>2.Thymeleaf提供的SpringSecurity标签支持</p><p>–需要引入thymeleaf-extras-springsecurity5（版本要一致）</p><p>–sec:authentication=“name”获得当前用户的用户名</p><p>–sec:authorize=“hasRole(‘ADMIN’)”当前用户必须拥有ADMIN权限时才会显示标签内容</p><p>3.remember me</p><p>–表单添加remember-me的checkbox</p><p>–配置启用remember-me功能</p><p>4.CSRF（Cross-site request forgery）跨站请求伪造</p><p>HttpSecurity启用功能，会为表单添加csrfCSRF</p><h2 id="使用SpringSecurity"><a href="#使用SpringSecurity" class="headerlink" title="使用SpringSecurity"></a>使用SpringSecurity</h2><p><a href="https://spring.io/projects/spring-security" target="_blank" rel="noopener">官方文档</a></p><h3 id="1、引入SpringSecurity；"><a href="#1、引入SpringSecurity；" class="headerlink" title="1、引入SpringSecurity；"></a>1、引入SpringSecurity；</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2、编写SpringSecurity的配置类；"><a href="#2、编写SpringSecurity的配置类；" class="headerlink" title="2、编写SpringSecurity的配置类；"></a>2、编写SpringSecurity的配置类；</h3><p><strong>使用之间需要PasswordEncoder的bean存在</strong></p><p>使用springboot，权限管理使用spring security，使用内存用户验证，但无响应报错：<br>java.lang.IllegalArgumentException: There is no PasswordEncoder mapped for the id “null”<br>解决方法：<br>这是因为Spring boot 2.0.3引用的security 依赖是 spring security 5.X版本，此版本需要提供一个PasswordEncorder的实例，否则后台汇报错误：<br>java.lang.IllegalArgumentException: There is no PasswordEncoder mapped for the id “null”<br>并且页面毫无响应。<br>因此，需要创建PasswordEncorder的实现类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> springboot05security.nicolas.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyPasswordEncoder</span> <span class="keyword">implements</span> <span class="title">PasswordEncoder</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">encode</span><span class="params">(CharSequence charSequence)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> charSequence.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(CharSequence charSequence, String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s.equals(charSequence.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>自定义securityConfig需要继承WebSecurityConfigurerAdapter</strong></p><p>3、控制请求的访问权限：<br>configure(HttpSecurity http) {<br>http.authorizeRequests().antMatchers(“/“).permitAll()<br>.antMatchers(“/level1/**”).hasRole(“VIP1”)<br>}</p><h3 id="4、定义认证规则："><a href="#4、定义认证规则：" class="headerlink" title="4、定义认证规则："></a>4、定义认证规则：</h3><p>configure(AuthenticationManagerBuilder auth){<br>auth.inMemoryAuthentication()<br>.withUser(“zhangsan”).password(“123456”).roles(“VIP1”,”VIP2”)<br>}</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义认证规则</span></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">     <span class="comment">//super.configure(auth);</span></span><br><span class="line">     auth.inMemoryAuthentication()</span><br><span class="line">             .withUser(<span class="string">"zhangsan"</span>).password(<span class="string">"123456"</span>).roles(<span class="string">"VIP1"</span>, <span class="string">"VIP2"</span>)</span><br><span class="line">             .and()</span><br><span class="line">             .withUser(<span class="string">"lisi"</span>).password(<span class="string">"123456"</span>).roles(<span class="string">"VIP2"</span>, <span class="string">"VIP3"</span>)</span><br><span class="line">             .and()</span><br><span class="line">             .withUser(<span class="string">"wangwu"</span>).password(<span class="string">"123456"</span>).roles(<span class="string">"VIP1"</span>, <span class="string">"VIP3"</span>);</span><br><span class="line">             <span class="comment">/**有以下几种形式，使用第3种*/</span></span><br><span class="line">     <span class="comment">//inMemoryAuthentication 从内存中获取</span></span><br><span class="line">     <span class="comment">//auth.inMemoryAuthentication().passwordEncoder(new BCryptPasswordEncoder()).withUser("user1").password(new BCryptPasswordEncoder().encode("123123")).roles("USER");</span></span><br><span class="line"> </span><br><span class="line">     <span class="comment">//jdbcAuthentication从数据库中获取，但是默认是以security提供的表结构</span></span><br><span class="line">     <span class="comment">//usersByUsernameQuery 指定查询用户SQL</span></span><br><span class="line">     <span class="comment">//authoritiesByUsernameQuery 指定查询权限SQL</span></span><br><span class="line">     <span class="comment">//auth.jdbcAuthentication().dataSource(dataSource).usersByUsernameQuery(query).authoritiesByUsernameQuery(query);</span></span><br><span class="line"> </span><br><span class="line">     <span class="comment">//注入userDetailsService，需要实现userDetailsService接口</span></span><br><span class="line">     auth.userDetailsService(userDetailsService).passwordEncoder(<span class="keyword">new</span> BCryptPasswordEncoder());</span><br></pre></td></tr></table></figure><p>==<strong>使用注入userDetailsService，需要实现userDetailsService接口</strong>==</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    PrivilegeService privilegeService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">        User user = userMapper.getUserByName(username);</span><br><span class="line">        <span class="keyword">if</span>(user == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UsernameNotFoundException(<span class="string">"没有该用户"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserDetailsImpl(user, privilegeService.queryByUserId(user.getUserId()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDetailsImpl</span> <span class="keyword">implements</span> <span class="title">UserDetails</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="comment">//包含着用户对应的所有Privilege，在使用时调用者给对象注入Privileges</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Privilege&gt; privilege;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> com.yoj.web.service.PrivilegeService PrivilegeService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrivilege</span><span class="params">(List&lt;Privilege&gt; privilege)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.privilege = privilege;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//无参构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserDetailsImpl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用User构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserDetailsImpl</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = user.getUserName();</span><br><span class="line">        <span class="keyword">this</span>.password = user.getPassword();</span><br><span class="line">        <span class="keyword">this</span>.user = user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用User和List&lt;Privilege&gt;构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserDetailsImpl</span><span class="params">(User user,List&lt;Privilege&gt; Privileges)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.user = user;</span><br><span class="line">        <span class="keyword">this</span>.username = user.getUserName();</span><br><span class="line">        <span class="keyword">this</span>.password = user.getPassword();</span><br><span class="line">        <span class="keyword">this</span>.privilege = Privileges;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Privilege&gt; <span class="title">getPrivilege</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> privilege;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//返回用户所有角色的封装，一个Privilege对应一个GrantedAuthority</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;? extends GrantedAuthority&gt; getAuthorities() &#123;</span><br><span class="line">        List&lt;GrantedAuthority&gt; authorities = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(Privilege Privilege : privilege) &#123;</span><br><span class="line">            authorities.add(<span class="keyword">new</span> SimpleGrantedAuthority(Privilege.getRight()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> authorities;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//判断账号是否已经过期，默认没有过期</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//判断账号是否被锁定，默认没有锁定</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//判断信用凭证是否过期，默认没有过期</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCredentialsNonExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//判断账号是否可用，默认可用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、开启自动配置的登陆功能："><a href="#5、开启自动配置的登陆功能：" class="headerlink" title="5、开启自动配置的登陆功能："></a>5、开启自动配置的登陆功能：</h3><p>1、/login来到登陆页<br>2、重定向到/login?error表示登陆失败<br>3、更多详细规定<br>4、默认post形式的 /login代表处理登陆<br>5、一但定制loginPage；那么 loginPage的post请求就是登陆</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"> http.formLogin().usernameParameter(<span class="string">"user"</span>).passwordParameter(<span class="string">"pwd"</span>)</span><br><span class="line">                .loginPage(<span class="string">"/userlogin"</span>);</span><br></pre></td></tr></table></figure><p>configure(HttpSecurity http){<br>http.formLogin();<br>}</p><h3 id="6、注销：http-logout"><a href="#6、注销：http-logout" class="headerlink" title="6、注销：http.logout();"></a>6、注销：http.logout();</h3><p><strong>注意logout时需要表单中的按钮</strong></p><p>1、访问 /logout 表示用户注销，清空session<br>2、注销成功会返回 /login?logout 页面；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.logout().logoutSuccessUrl(<span class="string">"/"</span>);<span class="comment">//注销成功以后来到首页</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">"@&#123;/logout&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"注销"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>7、记住我：Remeberme()</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">"@&#123;/userlogin&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"user"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"pwd"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"remember"</span>&gt;</span> 记住我<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"登陆"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>8获取UserDetails</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UserDetailsImpl userDetails = (UserDetailsImpl) SecurityContextHolder.getContext().getAuthentication().getPrincipal();</span><br><span class="line">        System.out.println(userDetails);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//super.configure(http);</span></span><br><span class="line">        <span class="comment">//定制请求的授权规则</span></span><br><span class="line">        http.authorizeRequests().antMatchers(<span class="string">"/"</span>).permitAll()</span><br><span class="line">                .antMatchers(<span class="string">"/level1/**"</span>).hasRole(<span class="string">"VIP1"</span>)</span><br><span class="line">                .antMatchers(<span class="string">"/level2/**"</span>).hasRole(<span class="string">"VIP2"</span>)</span><br><span class="line">                .antMatchers(<span class="string">"/level3/**"</span>).hasRole(<span class="string">"VIP3"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开启自动配置的登陆功能，效果，如果没有登陆，没有权限就会来到登陆页面</span></span><br><span class="line">        <span class="comment">//http.formLogin();</span></span><br><span class="line">        <span class="comment">//1、/login来到登陆页</span></span><br><span class="line">        <span class="comment">//2、重定向到/login?error表示登陆失败</span></span><br><span class="line">        <span class="comment">//3、更多详细规定</span></span><br><span class="line">        <span class="comment">//4、默认post形式的 /login代表处理登陆</span></span><br><span class="line">        <span class="comment">//5、一但定制loginPage；那么 loginPage的post请求就是登陆</span></span><br><span class="line">        http.formLogin().usernameParameter(<span class="string">"user"</span>).passwordParameter(<span class="string">"pwd"</span>)</span><br><span class="line">                .loginPage(<span class="string">"/userlogin"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开启自动配置的注销功能。</span></span><br><span class="line"><span class="comment">//        http.logout();</span></span><br><span class="line">        <span class="comment">//1、访问 /logout 表示用户注销，清空session</span></span><br><span class="line">        <span class="comment">//2、注销成功会返回 /login?logout 页面；</span></span><br><span class="line">        http.logout().logoutSuccessUrl(<span class="string">"/"</span>);<span class="comment">//注销成功以后来到首页</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//开启记住我功能</span></span><br><span class="line"><span class="comment">//        http.rememberMe();</span></span><br><span class="line">        <span class="comment">//登陆成功以后，将cookie发给浏览器保存，以后访问页面带上这个cookie，只要通过检查就可以免登录</span></span><br><span class="line">        <span class="comment">//点击注销会删除cookie</span></span><br><span class="line">        http.rememberMe().rememberMeParameter(<span class="string">"remember"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义认证规则</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//super.configure(auth);</span></span><br><span class="line">        auth.inMemoryAuthentication()</span><br><span class="line">                .withUser(<span class="string">"zhangsan"</span>).password(<span class="string">"123456"</span>).roles(<span class="string">"VIP1"</span>, <span class="string">"VIP2"</span>)</span><br><span class="line">                .and()</span><br><span class="line">                .withUser(<span class="string">"lisi"</span>).password(<span class="string">"123456"</span>).roles(<span class="string">"VIP2"</span>, <span class="string">"VIP3"</span>)</span><br><span class="line">                .and()</span><br><span class="line">                .withUser(<span class="string">"wangwu"</span>).password(<span class="string">"123456"</span>).roles(<span class="string">"VIP1"</span>, <span class="string">"VIP3"</span>);</span><br><span class="line">                <span class="comment">/**有以下几种形式，使用第3种*/</span></span><br><span class="line">        <span class="comment">//inMemoryAuthentication 从内存中获取</span></span><br><span class="line">        <span class="comment">//auth.inMemoryAuthentication().passwordEncoder(new BCryptPasswordEncoder()).withUser("user1").password(new BCryptPasswordEncoder().encode("123123")).roles("USER");</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">//jdbcAuthentication从数据库中获取，但是默认是以security提供的表结构</span></span><br><span class="line">        <span class="comment">//usersByUsernameQuery 指定查询用户SQL</span></span><br><span class="line">        <span class="comment">//authoritiesByUsernameQuery 指定查询权限SQL</span></span><br><span class="line">        <span class="comment">//auth.jdbcAuthentication().dataSource(dataSource).usersByUsernameQuery(query).authoritiesByUsernameQuery(query);</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">//注入userDetailsService，需要实现userDetailsService接口</span></span><br><span class="line">        auth.userDetailsService(userDetailsService).passwordEncoder(<span class="keyword">new</span> BCryptPasswordEncoder());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>定义认证用户信息获取来源，密码校验规则等</strong></p><h2 id="Thymeleaf-Extras-Springsecurity"><a href="#Thymeleaf-Extras-Springsecurity" class="headerlink" title="Thymeleaf Extras Springsecurity"></a>Thymeleaf Extras Springsecurity</h2><p>注意：thymeleaf和springsecurity版本一致，Thymeleaf Extras <strong>Springsecurity5</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.thymeleaf.extras/thymeleaf-extras-springsecurity5 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf.extras<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-springsecurity5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">div sec:authorize="!isAuthenticated()"&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>游客您好，如果想查看武林秘籍 <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/userlogin&#125;"</span>&gt;</span>请登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">"isAuthenticated()"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">sec:authentication</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>，您好,您的角色有：</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">sec:authentication</span>=<span class="string">"principal.authorities"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">"@&#123;/logout&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"注销"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">"hasRole('VIP1')"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>普通武功秘籍<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/level1/1&#125;"</span>&gt;</span>罗汉拳<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/level1/2&#125;"</span>&gt;</span>武当长拳<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/level1/3&#125;"</span>&gt;</span>全真剑法<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="在Spring-Security中使用AJAX向后台传送数据"><a href="#在Spring-Security中使用AJAX向后台传送数据" class="headerlink" title="在Spring Security中使用AJAX向后台传送数据"></a>在Spring Security中使用AJAX向后台传送数据</h2><p>本文链接：<a href="https://blog.csdn.net/bnrmaster/article/details/52939212" target="_blank" rel="noopener">https://blog.csdn.net/bnrmaster/article/details/52939212</a></p><p>环境：spring 4.2.3</p><p>  spring security 4.1.3</p><p>表现：</p><p>2016-10-26 22:44:02 [http-apr-9080-exec-10] DEBUG org.springframework.security.web.csrf.CsrfFilter - Invalid CSRF token found for XXX<br>2016-10-26 22:44:02 [http-apr-9080-exec-10] DEBUG org.springframework.security.web.header.writers.HstsHeaderWriter - Not injecting HSTS header since it did not match the requestMatcher org.springframework.security.web.header.writers.HstsHeaderWriter$SecureRequestMatcher@c3339ef<br>2016-10-26 22:44:02 [http-apr-9080-exec-10] DEBUG org.springframework.security.web.context.SecurityContextPersistenceFilter - SecurityContextHolder now cleared, as request processing completed</p><p>前台使用AJAX向后台传输数据时候控制台报出上述错误，再未集成Spring Security时不会出现此现象</p><p>解决方法：</p><p>如果前端使用的JSP</p><p>可以在前端页面的<head><meta name="generator" content="Hexo 3.9.0">标签中增加两个<meta>标签</head></p><p>如下</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"_csrf"</span> <span class="attr">content</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;_csrf.token&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- default header name is X-CSRF-TOKEN --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"_csrf_header"</span> <span class="attr">content</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;_csrf.headerName&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- ... --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>如果前端使用的是Thymeleaf分两种情况</p><p>1.前端无form表单,也要再头部增加两个meta标签，形式为</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"_csrf"</span> <span class="attr">th:content</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;_csrf.token&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">content</span>=<span class="string">""</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- default header name is X-CSRF-TOKEN --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"_csrf_header"</span> <span class="attr">th:content</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;_csrf.headerName&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">content</span>=<span class="string">""</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- ... --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>2.前端有form表单</p><p>  Spring Security为Thymeleaf中的表单中自动添加一个<input type="hidden" name="_csrf" value="xxxxxxxxxx">  (xxxx为crrf.token)</p><p>添加完meta之后不妨运行下，在页面代码中搜索_csrf，可以看看附近代码的样子，应该就会明白了</p><p>这样在使用AJAX时，需要增加一个头部</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> token = $(<span class="string">"meta[name='_csrf']"</span>).attr(<span class="string">"content"</span>);</span><br><span class="line"><span class="keyword">var</span> header = $(<span class="string">"meta[name='_csrf_header']"</span>).attr(<span class="string">"content"</span>);</span><br><span class="line"> $.ajax(&#123;  </span><br><span class="line">                   type: <span class="string">"POST"</span>,  </span><br><span class="line">                   url: <span class="string">"myposturl"</span>,  </span><br><span class="line">                   data: entID, </span><br><span class="line">                   contentType:<span class="string">"application/json; charset=utf-8"</span>,</span><br><span class="line">                   headers : &#123;<span class="attr">header</span>:token&#125;,</span><br><span class="line">                   async:<span class="literal">false</span>,</span><br><span class="line">                   success:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;  </span><br><span class="line">       <span class="comment">//do something</span></span><br><span class="line">                   &#125;,</span><br><span class="line">                   error: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="comment">//deal width error    </span></span><br><span class="line">                   &#125;</span><br><span class="line">            &#125;);</span><br></pre></td></tr></table></figure><p>实际上，这里的header使用为值”X-CSRF-TOKEN” 这样就可以成功向后台请求了</p><p><strong>spring security reference</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> csrfHeader = $(<span class="string">"meta[name='_csrf_header']"</span>).attr(<span class="string">"content"</span>);</span><br><span class="line"><span class="keyword">var</span> csrfToken = $(<span class="string">"meta[name='_csrf']"</span>).attr(<span class="string">"content"</span>);</span><br><span class="line"><span class="keyword">var</span> headers = &#123;&#125;;</span><br><span class="line">headers[csrfHeader] = csrfToken;</span><br><span class="line">console.log(problem);</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    url: <span class="string">"/p/add"</span>,</span><br><span class="line">    type: <span class="string">"POST"</span>,</span><br><span class="line">    headers : headers,</span><br><span class="line">    data: problem,</span><br><span class="line">    success(res)&#123;</span><br><span class="line">        <span class="comment">// $("id").add(res);</span></span><br><span class="line">        console.log(res);</span><br><span class="line">    &#125;,</span><br><span class="line">    error(res)&#123;</span><br><span class="line">        console.log(res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSRF Protected JavaScript Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">"This is the description for this page"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sec:csrfMetaTags</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">language</span>=<span class="string">"javascript"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> csrfParameter = $(<span class="string">"meta[name='_csrf_parameter']"</span>).attr(<span class="string">"content"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> csrfHeader = $(<span class="string">"meta[name='_csrf_header']"</span>).attr(<span class="string">"content"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> csrfToken = $(<span class="string">"meta[name='_csrf']"</span>).attr(<span class="string">"content"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">// using XMLHttpRequest directly to send an x-www-form-urlencoded request</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> ajax = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="actionscript">            ajax.open(<span class="string">"POST"</span>, <span class="string">"https://www.example.org/do/something"</span>, <span class="literal">true</span>);</span></span><br><span class="line"><span class="actionscript">            ajax.setRequestHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/x-www-form-urlencoded data"</span>);</span></span><br><span class="line"><span class="actionscript">            ajax.send(csrfParameter + <span class="string">"="</span> + csrfToken + <span class="string">"&amp;name=John&amp;..."</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">// using XMLHttpRequest directly to send a non-x-www-form-urlencoded request</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> ajax = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="actionscript">            ajax.open(<span class="string">"POST"</span>, <span class="string">"https://www.example.org/do/something"</span>, <span class="literal">true</span>);</span></span><br><span class="line">            ajax.setRequestHeader(csrfHeader, csrfToken);</span><br><span class="line"><span class="actionscript">            ajax.send(<span class="string">"..."</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">// using JQuery to send an x-www-form-urlencoded request</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> data = &#123;&#125;;</span></span><br><span class="line">            data[csrfParameter] = csrfToken;</span><br><span class="line"><span class="actionscript">            data[<span class="string">"name"</span>] = <span class="string">"John"</span>;</span></span><br><span class="line">            ...</span><br><span class="line"><span class="javascript">            $.ajax(&#123;</span></span><br><span class="line"><span class="actionscript">                url: <span class="string">"https://www.example.org/do/something"</span>,</span></span><br><span class="line"><span class="actionscript">                type: <span class="string">"POST"</span>,</span></span><br><span class="line">                data: data,</span><br><span class="line">                ...</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">// using JQuery to send a non-x-www-form-urlencoded request</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> headers = &#123;&#125;;</span></span><br><span class="line">            headers[csrfHeader] = csrfToken;</span><br><span class="line"><span class="javascript">            $.ajax(&#123;</span></span><br><span class="line"><span class="actionscript">                url: <span class="string">"https://www.example.org/do/something"</span>,</span></span><br><span class="line"><span class="actionscript">                type: <span class="string">"POST"</span>,</span></span><br><span class="line">                headers: headers,</span><br><span class="line">                ...</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span></span><br><span class="line">        ...</span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span></span><br></pre></td></tr></table></figure><p>六、Spring Boot与分布式</p><p>七、Spring Boot与监控管理</p><p>八、Spring Boot与部署</p><h1 id="七-开发热部署"><a href="#七-开发热部署" class="headerlink" title="七.开发热部署"></a>七.开发热部署</h1><h2 id="一、热部署"><a href="#一、热部署" class="headerlink" title="一、热部署"></a>一、热部署</h2><p>在开发中我们修改一个Java文件后想看到效果不得不重启应用，这导致大量时间花费，我们希望不重启应用的情况下，程序可以<strong>自动部署（热部署）</strong>。有以下四种情况，如何能实现热部署。</p><p>•1、模板引擎</p><p>–在Spring Boot中开发情况下禁用模板引擎的cache</p><p>–页面模板改变ctrl+F9可以重新编译当前页面并生效</p><p>2、Spring Loaded</p><p>Spring官方提供的热部署程序，实现修改类文件的热部署</p><p>–下载Spring Loaded（项目地址<a href="https://github.com/spring-projects/spring-loaded）" target="_blank" rel="noopener">https://github.com/spring-projects/spring-loaded）</a></p><p>–添加运行时参数；</p><p>-javaagent:C:/springloaded-1.2.5.RELEASE.jar –noverify</p><p>3、JRebel</p><p>–收费的一个热部署软件</p><p>–安装插件使用即可</p><h2 id="4、Spring-Boot-Devtools（推荐）"><a href="#4、Spring-Boot-Devtools（推荐）" class="headerlink" title="4、Spring Boot Devtools（推荐）"></a>4、Spring Boot Devtools（推荐）</h2><p>–引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>–<strong>IDEA使用ctrl+F9</strong></p><p>–或做一些小调整</p><p>  <em>Intellij</em> <em>IEDA<strong>和</strong>Eclipse<strong>不同，</strong>Eclipse<strong>设置了自动编译之后，修改类它会自动编译</strong>，而<strong>IDEA</strong>在非<strong>RUN</strong>或<strong>DEBUG</strong>情况下才会自动编译（前提是你已经设置了<strong>Auto-Compile</strong>）。</em></p><p>•设置自动编译（settings-compiler-make project automatically）</p><p>•ctrl+shift+alt+/（maintenance）</p><p>•勾选compiler.automake.allow.when.app.running</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;spring boot高级&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;[TOC]&lt;/p&gt;&lt;h1 id=&quot;一-Spring-Boot与缓存&quot;&gt;&lt;a href=&quot;#一-Spring-Boot与缓存&quot; class=&quot;headerlink&quot; title=&quot;一.Spring Boot与缓存&quot;&gt;&lt;/a&gt;一.Spring Boot与缓存&lt;/h1&gt;&lt;h2 id=&quot;1、JSR107&quot;&gt;&lt;a href=&quot;#1、JSR107&quot; class=&quot;headerlink&quot; title=&quot;1、JSR107&quot;&gt;&lt;/a&gt;1、JSR107&lt;/h2&gt;&lt;p&gt;Java Caching定义了5个核心接口，分别是&lt;strong&gt;CachingProvider&lt;/strong&gt;, &lt;strong&gt;CacheManager&lt;/strong&gt;, &lt;strong&gt;Cache&lt;/strong&gt;, &lt;strong&gt;Entry&lt;/strong&gt; 和 &lt;strong&gt;Expiry&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;•&lt;strong&gt;CachingProvider&lt;/strong&gt;定义了创建、配置、获取、管理和控制多个&lt;strong&gt;CacheManager&lt;/strong&gt;。一个应用可以在运行期访问多个CachingProvider。&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记-java" scheme="https://codeofli.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-java/"/>
    
    
      <category term="java" scheme="https://codeofli.github.io/tags/java/"/>
    
      <category term="springBoot" scheme="https://codeofli.github.io/tags/springBoot/"/>
    
  </entry>
  
</feed>
